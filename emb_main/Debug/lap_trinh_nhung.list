
lap_trinh_nhung.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd64  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b8  0800be78  0800be78  0000ce78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c430  0800c430  0000e1e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c430  0800c430  0000d430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c438  0800c438  0000e1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c438  0800c438  0000d438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c43c  0800c43c  0000d43c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0800c440  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014ac  200001e8  0800c628  0000e1e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001694  0800c628  0000e694  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000e1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000170f4  00000000  00000000  0000e211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035a3  00000000  00000000  00025305  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001560  00000000  00000000  000288a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010ba  00000000  00000000  00029e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005002  00000000  00000000  0002aec2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a13e  00000000  00000000  0002fec4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009cd6a  00000000  00000000  0004a002  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e6d6c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000728c  00000000  00000000  000e6db0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000ee03c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800be5c 	.word	0x0800be5c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	0800be5c 	.word	0x0800be5c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_f2iz>:
 8001024:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001028:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800102c:	d30f      	bcc.n	800104e <__aeabi_f2iz+0x2a>
 800102e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001032:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001036:	d90d      	bls.n	8001054 <__aeabi_f2iz+0x30>
 8001038:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800103c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001040:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001044:	fa23 f002 	lsr.w	r0, r3, r2
 8001048:	bf18      	it	ne
 800104a:	4240      	negne	r0, r0
 800104c:	4770      	bx	lr
 800104e:	f04f 0000 	mov.w	r0, #0
 8001052:	4770      	bx	lr
 8001054:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001058:	d101      	bne.n	800105e <__aeabi_f2iz+0x3a>
 800105a:	0242      	lsls	r2, r0, #9
 800105c:	d105      	bne.n	800106a <__aeabi_f2iz+0x46>
 800105e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8001062:	bf08      	it	eq
 8001064:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001068:	4770      	bx	lr
 800106a:	f04f 0000 	mov.w	r0, #0
 800106e:	4770      	bx	lr

08001070 <__aeabi_d2lz>:
 8001070:	b538      	push	{r3, r4, r5, lr}
 8001072:	2200      	movs	r2, #0
 8001074:	2300      	movs	r3, #0
 8001076:	4604      	mov	r4, r0
 8001078:	460d      	mov	r5, r1
 800107a:	f7ff fc9f 	bl	80009bc <__aeabi_dcmplt>
 800107e:	b928      	cbnz	r0, 800108c <__aeabi_d2lz+0x1c>
 8001080:	4620      	mov	r0, r4
 8001082:	4629      	mov	r1, r5
 8001084:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001088:	f000 b80a 	b.w	80010a0 <__aeabi_d2ulz>
 800108c:	4620      	mov	r0, r4
 800108e:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001092:	f000 f805 	bl	80010a0 <__aeabi_d2ulz>
 8001096:	4240      	negs	r0, r0
 8001098:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800109c:	bd38      	pop	{r3, r4, r5, pc}
 800109e:	bf00      	nop

080010a0 <__aeabi_d2ulz>:
 80010a0:	b5d0      	push	{r4, r6, r7, lr}
 80010a2:	2200      	movs	r2, #0
 80010a4:	4b0b      	ldr	r3, [pc, #44]	@ (80010d4 <__aeabi_d2ulz+0x34>)
 80010a6:	4606      	mov	r6, r0
 80010a8:	460f      	mov	r7, r1
 80010aa:	f7ff fa15 	bl	80004d8 <__aeabi_dmul>
 80010ae:	f7ff fceb 	bl	8000a88 <__aeabi_d2uiz>
 80010b2:	4604      	mov	r4, r0
 80010b4:	f7ff f996 	bl	80003e4 <__aeabi_ui2d>
 80010b8:	2200      	movs	r2, #0
 80010ba:	4b07      	ldr	r3, [pc, #28]	@ (80010d8 <__aeabi_d2ulz+0x38>)
 80010bc:	f7ff fa0c 	bl	80004d8 <__aeabi_dmul>
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	4630      	mov	r0, r6
 80010c6:	4639      	mov	r1, r7
 80010c8:	f7ff f84e 	bl	8000168 <__aeabi_dsub>
 80010cc:	f7ff fcdc 	bl	8000a88 <__aeabi_d2uiz>
 80010d0:	4621      	mov	r1, r4
 80010d2:	bdd0      	pop	{r4, r6, r7, pc}
 80010d4:	3df00000 	.word	0x3df00000
 80010d8:	41f00000 	.word	0x41f00000

080010dc <mpu6050init>:
#include <math.h>
#include "MPU_6050.h"
#include "main.h"

void mpu6050init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af04      	add	r7, sp, #16

    uint8_t val;
	val=0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	71fb      	strb	r3, [r7, #7]
    //Power Management 1 Using Internal 8MHz oscillator
	HAL_I2C_Mem_Write(&hi2c1, MPU_I2C_ADDRESS, 107, I2C_MEMADD_SIZE_8BIT, &val, 1, 10);
 80010e6:	230a      	movs	r3, #10
 80010e8:	9302      	str	r3, [sp, #8]
 80010ea:	2301      	movs	r3, #1
 80010ec:	9301      	str	r3, [sp, #4]
 80010ee:	1dfb      	adds	r3, r7, #7
 80010f0:	9300      	str	r3, [sp, #0]
 80010f2:	2301      	movs	r3, #1
 80010f4:	226b      	movs	r2, #107	@ 0x6b
 80010f6:	21d0      	movs	r1, #208	@ 0xd0
 80010f8:	481b      	ldr	r0, [pc, #108]	@ (8001168 <mpu6050init+0x8c>)
 80010fa:	f001 fec5 	bl	8002e88 <HAL_I2C_Mem_Write>
    // Sample Rate = Gyroscope Output Rate / (0 + 1) = 8 kHz
	HAL_I2C_Mem_Write(&hi2c1, MPU_I2C_ADDRESS, 25, I2C_MEMADD_SIZE_8BIT, &val, 1, 10);
 80010fe:	230a      	movs	r3, #10
 8001100:	9302      	str	r3, [sp, #8]
 8001102:	2301      	movs	r3, #1
 8001104:	9301      	str	r3, [sp, #4]
 8001106:	1dfb      	adds	r3, r7, #7
 8001108:	9300      	str	r3, [sp, #0]
 800110a:	2301      	movs	r3, #1
 800110c:	2219      	movs	r2, #25
 800110e:	21d0      	movs	r1, #208	@ 0xd0
 8001110:	4815      	ldr	r0, [pc, #84]	@ (8001168 <mpu6050init+0x8c>)
 8001112:	f001 feb9 	bl	8002e88 <HAL_I2C_Mem_Write>
    // DLPF = 1/8 kHz , we are using 8khz 
	HAL_I2C_Mem_Write(&hi2c1, MPU_I2C_ADDRESS, 26, I2C_MEMADD_SIZE_8BIT, &val, 1, 10);
 8001116:	230a      	movs	r3, #10
 8001118:	9302      	str	r3, [sp, #8]
 800111a:	2301      	movs	r3, #1
 800111c:	9301      	str	r3, [sp, #4]
 800111e:	1dfb      	adds	r3, r7, #7
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	2301      	movs	r3, #1
 8001124:	221a      	movs	r2, #26
 8001126:	21d0      	movs	r1, #208	@ 0xd0
 8001128:	480f      	ldr	r0, [pc, #60]	@ (8001168 <mpu6050init+0x8c>)
 800112a:	f001 fead 	bl	8002e88 <HAL_I2C_Mem_Write>
    // Gyroscope full scale range +-250
	HAL_I2C_Mem_Write(&hi2c1, MPU_I2C_ADDRESS, 27, I2C_MEMADD_SIZE_8BIT, &val, 1, 10);
 800112e:	230a      	movs	r3, #10
 8001130:	9302      	str	r3, [sp, #8]
 8001132:	2301      	movs	r3, #1
 8001134:	9301      	str	r3, [sp, #4]
 8001136:	1dfb      	adds	r3, r7, #7
 8001138:	9300      	str	r3, [sp, #0]
 800113a:	2301      	movs	r3, #1
 800113c:	221b      	movs	r2, #27
 800113e:	21d0      	movs	r1, #208	@ 0xd0
 8001140:	4809      	ldr	r0, [pc, #36]	@ (8001168 <mpu6050init+0x8c>)
 8001142:	f001 fea1 	bl	8002e88 <HAL_I2C_Mem_Write>
    // Accelerometer full scale range +-2g
	HAL_I2C_Mem_Write(&hi2c1, MPU_I2C_ADDRESS, 28, I2C_MEMADD_SIZE_8BIT, &val, 1, 10);
 8001146:	230a      	movs	r3, #10
 8001148:	9302      	str	r3, [sp, #8]
 800114a:	2301      	movs	r3, #1
 800114c:	9301      	str	r3, [sp, #4]
 800114e:	1dfb      	adds	r3, r7, #7
 8001150:	9300      	str	r3, [sp, #0]
 8001152:	2301      	movs	r3, #1
 8001154:	221c      	movs	r2, #28
 8001156:	21d0      	movs	r1, #208	@ 0xd0
 8001158:	4803      	ldr	r0, [pc, #12]	@ (8001168 <mpu6050init+0x8c>)
 800115a:	f001 fe95 	bl	8002e88 <HAL_I2C_Mem_Write>
}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	200004d4 	.word	0x200004d4
 800116c:	00000000 	.word	0x00000000

08001170 <getGyroData>:

void getGyroData(MPU6050_DataFusionTypedef *m)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b088      	sub	sp, #32
 8001174:	af04      	add	r7, sp, #16
 8001176:	6078      	str	r0, [r7, #4]
    /*
    read register that store mpu gyroscope value from register 67 to 72 and store into
    buffer address
    */
    HAL_I2C_Mem_Read(&hi2c1,MPU_I2C_ADDRESS,67,I2C_MEMADD_SIZE_8BIT,m->MPU_RX_DATA,6,10);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800117e:	220a      	movs	r2, #10
 8001180:	9202      	str	r2, [sp, #8]
 8001182:	2206      	movs	r2, #6
 8001184:	9201      	str	r2, [sp, #4]
 8001186:	9300      	str	r3, [sp, #0]
 8001188:	2301      	movs	r3, #1
 800118a:	2243      	movs	r2, #67	@ 0x43
 800118c:	21d0      	movs	r1, #208	@ 0xd0
 800118e:	4840      	ldr	r0, [pc, #256]	@ (8001290 <getGyroData+0x120>)
 8001190:	f001 ff74 	bl	800307c <HAL_I2C_Mem_Read>

    int16_t GyroX=((*(m->MPU_RX_DATA))<<8)+(*(m->MPU_RX_DATA+1));
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 800119a:	021b      	lsls	r3, r3, #8
 800119c:	b29b      	uxth	r3, r3
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	f892 2111 	ldrb.w	r2, [r2, #273]	@ 0x111
 80011a4:	4413      	add	r3, r2
 80011a6:	b29b      	uxth	r3, r3
 80011a8:	81fb      	strh	r3, [r7, #14]
    int16_t GyroY=((*(m->MPU_RX_DATA+2))<<8)+(*(m->MPU_RX_DATA+3));
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	f893 3112 	ldrb.w	r3, [r3, #274]	@ 0x112
 80011b0:	021b      	lsls	r3, r3, #8
 80011b2:	b29b      	uxth	r3, r3
 80011b4:	687a      	ldr	r2, [r7, #4]
 80011b6:	f892 2113 	ldrb.w	r2, [r2, #275]	@ 0x113
 80011ba:	4413      	add	r3, r2
 80011bc:	b29b      	uxth	r3, r3
 80011be:	81bb      	strh	r3, [r7, #12]
    int16_t GyroZ=((*(m->MPU_RX_DATA+4))<<8)+(*(m->MPU_RX_DATA+5));
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 80011c6:	021b      	lsls	r3, r3, #8
 80011c8:	b29b      	uxth	r3, r3
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	f892 2115 	ldrb.w	r2, [r2, #277]	@ 0x115
 80011d0:	4413      	add	r3, r2
 80011d2:	b29b      	uxth	r3, r3
 80011d4:	817b      	strh	r3, [r7, #10]

    m->gx=((float)GyroX)/131*(3.141592654/180);
 80011d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff fd7e 	bl	8000cdc <__aeabi_i2f>
 80011e0:	4603      	mov	r3, r0
 80011e2:	492c      	ldr	r1, [pc, #176]	@ (8001294 <getGyroData+0x124>)
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff fe81 	bl	8000eec <__aeabi_fdiv>
 80011ea:	4603      	mov	r3, r0
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff f91b 	bl	8000428 <__aeabi_f2d>
 80011f2:	a325      	add	r3, pc, #148	@ (adr r3, 8001288 <getGyroData+0x118>)
 80011f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f8:	f7ff f96e 	bl	80004d8 <__aeabi_dmul>
 80011fc:	4602      	mov	r2, r0
 80011fe:	460b      	mov	r3, r1
 8001200:	4610      	mov	r0, r2
 8001202:	4619      	mov	r1, r3
 8001204:	f7ff fc60 	bl	8000ac8 <__aeabi_d2f>
 8001208:	4602      	mov	r2, r0
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	625a      	str	r2, [r3, #36]	@ 0x24
    m->gy=((float)GyroY)/131*(3.141592654/180);
 800120e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff fd62 	bl	8000cdc <__aeabi_i2f>
 8001218:	4603      	mov	r3, r0
 800121a:	491e      	ldr	r1, [pc, #120]	@ (8001294 <getGyroData+0x124>)
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff fe65 	bl	8000eec <__aeabi_fdiv>
 8001222:	4603      	mov	r3, r0
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff f8ff 	bl	8000428 <__aeabi_f2d>
 800122a:	a317      	add	r3, pc, #92	@ (adr r3, 8001288 <getGyroData+0x118>)
 800122c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001230:	f7ff f952 	bl	80004d8 <__aeabi_dmul>
 8001234:	4602      	mov	r2, r0
 8001236:	460b      	mov	r3, r1
 8001238:	4610      	mov	r0, r2
 800123a:	4619      	mov	r1, r3
 800123c:	f7ff fc44 	bl	8000ac8 <__aeabi_d2f>
 8001240:	4602      	mov	r2, r0
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	629a      	str	r2, [r3, #40]	@ 0x28
    m->gz=((float)GyroZ)/131*(3.141592654/180);
 8001246:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff fd46 	bl	8000cdc <__aeabi_i2f>
 8001250:	4603      	mov	r3, r0
 8001252:	4910      	ldr	r1, [pc, #64]	@ (8001294 <getGyroData+0x124>)
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff fe49 	bl	8000eec <__aeabi_fdiv>
 800125a:	4603      	mov	r3, r0
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff f8e3 	bl	8000428 <__aeabi_f2d>
 8001262:	a309      	add	r3, pc, #36	@ (adr r3, 8001288 <getGyroData+0x118>)
 8001264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001268:	f7ff f936 	bl	80004d8 <__aeabi_dmul>
 800126c:	4602      	mov	r2, r0
 800126e:	460b      	mov	r3, r1
 8001270:	4610      	mov	r0, r2
 8001272:	4619      	mov	r1, r3
 8001274:	f7ff fc28 	bl	8000ac8 <__aeabi_d2f>
 8001278:	4602      	mov	r2, r0
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800127e:	bf00      	nop
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	a25ca311 	.word	0xa25ca311
 800128c:	3f91df46 	.word	0x3f91df46
 8001290:	200004d4 	.word	0x200004d4
 8001294:	43030000 	.word	0x43030000

08001298 <getAccelData>:

void getAccelData(MPU6050_DataFusionTypedef *m)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b088      	sub	sp, #32
 800129c:	af04      	add	r7, sp, #16
 800129e:	6078      	str	r0, [r7, #4]

    HAL_I2C_Mem_Read(&hi2c1,MPU_I2C_ADDRESS,59,I2C_MEMADD_SIZE_8BIT,m->MPU_RX_DATA,6,10);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 80012a6:	220a      	movs	r2, #10
 80012a8:	9202      	str	r2, [sp, #8]
 80012aa:	2206      	movs	r2, #6
 80012ac:	9201      	str	r2, [sp, #4]
 80012ae:	9300      	str	r3, [sp, #0]
 80012b0:	2301      	movs	r3, #1
 80012b2:	223b      	movs	r2, #59	@ 0x3b
 80012b4:	21d0      	movs	r1, #208	@ 0xd0
 80012b6:	482a      	ldr	r0, [pc, #168]	@ (8001360 <getAccelData+0xc8>)
 80012b8:	f001 fee0 	bl	800307c <HAL_I2C_Mem_Read>
    
    int16_t AccX=((*(m->MPU_RX_DATA))<<8)+(*(m->MPU_RX_DATA+1));
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 80012c2:	021b      	lsls	r3, r3, #8
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	f892 2111 	ldrb.w	r2, [r2, #273]	@ 0x111
 80012cc:	4413      	add	r3, r2
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	81fb      	strh	r3, [r7, #14]
    int16_t AccY=((*(m->MPU_RX_DATA+2))<<8)+(*(m->MPU_RX_DATA+3));
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	f893 3112 	ldrb.w	r3, [r3, #274]	@ 0x112
 80012d8:	021b      	lsls	r3, r3, #8
 80012da:	b29b      	uxth	r3, r3
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	f892 2113 	ldrb.w	r2, [r2, #275]	@ 0x113
 80012e2:	4413      	add	r3, r2
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	81bb      	strh	r3, [r7, #12]
    int16_t AccZ=((*(m->MPU_RX_DATA+4))<<8)+(*(m->MPU_RX_DATA+5));
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 80012ee:	021b      	lsls	r3, r3, #8
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	f892 2115 	ldrb.w	r2, [r2, #277]	@ 0x115
 80012f8:	4413      	add	r3, r2
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	817b      	strh	r3, [r7, #10]

    m->ax=((float)AccX)/16384;
 80012fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff fcea 	bl	8000cdc <__aeabi_i2f>
 8001308:	4603      	mov	r3, r0
 800130a:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff fdec 	bl	8000eec <__aeabi_fdiv>
 8001314:	4603      	mov	r3, r0
 8001316:	461a      	mov	r2, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	631a      	str	r2, [r3, #48]	@ 0x30
    m->ay=((float)AccY)/16384;
 800131c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff fcdb 	bl	8000cdc <__aeabi_i2f>
 8001326:	4603      	mov	r3, r0
 8001328:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff fddd 	bl	8000eec <__aeabi_fdiv>
 8001332:	4603      	mov	r3, r0
 8001334:	461a      	mov	r2, r3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	635a      	str	r2, [r3, #52]	@ 0x34
    m->az=((float)AccZ)/16384;
 800133a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff fccc 	bl	8000cdc <__aeabi_i2f>
 8001344:	4603      	mov	r3, r0
 8001346:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff fdce 	bl	8000eec <__aeabi_fdiv>
 8001350:	4603      	mov	r3, r0
 8001352:	461a      	mov	r2, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001358:	bf00      	nop
 800135a:	3710      	adds	r7, #16
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	200004d4 	.word	0x200004d4

08001364 <ComplimenttaryFilterInit>:

void ComplimenttaryFilterInit(MPU6050_DataFusionTypedef *m,float sampleTime)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
	m->sampleTime=sampleTime;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	683a      	ldr	r2, [r7, #0]
 8001372:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
}
 8001376:	bf00      	nop
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	bc80      	pop	{r7}
 800137e:	4770      	bx	lr

08001380 <mpu6050ComplimentaryFilter>:
		m->KF_roll_degree=m->estimated_roll*180/3.141592654;
		m->KF_pitch_degree=m->estimated_pitch*180/3.141592654;
}

void mpu6050ComplimentaryFilter(MPU6050_DataFusionTypedef *m)
{
 8001380:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001384:	b084      	sub	sp, #16
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
    float accRawAngleX=atan2( m->ay,sqrt(pow(m->ax,2) + pow(m->az,2))) ;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff f84a 	bl	8000428 <__aeabi_f2d>
 8001394:	4604      	mov	r4, r0
 8001396:	460d      	mov	r5, r1
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff f843 	bl	8000428 <__aeabi_f2d>
 80013a2:	f04f 0200 	mov.w	r2, #0
 80013a6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80013aa:	f009 fbbf 	bl	800ab2c <pow>
 80013ae:	4680      	mov	r8, r0
 80013b0:	4689      	mov	r9, r1
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff f836 	bl	8000428 <__aeabi_f2d>
 80013bc:	f04f 0200 	mov.w	r2, #0
 80013c0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80013c4:	f009 fbb2 	bl	800ab2c <pow>
 80013c8:	4602      	mov	r2, r0
 80013ca:	460b      	mov	r3, r1
 80013cc:	4640      	mov	r0, r8
 80013ce:	4649      	mov	r1, r9
 80013d0:	f7fe fecc 	bl	800016c <__adddf3>
 80013d4:	4602      	mov	r2, r0
 80013d6:	460b      	mov	r3, r1
 80013d8:	4610      	mov	r0, r2
 80013da:	4619      	mov	r1, r3
 80013dc:	f009 fc0e 	bl	800abfc <sqrt>
 80013e0:	4602      	mov	r2, r0
 80013e2:	460b      	mov	r3, r1
 80013e4:	4620      	mov	r0, r4
 80013e6:	4629      	mov	r1, r5
 80013e8:	f009 fb9e 	bl	800ab28 <atan2>
 80013ec:	4602      	mov	r2, r0
 80013ee:	460b      	mov	r3, r1
 80013f0:	4610      	mov	r0, r2
 80013f2:	4619      	mov	r1, r3
 80013f4:	f7ff fb68 	bl	8000ac8 <__aeabi_d2f>
 80013f8:	4603      	mov	r3, r0
 80013fa:	60fb      	str	r3, [r7, #12]
    m->CF_roll=HIGH_FILTER*(m->CF_roll+m->gx*m->sampleTime)+LOW_FILTER*accRawAngleX;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6d5c      	ldr	r4, [r3, #84]	@ 0x54
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 800140a:	4619      	mov	r1, r3
 800140c:	4610      	mov	r0, r2
 800140e:	f7ff fcb9 	bl	8000d84 <__aeabi_fmul>
 8001412:	4603      	mov	r3, r0
 8001414:	4619      	mov	r1, r3
 8001416:	4620      	mov	r0, r4
 8001418:	f7ff fbac 	bl	8000b74 <__addsf3>
 800141c:	4603      	mov	r3, r0
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff f802 	bl	8000428 <__aeabi_f2d>
 8001424:	a360      	add	r3, pc, #384	@ (adr r3, 80015a8 <mpu6050ComplimentaryFilter+0x228>)
 8001426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800142a:	f7ff f855 	bl	80004d8 <__aeabi_dmul>
 800142e:	4602      	mov	r2, r0
 8001430:	460b      	mov	r3, r1
 8001432:	4614      	mov	r4, r2
 8001434:	461d      	mov	r5, r3
 8001436:	68f8      	ldr	r0, [r7, #12]
 8001438:	f7fe fff6 	bl	8000428 <__aeabi_f2d>
 800143c:	a35c      	add	r3, pc, #368	@ (adr r3, 80015b0 <mpu6050ComplimentaryFilter+0x230>)
 800143e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001442:	f7ff f849 	bl	80004d8 <__aeabi_dmul>
 8001446:	4602      	mov	r2, r0
 8001448:	460b      	mov	r3, r1
 800144a:	4620      	mov	r0, r4
 800144c:	4629      	mov	r1, r5
 800144e:	f7fe fe8d 	bl	800016c <__adddf3>
 8001452:	4602      	mov	r2, r0
 8001454:	460b      	mov	r3, r1
 8001456:	4610      	mov	r0, r2
 8001458:	4619      	mov	r1, r3
 800145a:	f7ff fb35 	bl	8000ac8 <__aeabi_d2f>
 800145e:	4602      	mov	r2, r0
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	655a      	str	r2, [r3, #84]	@ 0x54
    float accRawAngleY=atan2( m->ax,sqrt(pow(m->ay,2) + pow(m->az,2))) ;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001468:	4618      	mov	r0, r3
 800146a:	f7fe ffdd 	bl	8000428 <__aeabi_f2d>
 800146e:	4604      	mov	r4, r0
 8001470:	460d      	mov	r5, r1
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001476:	4618      	mov	r0, r3
 8001478:	f7fe ffd6 	bl	8000428 <__aeabi_f2d>
 800147c:	f04f 0200 	mov.w	r2, #0
 8001480:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001484:	f009 fb52 	bl	800ab2c <pow>
 8001488:	4680      	mov	r8, r0
 800148a:	4689      	mov	r9, r1
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001490:	4618      	mov	r0, r3
 8001492:	f7fe ffc9 	bl	8000428 <__aeabi_f2d>
 8001496:	f04f 0200 	mov.w	r2, #0
 800149a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800149e:	f009 fb45 	bl	800ab2c <pow>
 80014a2:	4602      	mov	r2, r0
 80014a4:	460b      	mov	r3, r1
 80014a6:	4640      	mov	r0, r8
 80014a8:	4649      	mov	r1, r9
 80014aa:	f7fe fe5f 	bl	800016c <__adddf3>
 80014ae:	4602      	mov	r2, r0
 80014b0:	460b      	mov	r3, r1
 80014b2:	4610      	mov	r0, r2
 80014b4:	4619      	mov	r1, r3
 80014b6:	f009 fba1 	bl	800abfc <sqrt>
 80014ba:	4602      	mov	r2, r0
 80014bc:	460b      	mov	r3, r1
 80014be:	4620      	mov	r0, r4
 80014c0:	4629      	mov	r1, r5
 80014c2:	f009 fb31 	bl	800ab28 <atan2>
 80014c6:	4602      	mov	r2, r0
 80014c8:	460b      	mov	r3, r1
 80014ca:	4610      	mov	r0, r2
 80014cc:	4619      	mov	r1, r3
 80014ce:	f7ff fafb 	bl	8000ac8 <__aeabi_d2f>
 80014d2:	4603      	mov	r3, r0
 80014d4:	60bb      	str	r3, [r7, #8]
    m->CF_pitch=HIGH_FILTER*(m->CF_pitch+m->gy*m->sampleTime)+LOW_FILTER*accRawAngleY;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6d9c      	ldr	r4, [r3, #88]	@ 0x58
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 80014e4:	4619      	mov	r1, r3
 80014e6:	4610      	mov	r0, r2
 80014e8:	f7ff fc4c 	bl	8000d84 <__aeabi_fmul>
 80014ec:	4603      	mov	r3, r0
 80014ee:	4619      	mov	r1, r3
 80014f0:	4620      	mov	r0, r4
 80014f2:	f7ff fb3f 	bl	8000b74 <__addsf3>
 80014f6:	4603      	mov	r3, r0
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7fe ff95 	bl	8000428 <__aeabi_f2d>
 80014fe:	a32a      	add	r3, pc, #168	@ (adr r3, 80015a8 <mpu6050ComplimentaryFilter+0x228>)
 8001500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001504:	f7fe ffe8 	bl	80004d8 <__aeabi_dmul>
 8001508:	4602      	mov	r2, r0
 800150a:	460b      	mov	r3, r1
 800150c:	4614      	mov	r4, r2
 800150e:	461d      	mov	r5, r3
 8001510:	68b8      	ldr	r0, [r7, #8]
 8001512:	f7fe ff89 	bl	8000428 <__aeabi_f2d>
 8001516:	a326      	add	r3, pc, #152	@ (adr r3, 80015b0 <mpu6050ComplimentaryFilter+0x230>)
 8001518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800151c:	f7fe ffdc 	bl	80004d8 <__aeabi_dmul>
 8001520:	4602      	mov	r2, r0
 8001522:	460b      	mov	r3, r1
 8001524:	4620      	mov	r0, r4
 8001526:	4629      	mov	r1, r5
 8001528:	f7fe fe20 	bl	800016c <__adddf3>
 800152c:	4602      	mov	r2, r0
 800152e:	460b      	mov	r3, r1
 8001530:	4610      	mov	r0, r2
 8001532:	4619      	mov	r1, r3
 8001534:	f7ff fac8 	bl	8000ac8 <__aeabi_d2f>
 8001538:	4602      	mov	r2, r0
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	659a      	str	r2, [r3, #88]	@ 0x58
		m->CF_pitch_degree=m->CF_pitch*180/3.141592654;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001542:	491f      	ldr	r1, [pc, #124]	@ (80015c0 <mpu6050ComplimentaryFilter+0x240>)
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff fc1d 	bl	8000d84 <__aeabi_fmul>
 800154a:	4603      	mov	r3, r0
 800154c:	4618      	mov	r0, r3
 800154e:	f7fe ff6b 	bl	8000428 <__aeabi_f2d>
 8001552:	a319      	add	r3, pc, #100	@ (adr r3, 80015b8 <mpu6050ComplimentaryFilter+0x238>)
 8001554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001558:	f7ff f8e8 	bl	800072c <__aeabi_ddiv>
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	4610      	mov	r0, r2
 8001562:	4619      	mov	r1, r3
 8001564:	f7ff fab0 	bl	8000ac8 <__aeabi_d2f>
 8001568:	4602      	mov	r2, r0
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	651a      	str	r2, [r3, #80]	@ 0x50
		m->CF_roll_degree=m->CF_roll*180/3.141592654;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001572:	4913      	ldr	r1, [pc, #76]	@ (80015c0 <mpu6050ComplimentaryFilter+0x240>)
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff fc05 	bl	8000d84 <__aeabi_fmul>
 800157a:	4603      	mov	r3, r0
 800157c:	4618      	mov	r0, r3
 800157e:	f7fe ff53 	bl	8000428 <__aeabi_f2d>
 8001582:	a30d      	add	r3, pc, #52	@ (adr r3, 80015b8 <mpu6050ComplimentaryFilter+0x238>)
 8001584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001588:	f7ff f8d0 	bl	800072c <__aeabi_ddiv>
 800158c:	4602      	mov	r2, r0
 800158e:	460b      	mov	r3, r1
 8001590:	4610      	mov	r0, r2
 8001592:	4619      	mov	r1, r3
 8001594:	f7ff fa98 	bl	8000ac8 <__aeabi_d2f>
 8001598:	4602      	mov	r2, r0
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 800159e:	bf00      	nop
 80015a0:	3710      	adds	r7, #16
 80015a2:	46bd      	mov	sp, r7
 80015a4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80015a8:	f5c28f5c 	.word	0xf5c28f5c
 80015ac:	3fef5c28 	.word	0x3fef5c28
 80015b0:	47ae147b 	.word	0x47ae147b
 80015b4:	3f947ae1 	.word	0x3f947ae1
 80015b8:	54524550 	.word	0x54524550
 80015bc:	400921fb 	.word	0x400921fb
 80015c0:	43340000 	.word	0x43340000

080015c4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80015c4:	b480      	push	{r7}
 80015c6:	b085      	sub	sp, #20
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	60f8      	str	r0, [r7, #12]
 80015cc:	60b9      	str	r1, [r7, #8]
 80015ce:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	4a06      	ldr	r2, [pc, #24]	@ (80015ec <vApplicationGetIdleTaskMemory+0x28>)
 80015d4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	4a05      	ldr	r2, [pc, #20]	@ (80015f0 <vApplicationGetIdleTaskMemory+0x2c>)
 80015da:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2280      	movs	r2, #128	@ 0x80
 80015e0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80015e2:	bf00      	nop
 80015e4:	3714      	adds	r7, #20
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bc80      	pop	{r7}
 80015ea:	4770      	bx	lr
 80015ec:	20000204 	.word	0x20000204
 80015f0:	200002a4 	.word	0x200002a4

080015f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015f4:	b5b0      	push	{r4, r5, r7, lr}
 80015f6:	b09c      	sub	sp, #112	@ 0x70
 80015f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015fa:	f000 fd45 	bl	8002088 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015fe:	f000 f879 	bl	80016f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001602:	f000 f9b5 	bl	8001970 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001606:	f000 f903 	bl	8001810 <MX_I2C1_Init>
  MX_I2C2_Init();
 800160a:	f000 f92f 	bl	800186c <MX_I2C2_Init>
  MX_USART1_UART_Init();
 800160e:	f000 f95b 	bl	80018c8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001612:	f000 f983 	bl	800191c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001616:	f000 f8bd 	bl	8001794 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  //init adc and mpu
  mpu6050init();
 800161a:	f7ff fd5f 	bl	80010dc <mpu6050init>
  ComplimenttaryFilterInit(&mpu,0.02);
 800161e:	492a      	ldr	r1, [pc, #168]	@ (80016c8 <main+0xd4>)
 8001620:	482a      	ldr	r0, [pc, #168]	@ (80016cc <main+0xd8>)
 8001622:	f7ff fe9f 	bl	8001364 <ComplimenttaryFilterInit>
  HAL_ADC_Start(&hadc1);
 8001626:	482a      	ldr	r0, [pc, #168]	@ (80016d0 <main+0xdc>)
 8001628:	f000 fe38 	bl	800229c <HAL_ADC_Start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800162c:	4b29      	ldr	r3, [pc, #164]	@ (80016d4 <main+0xe0>)
 800162e:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8001632:	461d      	mov	r5, r3
 8001634:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001636:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001638:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800163c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001640:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001644:	2100      	movs	r1, #0
 8001646:	4618      	mov	r0, r3
 8001648:	f003 fcb6 	bl	8004fb8 <osThreadCreate>
 800164c:	4603      	mov	r3, r0
 800164e:	4a22      	ldr	r2, [pc, #136]	@ (80016d8 <main+0xe4>)
 8001650:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(mpuDataTask,getMpuDataTask,osPriorityNormal,0,128);
 8001652:	4b22      	ldr	r3, [pc, #136]	@ (80016dc <main+0xe8>)
 8001654:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8001658:	461d      	mov	r5, r3
 800165a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800165c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800165e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001662:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  getMpuDataTaskHandle=osThreadCreate(osThread(mpuDataTask), NULL);
 8001666:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800166a:	2100      	movs	r1, #0
 800166c:	4618      	mov	r0, r3
 800166e:	f003 fca3 	bl	8004fb8 <osThreadCreate>
 8001672:	4603      	mov	r3, r0
 8001674:	4a1a      	ldr	r2, [pc, #104]	@ (80016e0 <main+0xec>)
 8001676:	6013      	str	r3, [r2, #0]

  osThreadDef(mpuOutputTask,complimentaryFilterTask,osPriorityNormal,0,128);
 8001678:	4b1a      	ldr	r3, [pc, #104]	@ (80016e4 <main+0xf0>)
 800167a:	f107 041c 	add.w	r4, r7, #28
 800167e:	461d      	mov	r5, r3
 8001680:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001682:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001684:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001688:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  complimentaryFilterTaskHandle=osThreadCreate(osThread(mpuOutputTask),NULL);
 800168c:	f107 031c 	add.w	r3, r7, #28
 8001690:	2100      	movs	r1, #0
 8001692:	4618      	mov	r0, r3
 8001694:	f003 fc90 	bl	8004fb8 <osThreadCreate>
 8001698:	4603      	mov	r3, r0
 800169a:	4a13      	ldr	r2, [pc, #76]	@ (80016e8 <main+0xf4>)
 800169c:	6013      	str	r3, [r2, #0]

  osThreadDef(mpuTransmitTask,transmitMPUDataTask,osPriorityNormal,0,200);
 800169e:	4b13      	ldr	r3, [pc, #76]	@ (80016ec <main+0xf8>)
 80016a0:	463c      	mov	r4, r7
 80016a2:	461d      	mov	r5, r3
 80016a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016a8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  transmitMPUDataTaskHandle=osThreadCreate(osThread(mpuTransmitTask), NULL);
 80016b0:	463b      	mov	r3, r7
 80016b2:	2100      	movs	r1, #0
 80016b4:	4618      	mov	r0, r3
 80016b6:	f003 fc7f 	bl	8004fb8 <osThreadCreate>
 80016ba:	4603      	mov	r3, r0
 80016bc:	4a0c      	ldr	r2, [pc, #48]	@ (80016f0 <main+0xfc>)
 80016be:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80016c0:	f003 fc73 	bl	8004faa <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80016c4:	bf00      	nop
 80016c6:	e7fd      	b.n	80016c4 <main+0xd0>
 80016c8:	3ca3d70a 	.word	0x3ca3d70a
 80016cc:	20000680 	.word	0x20000680
 80016d0:	200004a4 	.word	0x200004a4
 80016d4:	0800be84 	.word	0x0800be84
 80016d8:	2000060c 	.word	0x2000060c
 80016dc:	0800beac 	.word	0x0800beac
 80016e0:	20000610 	.word	0x20000610
 80016e4:	0800bed8 	.word	0x0800bed8
 80016e8:	20000614 	.word	0x20000614
 80016ec:	0800bf04 	.word	0x0800bf04
 80016f0:	20000618 	.word	0x20000618

080016f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b094      	sub	sp, #80	@ 0x50
 80016f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016fa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016fe:	2228      	movs	r2, #40	@ 0x28
 8001700:	2100      	movs	r1, #0
 8001702:	4618      	mov	r0, r3
 8001704:	f005 fdf1 	bl	80072ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001708:	f107 0314 	add.w	r3, r7, #20
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	60da      	str	r2, [r3, #12]
 8001716:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001718:	1d3b      	adds	r3, r7, #4
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	605a      	str	r2, [r3, #4]
 8001720:	609a      	str	r2, [r3, #8]
 8001722:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001724:	2302      	movs	r3, #2
 8001726:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001728:	2301      	movs	r3, #1
 800172a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800172c:	2310      	movs	r3, #16
 800172e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001730:	2300      	movs	r3, #0
 8001732:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001734:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001738:	4618      	mov	r0, r3
 800173a:	f002 fac7 	bl	8003ccc <HAL_RCC_OscConfig>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8001744:	f000 f9b2 	bl	8001aac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001748:	230f      	movs	r3, #15
 800174a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800174c:	2300      	movs	r3, #0
 800174e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001750:	2300      	movs	r3, #0
 8001752:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001754:	2300      	movs	r3, #0
 8001756:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001758:	2300      	movs	r3, #0
 800175a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800175c:	f107 0314 	add.w	r3, r7, #20
 8001760:	2100      	movs	r1, #0
 8001762:	4618      	mov	r0, r3
 8001764:	f002 fd34 	bl	80041d0 <HAL_RCC_ClockConfig>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800176e:	f000 f99d 	bl	8001aac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001772:	2302      	movs	r3, #2
 8001774:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001776:	2300      	movs	r3, #0
 8001778:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800177a:	1d3b      	adds	r3, r7, #4
 800177c:	4618      	mov	r0, r3
 800177e:	f002 fee5 	bl	800454c <HAL_RCCEx_PeriphCLKConfig>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001788:	f000 f990 	bl	8001aac <Error_Handler>
  }
}
 800178c:	bf00      	nop
 800178e:	3750      	adds	r7, #80	@ 0x50
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}

08001794 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800179a:	1d3b      	adds	r3, r7, #4
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	605a      	str	r2, [r3, #4]
 80017a2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80017a4:	4b18      	ldr	r3, [pc, #96]	@ (8001808 <MX_ADC1_Init+0x74>)
 80017a6:	4a19      	ldr	r2, [pc, #100]	@ (800180c <MX_ADC1_Init+0x78>)
 80017a8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80017aa:	4b17      	ldr	r3, [pc, #92]	@ (8001808 <MX_ADC1_Init+0x74>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80017b0:	4b15      	ldr	r3, [pc, #84]	@ (8001808 <MX_ADC1_Init+0x74>)
 80017b2:	2201      	movs	r2, #1
 80017b4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80017b6:	4b14      	ldr	r3, [pc, #80]	@ (8001808 <MX_ADC1_Init+0x74>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017bc:	4b12      	ldr	r3, [pc, #72]	@ (8001808 <MX_ADC1_Init+0x74>)
 80017be:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80017c2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017c4:	4b10      	ldr	r3, [pc, #64]	@ (8001808 <MX_ADC1_Init+0x74>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80017ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001808 <MX_ADC1_Init+0x74>)
 80017cc:	2201      	movs	r2, #1
 80017ce:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017d0:	480d      	ldr	r0, [pc, #52]	@ (8001808 <MX_ADC1_Init+0x74>)
 80017d2:	f000 fc8b 	bl	80020ec <HAL_ADC_Init>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80017dc:	f000 f966 	bl	8001aac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80017e0:	2309      	movs	r3, #9
 80017e2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80017e4:	2301      	movs	r3, #1
 80017e6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80017e8:	2300      	movs	r3, #0
 80017ea:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017ec:	1d3b      	adds	r3, r7, #4
 80017ee:	4619      	mov	r1, r3
 80017f0:	4805      	ldr	r0, [pc, #20]	@ (8001808 <MX_ADC1_Init+0x74>)
 80017f2:	f000 fe0d 	bl	8002410 <HAL_ADC_ConfigChannel>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80017fc:	f000 f956 	bl	8001aac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001800:	bf00      	nop
 8001802:	3710      	adds	r7, #16
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	200004a4 	.word	0x200004a4
 800180c:	40012400 	.word	0x40012400

08001810 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001814:	4b12      	ldr	r3, [pc, #72]	@ (8001860 <MX_I2C1_Init+0x50>)
 8001816:	4a13      	ldr	r2, [pc, #76]	@ (8001864 <MX_I2C1_Init+0x54>)
 8001818:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800181a:	4b11      	ldr	r3, [pc, #68]	@ (8001860 <MX_I2C1_Init+0x50>)
 800181c:	4a12      	ldr	r2, [pc, #72]	@ (8001868 <MX_I2C1_Init+0x58>)
 800181e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001820:	4b0f      	ldr	r3, [pc, #60]	@ (8001860 <MX_I2C1_Init+0x50>)
 8001822:	2200      	movs	r2, #0
 8001824:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001826:	4b0e      	ldr	r3, [pc, #56]	@ (8001860 <MX_I2C1_Init+0x50>)
 8001828:	2200      	movs	r2, #0
 800182a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800182c:	4b0c      	ldr	r3, [pc, #48]	@ (8001860 <MX_I2C1_Init+0x50>)
 800182e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001832:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001834:	4b0a      	ldr	r3, [pc, #40]	@ (8001860 <MX_I2C1_Init+0x50>)
 8001836:	2200      	movs	r2, #0
 8001838:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800183a:	4b09      	ldr	r3, [pc, #36]	@ (8001860 <MX_I2C1_Init+0x50>)
 800183c:	2200      	movs	r2, #0
 800183e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001840:	4b07      	ldr	r3, [pc, #28]	@ (8001860 <MX_I2C1_Init+0x50>)
 8001842:	2200      	movs	r2, #0
 8001844:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001846:	4b06      	ldr	r3, [pc, #24]	@ (8001860 <MX_I2C1_Init+0x50>)
 8001848:	2200      	movs	r2, #0
 800184a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800184c:	4804      	ldr	r0, [pc, #16]	@ (8001860 <MX_I2C1_Init+0x50>)
 800184e:	f001 f9d7 	bl	8002c00 <HAL_I2C_Init>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001858:	f000 f928 	bl	8001aac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800185c:	bf00      	nop
 800185e:	bd80      	pop	{r7, pc}
 8001860:	200004d4 	.word	0x200004d4
 8001864:	40005400 	.word	0x40005400
 8001868:	000186a0 	.word	0x000186a0

0800186c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001870:	4b12      	ldr	r3, [pc, #72]	@ (80018bc <MX_I2C2_Init+0x50>)
 8001872:	4a13      	ldr	r2, [pc, #76]	@ (80018c0 <MX_I2C2_Init+0x54>)
 8001874:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001876:	4b11      	ldr	r3, [pc, #68]	@ (80018bc <MX_I2C2_Init+0x50>)
 8001878:	4a12      	ldr	r2, [pc, #72]	@ (80018c4 <MX_I2C2_Init+0x58>)
 800187a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800187c:	4b0f      	ldr	r3, [pc, #60]	@ (80018bc <MX_I2C2_Init+0x50>)
 800187e:	2200      	movs	r2, #0
 8001880:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001882:	4b0e      	ldr	r3, [pc, #56]	@ (80018bc <MX_I2C2_Init+0x50>)
 8001884:	2200      	movs	r2, #0
 8001886:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001888:	4b0c      	ldr	r3, [pc, #48]	@ (80018bc <MX_I2C2_Init+0x50>)
 800188a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800188e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001890:	4b0a      	ldr	r3, [pc, #40]	@ (80018bc <MX_I2C2_Init+0x50>)
 8001892:	2200      	movs	r2, #0
 8001894:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001896:	4b09      	ldr	r3, [pc, #36]	@ (80018bc <MX_I2C2_Init+0x50>)
 8001898:	2200      	movs	r2, #0
 800189a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800189c:	4b07      	ldr	r3, [pc, #28]	@ (80018bc <MX_I2C2_Init+0x50>)
 800189e:	2200      	movs	r2, #0
 80018a0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018a2:	4b06      	ldr	r3, [pc, #24]	@ (80018bc <MX_I2C2_Init+0x50>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80018a8:	4804      	ldr	r0, [pc, #16]	@ (80018bc <MX_I2C2_Init+0x50>)
 80018aa:	f001 f9a9 	bl	8002c00 <HAL_I2C_Init>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80018b4:	f000 f8fa 	bl	8001aac <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80018b8:	bf00      	nop
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	20000528 	.word	0x20000528
 80018c0:	40005800 	.word	0x40005800
 80018c4:	000186a0 	.word	0x000186a0

080018c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018cc:	4b11      	ldr	r3, [pc, #68]	@ (8001914 <MX_USART1_UART_Init+0x4c>)
 80018ce:	4a12      	ldr	r2, [pc, #72]	@ (8001918 <MX_USART1_UART_Init+0x50>)
 80018d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80018d2:	4b10      	ldr	r3, [pc, #64]	@ (8001914 <MX_USART1_UART_Init+0x4c>)
 80018d4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80018d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018da:	4b0e      	ldr	r3, [pc, #56]	@ (8001914 <MX_USART1_UART_Init+0x4c>)
 80018dc:	2200      	movs	r2, #0
 80018de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001914 <MX_USART1_UART_Init+0x4c>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001914 <MX_USART1_UART_Init+0x4c>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018ec:	4b09      	ldr	r3, [pc, #36]	@ (8001914 <MX_USART1_UART_Init+0x4c>)
 80018ee:	220c      	movs	r2, #12
 80018f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018f2:	4b08      	ldr	r3, [pc, #32]	@ (8001914 <MX_USART1_UART_Init+0x4c>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018f8:	4b06      	ldr	r3, [pc, #24]	@ (8001914 <MX_USART1_UART_Init+0x4c>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018fe:	4805      	ldr	r0, [pc, #20]	@ (8001914 <MX_USART1_UART_Init+0x4c>)
 8001900:	f003 f918 	bl	8004b34 <HAL_UART_Init>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800190a:	f000 f8cf 	bl	8001aac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	2000057c 	.word	0x2000057c
 8001918:	40013800 	.word	0x40013800

0800191c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001920:	4b11      	ldr	r3, [pc, #68]	@ (8001968 <MX_USART2_UART_Init+0x4c>)
 8001922:	4a12      	ldr	r2, [pc, #72]	@ (800196c <MX_USART2_UART_Init+0x50>)
 8001924:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001926:	4b10      	ldr	r3, [pc, #64]	@ (8001968 <MX_USART2_UART_Init+0x4c>)
 8001928:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800192c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800192e:	4b0e      	ldr	r3, [pc, #56]	@ (8001968 <MX_USART2_UART_Init+0x4c>)
 8001930:	2200      	movs	r2, #0
 8001932:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001934:	4b0c      	ldr	r3, [pc, #48]	@ (8001968 <MX_USART2_UART_Init+0x4c>)
 8001936:	2200      	movs	r2, #0
 8001938:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800193a:	4b0b      	ldr	r3, [pc, #44]	@ (8001968 <MX_USART2_UART_Init+0x4c>)
 800193c:	2200      	movs	r2, #0
 800193e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001940:	4b09      	ldr	r3, [pc, #36]	@ (8001968 <MX_USART2_UART_Init+0x4c>)
 8001942:	220c      	movs	r2, #12
 8001944:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001946:	4b08      	ldr	r3, [pc, #32]	@ (8001968 <MX_USART2_UART_Init+0x4c>)
 8001948:	2200      	movs	r2, #0
 800194a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800194c:	4b06      	ldr	r3, [pc, #24]	@ (8001968 <MX_USART2_UART_Init+0x4c>)
 800194e:	2200      	movs	r2, #0
 8001950:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001952:	4805      	ldr	r0, [pc, #20]	@ (8001968 <MX_USART2_UART_Init+0x4c>)
 8001954:	f003 f8ee 	bl	8004b34 <HAL_UART_Init>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800195e:	f000 f8a5 	bl	8001aac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001962:	bf00      	nop
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	200005c4 	.word	0x200005c4
 800196c:	40004400 	.word	0x40004400

08001970 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001976:	4b0e      	ldr	r3, [pc, #56]	@ (80019b0 <MX_GPIO_Init+0x40>)
 8001978:	699b      	ldr	r3, [r3, #24]
 800197a:	4a0d      	ldr	r2, [pc, #52]	@ (80019b0 <MX_GPIO_Init+0x40>)
 800197c:	f043 0304 	orr.w	r3, r3, #4
 8001980:	6193      	str	r3, [r2, #24]
 8001982:	4b0b      	ldr	r3, [pc, #44]	@ (80019b0 <MX_GPIO_Init+0x40>)
 8001984:	699b      	ldr	r3, [r3, #24]
 8001986:	f003 0304 	and.w	r3, r3, #4
 800198a:	607b      	str	r3, [r7, #4]
 800198c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800198e:	4b08      	ldr	r3, [pc, #32]	@ (80019b0 <MX_GPIO_Init+0x40>)
 8001990:	699b      	ldr	r3, [r3, #24]
 8001992:	4a07      	ldr	r2, [pc, #28]	@ (80019b0 <MX_GPIO_Init+0x40>)
 8001994:	f043 0308 	orr.w	r3, r3, #8
 8001998:	6193      	str	r3, [r2, #24]
 800199a:	4b05      	ldr	r3, [pc, #20]	@ (80019b0 <MX_GPIO_Init+0x40>)
 800199c:	699b      	ldr	r3, [r3, #24]
 800199e:	f003 0308 	and.w	r3, r3, #8
 80019a2:	603b      	str	r3, [r7, #0]
 80019a4:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019a6:	bf00      	nop
 80019a8:	370c      	adds	r7, #12
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bc80      	pop	{r7}
 80019ae:	4770      	bx	lr
 80019b0:	40021000 	.word	0x40021000

080019b4 <getMpuDataTask>:

/**
 * @note This task will get data from mpu and store into struct
**/
void getMpuDataTask(void const * argument)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
	while(1)
	{
		getGyroData(&mpu);
 80019bc:	4803      	ldr	r0, [pc, #12]	@ (80019cc <getMpuDataTask+0x18>)
 80019be:	f7ff fbd7 	bl	8001170 <getGyroData>
		getAccelData(&mpu);
 80019c2:	4802      	ldr	r0, [pc, #8]	@ (80019cc <getMpuDataTask+0x18>)
 80019c4:	f7ff fc68 	bl	8001298 <getAccelData>
		getGyroData(&mpu);
 80019c8:	bf00      	nop
 80019ca:	e7f7      	b.n	80019bc <getMpuDataTask+0x8>
 80019cc:	20000680 	.word	0x20000680

080019d0 <complimentaryFilterTask>:

/**
 * @note This task will put mpu data through a filter to estimate the roll and pitch we want
**/
void complimentaryFilterTask(void const *argument)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
	while(1)
	{
		mpu6050ComplimentaryFilter(&mpu);
 80019d8:	4803      	ldr	r0, [pc, #12]	@ (80019e8 <complimentaryFilterTask+0x18>)
 80019da:	f7ff fcd1 	bl	8001380 <mpu6050ComplimentaryFilter>
		osDelay(20);
 80019de:	2014      	movs	r0, #20
 80019e0:	f003 fb36 	bl	8005050 <osDelay>
		mpu6050ComplimentaryFilter(&mpu);
 80019e4:	bf00      	nop
 80019e6:	e7f7      	b.n	80019d8 <complimentaryFilterTask+0x8>
 80019e8:	20000680 	.word	0x20000680

080019ec <transmitMPUDataTask>:
/**
 * @note This task will get data from adc, create transmit frame base on adc,mpu data
 *       and transmit the frame to bluetooth
**/
void transmitMPUDataTask(void const *argument)
{
 80019ec:	b5b0      	push	{r4, r5, r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af02      	add	r7, sp, #8
 80019f2:	6078      	str	r0, [r7, #4]

	while(1)
	{

		flex_sensor_adc=HAL_ADC_GetValue(&hadc1);
 80019f4:	4819      	ldr	r0, [pc, #100]	@ (8001a5c <transmitMPUDataTask+0x70>)
 80019f6:	f000 fcff 	bl	80023f8 <HAL_ADC_GetValue>
 80019fa:	4603      	mov	r3, r0
 80019fc:	4a18      	ldr	r2, [pc, #96]	@ (8001a60 <transmitMPUDataTask+0x74>)
 80019fe:	6013      	str	r3, [r2, #0]
		if(flex_sensor_adc>=3000)
 8001a00:	4b17      	ldr	r3, [pc, #92]	@ (8001a60 <transmitMPUDataTask+0x74>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d903      	bls.n	8001a14 <transmitMPUDataTask+0x28>
			mode='d';
 8001a0c:	4b15      	ldr	r3, [pc, #84]	@ (8001a64 <transmitMPUDataTask+0x78>)
 8001a0e:	2264      	movs	r2, #100	@ 0x64
 8001a10:	701a      	strb	r2, [r3, #0]
 8001a12:	e002      	b.n	8001a1a <transmitMPUDataTask+0x2e>
		else
			mode='m';
 8001a14:	4b13      	ldr	r3, [pc, #76]	@ (8001a64 <transmitMPUDataTask+0x78>)
 8001a16:	226d      	movs	r2, #109	@ 0x6d
 8001a18:	701a      	strb	r2, [r3, #0]
		sprintf((char*)bluetooth_tx_buffer,"%c/%d/%d\n",mode,(int)mpu.CF_roll_degree,(int)mpu.CF_pitch_degree);
 8001a1a:	4b12      	ldr	r3, [pc, #72]	@ (8001a64 <transmitMPUDataTask+0x78>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	461d      	mov	r5, r3
 8001a20:	4b11      	ldr	r3, [pc, #68]	@ (8001a68 <transmitMPUDataTask+0x7c>)
 8001a22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff fafd 	bl	8001024 <__aeabi_f2iz>
 8001a2a:	4604      	mov	r4, r0
 8001a2c:	4b0e      	ldr	r3, [pc, #56]	@ (8001a68 <transmitMPUDataTask+0x7c>)
 8001a2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff faf7 	bl	8001024 <__aeabi_f2iz>
 8001a36:	4603      	mov	r3, r0
 8001a38:	9300      	str	r3, [sp, #0]
 8001a3a:	4623      	mov	r3, r4
 8001a3c:	462a      	mov	r2, r5
 8001a3e:	490b      	ldr	r1, [pc, #44]	@ (8001a6c <transmitMPUDataTask+0x80>)
 8001a40:	480b      	ldr	r0, [pc, #44]	@ (8001a70 <transmitMPUDataTask+0x84>)
 8001a42:	f005 fbef 	bl	8007224 <siprintf>
		HAL_UART_Transmit(&huart2, bluetooth_tx_buffer,30, 500);
 8001a46:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001a4a:	221e      	movs	r2, #30
 8001a4c:	4908      	ldr	r1, [pc, #32]	@ (8001a70 <transmitMPUDataTask+0x84>)
 8001a4e:	4809      	ldr	r0, [pc, #36]	@ (8001a74 <transmitMPUDataTask+0x88>)
 8001a50:	f003 f8c0 	bl	8004bd4 <HAL_UART_Transmit>
		osDelay(20);
 8001a54:	2014      	movs	r0, #20
 8001a56:	f003 fafb 	bl	8005050 <osDelay>
		flex_sensor_adc=HAL_ADC_GetValue(&hadc1);
 8001a5a:	e7cb      	b.n	80019f4 <transmitMPUDataTask+0x8>
 8001a5c:	200004a4 	.word	0x200004a4
 8001a60:	200007a0 	.word	0x200007a0
 8001a64:	2000079c 	.word	0x2000079c
 8001a68:	20000680 	.word	0x20000680
 8001a6c:	0800bf20 	.word	0x0800bf20
 8001a70:	2000061c 	.word	0x2000061c
 8001a74:	200005c4 	.word	0x200005c4

08001a78 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001a80:	2001      	movs	r0, #1
 8001a82:	f003 fae5 	bl	8005050 <osDelay>
 8001a86:	e7fb      	b.n	8001a80 <StartDefaultTask+0x8>

08001a88 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a04      	ldr	r2, [pc, #16]	@ (8001aa8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d101      	bne.n	8001a9e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001a9a:	f000 fb0b 	bl	80020b4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a9e:	bf00      	nop
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40012c00 	.word	0x40012c00

08001aac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ab0:	b672      	cpsid	i
}
 8001ab2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ab4:	bf00      	nop
 8001ab6:	e7fd      	b.n	8001ab4 <Error_Handler+0x8>

08001ab8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001abe:	4b18      	ldr	r3, [pc, #96]	@ (8001b20 <HAL_MspInit+0x68>)
 8001ac0:	699b      	ldr	r3, [r3, #24]
 8001ac2:	4a17      	ldr	r2, [pc, #92]	@ (8001b20 <HAL_MspInit+0x68>)
 8001ac4:	f043 0301 	orr.w	r3, r3, #1
 8001ac8:	6193      	str	r3, [r2, #24]
 8001aca:	4b15      	ldr	r3, [pc, #84]	@ (8001b20 <HAL_MspInit+0x68>)
 8001acc:	699b      	ldr	r3, [r3, #24]
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	60bb      	str	r3, [r7, #8]
 8001ad4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ad6:	4b12      	ldr	r3, [pc, #72]	@ (8001b20 <HAL_MspInit+0x68>)
 8001ad8:	69db      	ldr	r3, [r3, #28]
 8001ada:	4a11      	ldr	r2, [pc, #68]	@ (8001b20 <HAL_MspInit+0x68>)
 8001adc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ae0:	61d3      	str	r3, [r2, #28]
 8001ae2:	4b0f      	ldr	r3, [pc, #60]	@ (8001b20 <HAL_MspInit+0x68>)
 8001ae4:	69db      	ldr	r3, [r3, #28]
 8001ae6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aea:	607b      	str	r3, [r7, #4]
 8001aec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001aee:	2200      	movs	r2, #0
 8001af0:	210f      	movs	r1, #15
 8001af2:	f06f 0001 	mvn.w	r0, #1
 8001af6:	f000 fed4 	bl	80028a2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001afa:	4b0a      	ldr	r3, [pc, #40]	@ (8001b24 <HAL_MspInit+0x6c>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	4a04      	ldr	r2, [pc, #16]	@ (8001b24 <HAL_MspInit+0x6c>)
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b16:	bf00      	nop
 8001b18:	3710      	adds	r7, #16
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40021000 	.word	0x40021000
 8001b24:	40010000 	.word	0x40010000

08001b28 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b088      	sub	sp, #32
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b30:	f107 0310 	add.w	r3, r7, #16
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	605a      	str	r2, [r3, #4]
 8001b3a:	609a      	str	r2, [r3, #8]
 8001b3c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a14      	ldr	r2, [pc, #80]	@ (8001b94 <HAL_ADC_MspInit+0x6c>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d121      	bne.n	8001b8c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b48:	4b13      	ldr	r3, [pc, #76]	@ (8001b98 <HAL_ADC_MspInit+0x70>)
 8001b4a:	699b      	ldr	r3, [r3, #24]
 8001b4c:	4a12      	ldr	r2, [pc, #72]	@ (8001b98 <HAL_ADC_MspInit+0x70>)
 8001b4e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b52:	6193      	str	r3, [r2, #24]
 8001b54:	4b10      	ldr	r3, [pc, #64]	@ (8001b98 <HAL_ADC_MspInit+0x70>)
 8001b56:	699b      	ldr	r3, [r3, #24]
 8001b58:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b5c:	60fb      	str	r3, [r7, #12]
 8001b5e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b60:	4b0d      	ldr	r3, [pc, #52]	@ (8001b98 <HAL_ADC_MspInit+0x70>)
 8001b62:	699b      	ldr	r3, [r3, #24]
 8001b64:	4a0c      	ldr	r2, [pc, #48]	@ (8001b98 <HAL_ADC_MspInit+0x70>)
 8001b66:	f043 0308 	orr.w	r3, r3, #8
 8001b6a:	6193      	str	r3, [r2, #24]
 8001b6c:	4b0a      	ldr	r3, [pc, #40]	@ (8001b98 <HAL_ADC_MspInit+0x70>)
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	f003 0308 	and.w	r3, r3, #8
 8001b74:	60bb      	str	r3, [r7, #8]
 8001b76:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001b78:	2302      	movs	r3, #2
 8001b7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b80:	f107 0310 	add.w	r3, r7, #16
 8001b84:	4619      	mov	r1, r3
 8001b86:	4805      	ldr	r0, [pc, #20]	@ (8001b9c <HAL_ADC_MspInit+0x74>)
 8001b88:	f000 feb6 	bl	80028f8 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001b8c:	bf00      	nop
 8001b8e:	3720      	adds	r7, #32
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	40012400 	.word	0x40012400
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	40010c00 	.word	0x40010c00

08001ba0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b08a      	sub	sp, #40	@ 0x28
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba8:	f107 0318 	add.w	r3, r7, #24
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	605a      	str	r2, [r3, #4]
 8001bb2:	609a      	str	r2, [r3, #8]
 8001bb4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a2b      	ldr	r2, [pc, #172]	@ (8001c68 <HAL_I2C_MspInit+0xc8>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d124      	bne.n	8001c0a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bc0:	4b2a      	ldr	r3, [pc, #168]	@ (8001c6c <HAL_I2C_MspInit+0xcc>)
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	4a29      	ldr	r2, [pc, #164]	@ (8001c6c <HAL_I2C_MspInit+0xcc>)
 8001bc6:	f043 0308 	orr.w	r3, r3, #8
 8001bca:	6193      	str	r3, [r2, #24]
 8001bcc:	4b27      	ldr	r3, [pc, #156]	@ (8001c6c <HAL_I2C_MspInit+0xcc>)
 8001bce:	699b      	ldr	r3, [r3, #24]
 8001bd0:	f003 0308 	and.w	r3, r3, #8
 8001bd4:	617b      	str	r3, [r7, #20]
 8001bd6:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MPU_SCL_Pin|MPU_SDA_Pin;
 8001bd8:	23c0      	movs	r3, #192	@ 0xc0
 8001bda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bdc:	2312      	movs	r3, #18
 8001bde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001be0:	2303      	movs	r3, #3
 8001be2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be4:	f107 0318 	add.w	r3, r7, #24
 8001be8:	4619      	mov	r1, r3
 8001bea:	4821      	ldr	r0, [pc, #132]	@ (8001c70 <HAL_I2C_MspInit+0xd0>)
 8001bec:	f000 fe84 	bl	80028f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bf0:	4b1e      	ldr	r3, [pc, #120]	@ (8001c6c <HAL_I2C_MspInit+0xcc>)
 8001bf2:	69db      	ldr	r3, [r3, #28]
 8001bf4:	4a1d      	ldr	r2, [pc, #116]	@ (8001c6c <HAL_I2C_MspInit+0xcc>)
 8001bf6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001bfa:	61d3      	str	r3, [r2, #28]
 8001bfc:	4b1b      	ldr	r3, [pc, #108]	@ (8001c6c <HAL_I2C_MspInit+0xcc>)
 8001bfe:	69db      	ldr	r3, [r3, #28]
 8001c00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c04:	613b      	str	r3, [r7, #16]
 8001c06:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001c08:	e029      	b.n	8001c5e <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a19      	ldr	r2, [pc, #100]	@ (8001c74 <HAL_I2C_MspInit+0xd4>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d124      	bne.n	8001c5e <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c14:	4b15      	ldr	r3, [pc, #84]	@ (8001c6c <HAL_I2C_MspInit+0xcc>)
 8001c16:	699b      	ldr	r3, [r3, #24]
 8001c18:	4a14      	ldr	r2, [pc, #80]	@ (8001c6c <HAL_I2C_MspInit+0xcc>)
 8001c1a:	f043 0308 	orr.w	r3, r3, #8
 8001c1e:	6193      	str	r3, [r2, #24]
 8001c20:	4b12      	ldr	r3, [pc, #72]	@ (8001c6c <HAL_I2C_MspInit+0xcc>)
 8001c22:	699b      	ldr	r3, [r3, #24]
 8001c24:	f003 0308 	and.w	r3, r3, #8
 8001c28:	60fb      	str	r3, [r7, #12]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001c2c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001c30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c32:	2312      	movs	r3, #18
 8001c34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c36:	2303      	movs	r3, #3
 8001c38:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c3a:	f107 0318 	add.w	r3, r7, #24
 8001c3e:	4619      	mov	r1, r3
 8001c40:	480b      	ldr	r0, [pc, #44]	@ (8001c70 <HAL_I2C_MspInit+0xd0>)
 8001c42:	f000 fe59 	bl	80028f8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c46:	4b09      	ldr	r3, [pc, #36]	@ (8001c6c <HAL_I2C_MspInit+0xcc>)
 8001c48:	69db      	ldr	r3, [r3, #28]
 8001c4a:	4a08      	ldr	r2, [pc, #32]	@ (8001c6c <HAL_I2C_MspInit+0xcc>)
 8001c4c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001c50:	61d3      	str	r3, [r2, #28]
 8001c52:	4b06      	ldr	r3, [pc, #24]	@ (8001c6c <HAL_I2C_MspInit+0xcc>)
 8001c54:	69db      	ldr	r3, [r3, #28]
 8001c56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c5a:	60bb      	str	r3, [r7, #8]
 8001c5c:	68bb      	ldr	r3, [r7, #8]
}
 8001c5e:	bf00      	nop
 8001c60:	3728      	adds	r7, #40	@ 0x28
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	40005400 	.word	0x40005400
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	40010c00 	.word	0x40010c00
 8001c74:	40005800 	.word	0x40005800

08001c78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b08a      	sub	sp, #40	@ 0x28
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c80:	f107 0318 	add.w	r3, r7, #24
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	605a      	str	r2, [r3, #4]
 8001c8a:	609a      	str	r2, [r3, #8]
 8001c8c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a37      	ldr	r2, [pc, #220]	@ (8001d70 <HAL_UART_MspInit+0xf8>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d132      	bne.n	8001cfe <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c98:	4b36      	ldr	r3, [pc, #216]	@ (8001d74 <HAL_UART_MspInit+0xfc>)
 8001c9a:	699b      	ldr	r3, [r3, #24]
 8001c9c:	4a35      	ldr	r2, [pc, #212]	@ (8001d74 <HAL_UART_MspInit+0xfc>)
 8001c9e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ca2:	6193      	str	r3, [r2, #24]
 8001ca4:	4b33      	ldr	r3, [pc, #204]	@ (8001d74 <HAL_UART_MspInit+0xfc>)
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cac:	617b      	str	r3, [r7, #20]
 8001cae:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb0:	4b30      	ldr	r3, [pc, #192]	@ (8001d74 <HAL_UART_MspInit+0xfc>)
 8001cb2:	699b      	ldr	r3, [r3, #24]
 8001cb4:	4a2f      	ldr	r2, [pc, #188]	@ (8001d74 <HAL_UART_MspInit+0xfc>)
 8001cb6:	f043 0304 	orr.w	r3, r3, #4
 8001cba:	6193      	str	r3, [r2, #24]
 8001cbc:	4b2d      	ldr	r3, [pc, #180]	@ (8001d74 <HAL_UART_MspInit+0xfc>)
 8001cbe:	699b      	ldr	r3, [r3, #24]
 8001cc0:	f003 0304 	and.w	r3, r3, #4
 8001cc4:	613b      	str	r3, [r7, #16]
 8001cc6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = DF_Player_TX_Pin;
 8001cc8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ccc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cce:	2302      	movs	r3, #2
 8001cd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DF_Player_TX_GPIO_Port, &GPIO_InitStruct);
 8001cd6:	f107 0318 	add.w	r3, r7, #24
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4826      	ldr	r0, [pc, #152]	@ (8001d78 <HAL_UART_MspInit+0x100>)
 8001cde:	f000 fe0b 	bl	80028f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DF_Player_RX_Pin;
 8001ce2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ce6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cec:	2300      	movs	r3, #0
 8001cee:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(DF_Player_RX_GPIO_Port, &GPIO_InitStruct);
 8001cf0:	f107 0318 	add.w	r3, r7, #24
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	4820      	ldr	r0, [pc, #128]	@ (8001d78 <HAL_UART_MspInit+0x100>)
 8001cf8:	f000 fdfe 	bl	80028f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001cfc:	e034      	b.n	8001d68 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a1e      	ldr	r2, [pc, #120]	@ (8001d7c <HAL_UART_MspInit+0x104>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d12f      	bne.n	8001d68 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d08:	4b1a      	ldr	r3, [pc, #104]	@ (8001d74 <HAL_UART_MspInit+0xfc>)
 8001d0a:	69db      	ldr	r3, [r3, #28]
 8001d0c:	4a19      	ldr	r2, [pc, #100]	@ (8001d74 <HAL_UART_MspInit+0xfc>)
 8001d0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d12:	61d3      	str	r3, [r2, #28]
 8001d14:	4b17      	ldr	r3, [pc, #92]	@ (8001d74 <HAL_UART_MspInit+0xfc>)
 8001d16:	69db      	ldr	r3, [r3, #28]
 8001d18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d1c:	60fb      	str	r3, [r7, #12]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d20:	4b14      	ldr	r3, [pc, #80]	@ (8001d74 <HAL_UART_MspInit+0xfc>)
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	4a13      	ldr	r2, [pc, #76]	@ (8001d74 <HAL_UART_MspInit+0xfc>)
 8001d26:	f043 0304 	orr.w	r3, r3, #4
 8001d2a:	6193      	str	r3, [r2, #24]
 8001d2c:	4b11      	ldr	r3, [pc, #68]	@ (8001d74 <HAL_UART_MspInit+0xfc>)
 8001d2e:	699b      	ldr	r3, [r3, #24]
 8001d30:	f003 0304 	and.w	r3, r3, #4
 8001d34:	60bb      	str	r3, [r7, #8]
 8001d36:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Bluetooth_TX_Pin;
 8001d38:	2304      	movs	r3, #4
 8001d3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d40:	2303      	movs	r3, #3
 8001d42:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(Bluetooth_TX_GPIO_Port, &GPIO_InitStruct);
 8001d44:	f107 0318 	add.w	r3, r7, #24
 8001d48:	4619      	mov	r1, r3
 8001d4a:	480b      	ldr	r0, [pc, #44]	@ (8001d78 <HAL_UART_MspInit+0x100>)
 8001d4c:	f000 fdd4 	bl	80028f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Bluetooth_RX_Pin;
 8001d50:	2308      	movs	r3, #8
 8001d52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d54:	2300      	movs	r3, #0
 8001d56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(Bluetooth_RX_GPIO_Port, &GPIO_InitStruct);
 8001d5c:	f107 0318 	add.w	r3, r7, #24
 8001d60:	4619      	mov	r1, r3
 8001d62:	4805      	ldr	r0, [pc, #20]	@ (8001d78 <HAL_UART_MspInit+0x100>)
 8001d64:	f000 fdc8 	bl	80028f8 <HAL_GPIO_Init>
}
 8001d68:	bf00      	nop
 8001d6a:	3728      	adds	r7, #40	@ 0x28
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	40013800 	.word	0x40013800
 8001d74:	40021000 	.word	0x40021000
 8001d78:	40010800 	.word	0x40010800
 8001d7c:	40004400 	.word	0x40004400

08001d80 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b08c      	sub	sp, #48	@ 0x30
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001d90:	2300      	movs	r3, #0
 8001d92:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001d96:	4b2e      	ldr	r3, [pc, #184]	@ (8001e50 <HAL_InitTick+0xd0>)
 8001d98:	699b      	ldr	r3, [r3, #24]
 8001d9a:	4a2d      	ldr	r2, [pc, #180]	@ (8001e50 <HAL_InitTick+0xd0>)
 8001d9c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001da0:	6193      	str	r3, [r2, #24]
 8001da2:	4b2b      	ldr	r3, [pc, #172]	@ (8001e50 <HAL_InitTick+0xd0>)
 8001da4:	699b      	ldr	r3, [r3, #24]
 8001da6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001daa:	60bb      	str	r3, [r7, #8]
 8001dac:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001dae:	f107 020c 	add.w	r2, r7, #12
 8001db2:	f107 0310 	add.w	r3, r7, #16
 8001db6:	4611      	mov	r1, r2
 8001db8:	4618      	mov	r0, r3
 8001dba:	f002 fb79 	bl	80044b0 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001dbe:	f002 fb63 	bl	8004488 <HAL_RCC_GetPCLK2Freq>
 8001dc2:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001dc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dc6:	4a23      	ldr	r2, [pc, #140]	@ (8001e54 <HAL_InitTick+0xd4>)
 8001dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dcc:	0c9b      	lsrs	r3, r3, #18
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001dd2:	4b21      	ldr	r3, [pc, #132]	@ (8001e58 <HAL_InitTick+0xd8>)
 8001dd4:	4a21      	ldr	r2, [pc, #132]	@ (8001e5c <HAL_InitTick+0xdc>)
 8001dd6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001dd8:	4b1f      	ldr	r3, [pc, #124]	@ (8001e58 <HAL_InitTick+0xd8>)
 8001dda:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001dde:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001de0:	4a1d      	ldr	r2, [pc, #116]	@ (8001e58 <HAL_InitTick+0xd8>)
 8001de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de4:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001de6:	4b1c      	ldr	r3, [pc, #112]	@ (8001e58 <HAL_InitTick+0xd8>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dec:	4b1a      	ldr	r3, [pc, #104]	@ (8001e58 <HAL_InitTick+0xd8>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001df2:	4b19      	ldr	r3, [pc, #100]	@ (8001e58 <HAL_InitTick+0xd8>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001df8:	4817      	ldr	r0, [pc, #92]	@ (8001e58 <HAL_InitTick+0xd8>)
 8001dfa:	f002 fc5d 	bl	80046b8 <HAL_TIM_Base_Init>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001e04:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d11b      	bne.n	8001e44 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001e0c:	4812      	ldr	r0, [pc, #72]	@ (8001e58 <HAL_InitTick+0xd8>)
 8001e0e:	f002 fcab 	bl	8004768 <HAL_TIM_Base_Start_IT>
 8001e12:	4603      	mov	r3, r0
 8001e14:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001e18:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d111      	bne.n	8001e44 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001e20:	2019      	movs	r0, #25
 8001e22:	f000 fd5a 	bl	80028da <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2b0f      	cmp	r3, #15
 8001e2a:	d808      	bhi.n	8001e3e <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	6879      	ldr	r1, [r7, #4]
 8001e30:	2019      	movs	r0, #25
 8001e32:	f000 fd36 	bl	80028a2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e36:	4a0a      	ldr	r2, [pc, #40]	@ (8001e60 <HAL_InitTick+0xe0>)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6013      	str	r3, [r2, #0]
 8001e3c:	e002      	b.n	8001e44 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001e44:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3730      	adds	r7, #48	@ 0x30
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	40021000 	.word	0x40021000
 8001e54:	431bde83 	.word	0x431bde83
 8001e58:	200007a4 	.word	0x200007a4
 8001e5c:	40012c00 	.word	0x40012c00
 8001e60:	20000004 	.word	0x20000004

08001e64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e68:	bf00      	nop
 8001e6a:	e7fd      	b.n	8001e68 <NMI_Handler+0x4>

08001e6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e70:	bf00      	nop
 8001e72:	e7fd      	b.n	8001e70 <HardFault_Handler+0x4>

08001e74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e78:	bf00      	nop
 8001e7a:	e7fd      	b.n	8001e78 <MemManage_Handler+0x4>

08001e7c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e80:	bf00      	nop
 8001e82:	e7fd      	b.n	8001e80 <BusFault_Handler+0x4>

08001e84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e88:	bf00      	nop
 8001e8a:	e7fd      	b.n	8001e88 <UsageFault_Handler+0x4>

08001e8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e90:	bf00      	nop
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bc80      	pop	{r7}
 8001e96:	4770      	bx	lr

08001e98 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e9c:	4802      	ldr	r0, [pc, #8]	@ (8001ea8 <TIM1_UP_IRQHandler+0x10>)
 8001e9e:	f002 fcb5 	bl	800480c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001ea2:	bf00      	nop
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	200007a4 	.word	0x200007a4

08001eac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  return 1;
 8001eb0:	2301      	movs	r3, #1
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bc80      	pop	{r7}
 8001eb8:	4770      	bx	lr

08001eba <_kill>:

int _kill(int pid, int sig)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b082      	sub	sp, #8
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
 8001ec2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ec4:	f005 faba 	bl	800743c <__errno>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2216      	movs	r2, #22
 8001ecc:	601a      	str	r2, [r3, #0]
  return -1;
 8001ece:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <_exit>:

void _exit (int status)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b082      	sub	sp, #8
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ee2:	f04f 31ff 	mov.w	r1, #4294967295
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f7ff ffe7 	bl	8001eba <_kill>
  while (1) {}    /* Make sure we hang here */
 8001eec:	bf00      	nop
 8001eee:	e7fd      	b.n	8001eec <_exit+0x12>

08001ef0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	60b9      	str	r1, [r7, #8]
 8001efa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001efc:	2300      	movs	r3, #0
 8001efe:	617b      	str	r3, [r7, #20]
 8001f00:	e00a      	b.n	8001f18 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f02:	f3af 8000 	nop.w
 8001f06:	4601      	mov	r1, r0
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	1c5a      	adds	r2, r3, #1
 8001f0c:	60ba      	str	r2, [r7, #8]
 8001f0e:	b2ca      	uxtb	r2, r1
 8001f10:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	3301      	adds	r3, #1
 8001f16:	617b      	str	r3, [r7, #20]
 8001f18:	697a      	ldr	r2, [r7, #20]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	dbf0      	blt.n	8001f02 <_read+0x12>
  }

  return len;
 8001f20:	687b      	ldr	r3, [r7, #4]
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3718      	adds	r7, #24
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b086      	sub	sp, #24
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	60f8      	str	r0, [r7, #12]
 8001f32:	60b9      	str	r1, [r7, #8]
 8001f34:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f36:	2300      	movs	r3, #0
 8001f38:	617b      	str	r3, [r7, #20]
 8001f3a:	e009      	b.n	8001f50 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	1c5a      	adds	r2, r3, #1
 8001f40:	60ba      	str	r2, [r7, #8]
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	617b      	str	r3, [r7, #20]
 8001f50:	697a      	ldr	r2, [r7, #20]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	dbf1      	blt.n	8001f3c <_write+0x12>
  }
  return len;
 8001f58:	687b      	ldr	r3, [r7, #4]
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3718      	adds	r7, #24
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <_close>:

int _close(int file)
{
 8001f62:	b480      	push	{r7}
 8001f64:	b083      	sub	sp, #12
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bc80      	pop	{r7}
 8001f76:	4770      	bx	lr

08001f78 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f88:	605a      	str	r2, [r3, #4]
  return 0;
 8001f8a:	2300      	movs	r3, #0
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bc80      	pop	{r7}
 8001f94:	4770      	bx	lr

08001f96 <_isatty>:

int _isatty(int file)
{
 8001f96:	b480      	push	{r7}
 8001f98:	b083      	sub	sp, #12
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f9e:	2301      	movs	r3, #1
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bc80      	pop	{r7}
 8001fa8:	4770      	bx	lr

08001faa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001faa:	b480      	push	{r7}
 8001fac:	b085      	sub	sp, #20
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	60f8      	str	r0, [r7, #12]
 8001fb2:	60b9      	str	r1, [r7, #8]
 8001fb4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001fb6:	2300      	movs	r3, #0
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3714      	adds	r7, #20
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bc80      	pop	{r7}
 8001fc0:	4770      	bx	lr
	...

08001fc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b086      	sub	sp, #24
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fcc:	4a14      	ldr	r2, [pc, #80]	@ (8002020 <_sbrk+0x5c>)
 8001fce:	4b15      	ldr	r3, [pc, #84]	@ (8002024 <_sbrk+0x60>)
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fd8:	4b13      	ldr	r3, [pc, #76]	@ (8002028 <_sbrk+0x64>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d102      	bne.n	8001fe6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fe0:	4b11      	ldr	r3, [pc, #68]	@ (8002028 <_sbrk+0x64>)
 8001fe2:	4a12      	ldr	r2, [pc, #72]	@ (800202c <_sbrk+0x68>)
 8001fe4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fe6:	4b10      	ldr	r3, [pc, #64]	@ (8002028 <_sbrk+0x64>)
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4413      	add	r3, r2
 8001fee:	693a      	ldr	r2, [r7, #16]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d207      	bcs.n	8002004 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ff4:	f005 fa22 	bl	800743c <__errno>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	220c      	movs	r2, #12
 8001ffc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8002002:	e009      	b.n	8002018 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002004:	4b08      	ldr	r3, [pc, #32]	@ (8002028 <_sbrk+0x64>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800200a:	4b07      	ldr	r3, [pc, #28]	@ (8002028 <_sbrk+0x64>)
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4413      	add	r3, r2
 8002012:	4a05      	ldr	r2, [pc, #20]	@ (8002028 <_sbrk+0x64>)
 8002014:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002016:	68fb      	ldr	r3, [r7, #12]
}
 8002018:	4618      	mov	r0, r3
 800201a:	3718      	adds	r7, #24
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	20005000 	.word	0x20005000
 8002024:	00000400 	.word	0x00000400
 8002028:	200007ec 	.word	0x200007ec
 800202c:	20001698 	.word	0x20001698

08002030 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002034:	bf00      	nop
 8002036:	46bd      	mov	sp, r7
 8002038:	bc80      	pop	{r7}
 800203a:	4770      	bx	lr

0800203c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800203c:	f7ff fff8 	bl	8002030 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002040:	480b      	ldr	r0, [pc, #44]	@ (8002070 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002042:	490c      	ldr	r1, [pc, #48]	@ (8002074 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002044:	4a0c      	ldr	r2, [pc, #48]	@ (8002078 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002046:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002048:	e002      	b.n	8002050 <LoopCopyDataInit>

0800204a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800204a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800204c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800204e:	3304      	adds	r3, #4

08002050 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002050:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002052:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002054:	d3f9      	bcc.n	800204a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002056:	4a09      	ldr	r2, [pc, #36]	@ (800207c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002058:	4c09      	ldr	r4, [pc, #36]	@ (8002080 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800205a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800205c:	e001      	b.n	8002062 <LoopFillZerobss>

0800205e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800205e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002060:	3204      	adds	r2, #4

08002062 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002062:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002064:	d3fb      	bcc.n	800205e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002066:	f005 f9ef 	bl	8007448 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800206a:	f7ff fac3 	bl	80015f4 <main>
  bx lr
 800206e:	4770      	bx	lr
  ldr r0, =_sdata
 8002070:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002074:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002078:	0800c440 	.word	0x0800c440
  ldr r2, =_sbss
 800207c:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002080:	20001694 	.word	0x20001694

08002084 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002084:	e7fe      	b.n	8002084 <ADC1_2_IRQHandler>
	...

08002088 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800208c:	4b08      	ldr	r3, [pc, #32]	@ (80020b0 <HAL_Init+0x28>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a07      	ldr	r2, [pc, #28]	@ (80020b0 <HAL_Init+0x28>)
 8002092:	f043 0310 	orr.w	r3, r3, #16
 8002096:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002098:	2003      	movs	r0, #3
 800209a:	f000 fbf7 	bl	800288c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800209e:	200f      	movs	r0, #15
 80020a0:	f7ff fe6e 	bl	8001d80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020a4:	f7ff fd08 	bl	8001ab8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	40022000 	.word	0x40022000

080020b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020b8:	4b05      	ldr	r3, [pc, #20]	@ (80020d0 <HAL_IncTick+0x1c>)
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	461a      	mov	r2, r3
 80020be:	4b05      	ldr	r3, [pc, #20]	@ (80020d4 <HAL_IncTick+0x20>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4413      	add	r3, r2
 80020c4:	4a03      	ldr	r2, [pc, #12]	@ (80020d4 <HAL_IncTick+0x20>)
 80020c6:	6013      	str	r3, [r2, #0]
}
 80020c8:	bf00      	nop
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bc80      	pop	{r7}
 80020ce:	4770      	bx	lr
 80020d0:	20000008 	.word	0x20000008
 80020d4:	200007f0 	.word	0x200007f0

080020d8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  return uwTick;
 80020dc:	4b02      	ldr	r3, [pc, #8]	@ (80020e8 <HAL_GetTick+0x10>)
 80020de:	681b      	ldr	r3, [r3, #0]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bc80      	pop	{r7}
 80020e6:	4770      	bx	lr
 80020e8:	200007f0 	.word	0x200007f0

080020ec <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b086      	sub	sp, #24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020f4:	2300      	movs	r3, #0
 80020f6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80020f8:	2300      	movs	r3, #0
 80020fa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80020fc:	2300      	movs	r3, #0
 80020fe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002100:	2300      	movs	r3, #0
 8002102:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d101      	bne.n	800210e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e0be      	b.n	800228c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002118:	2b00      	cmp	r3, #0
 800211a:	d109      	bne.n	8002130 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2200      	movs	r2, #0
 8002120:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f7ff fcfc 	bl	8001b28 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f000 fabf 	bl	80026b4 <ADC_ConversionStop_Disable>
 8002136:	4603      	mov	r3, r0
 8002138:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800213e:	f003 0310 	and.w	r3, r3, #16
 8002142:	2b00      	cmp	r3, #0
 8002144:	f040 8099 	bne.w	800227a <HAL_ADC_Init+0x18e>
 8002148:	7dfb      	ldrb	r3, [r7, #23]
 800214a:	2b00      	cmp	r3, #0
 800214c:	f040 8095 	bne.w	800227a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002154:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002158:	f023 0302 	bic.w	r3, r3, #2
 800215c:	f043 0202 	orr.w	r2, r3, #2
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800216c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	7b1b      	ldrb	r3, [r3, #12]
 8002172:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002174:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002176:	68ba      	ldr	r2, [r7, #8]
 8002178:	4313      	orrs	r3, r2
 800217a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002184:	d003      	beq.n	800218e <HAL_ADC_Init+0xa2>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	2b01      	cmp	r3, #1
 800218c:	d102      	bne.n	8002194 <HAL_ADC_Init+0xa8>
 800218e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002192:	e000      	b.n	8002196 <HAL_ADC_Init+0xaa>
 8002194:	2300      	movs	r3, #0
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	4313      	orrs	r3, r2
 800219a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	7d1b      	ldrb	r3, [r3, #20]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d119      	bne.n	80021d8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	7b1b      	ldrb	r3, [r3, #12]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d109      	bne.n	80021c0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	699b      	ldr	r3, [r3, #24]
 80021b0:	3b01      	subs	r3, #1
 80021b2:	035a      	lsls	r2, r3, #13
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80021bc:	613b      	str	r3, [r7, #16]
 80021be:	e00b      	b.n	80021d8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021c4:	f043 0220 	orr.w	r2, r3, #32
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021d0:	f043 0201 	orr.w	r2, r3, #1
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	430a      	orrs	r2, r1
 80021ea:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	689a      	ldr	r2, [r3, #8]
 80021f2:	4b28      	ldr	r3, [pc, #160]	@ (8002294 <HAL_ADC_Init+0x1a8>)
 80021f4:	4013      	ands	r3, r2
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	6812      	ldr	r2, [r2, #0]
 80021fa:	68b9      	ldr	r1, [r7, #8]
 80021fc:	430b      	orrs	r3, r1
 80021fe:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002208:	d003      	beq.n	8002212 <HAL_ADC_Init+0x126>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d104      	bne.n	800221c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	3b01      	subs	r3, #1
 8002218:	051b      	lsls	r3, r3, #20
 800221a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002222:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	68fa      	ldr	r2, [r7, #12]
 800222c:	430a      	orrs	r2, r1
 800222e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	689a      	ldr	r2, [r3, #8]
 8002236:	4b18      	ldr	r3, [pc, #96]	@ (8002298 <HAL_ADC_Init+0x1ac>)
 8002238:	4013      	ands	r3, r2
 800223a:	68ba      	ldr	r2, [r7, #8]
 800223c:	429a      	cmp	r2, r3
 800223e:	d10b      	bne.n	8002258 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800224a:	f023 0303 	bic.w	r3, r3, #3
 800224e:	f043 0201 	orr.w	r2, r3, #1
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002256:	e018      	b.n	800228a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800225c:	f023 0312 	bic.w	r3, r3, #18
 8002260:	f043 0210 	orr.w	r2, r3, #16
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800226c:	f043 0201 	orr.w	r2, r3, #1
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002278:	e007      	b.n	800228a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800227e:	f043 0210 	orr.w	r2, r3, #16
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800228a:	7dfb      	ldrb	r3, [r7, #23]
}
 800228c:	4618      	mov	r0, r3
 800228e:	3718      	adds	r7, #24
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	ffe1f7fd 	.word	0xffe1f7fd
 8002298:	ff1f0efe 	.word	0xff1f0efe

0800229c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022a4:	2300      	movs	r3, #0
 80022a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d101      	bne.n	80022b6 <HAL_ADC_Start+0x1a>
 80022b2:	2302      	movs	r3, #2
 80022b4:	e098      	b.n	80023e8 <HAL_ADC_Start+0x14c>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2201      	movs	r2, #1
 80022ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f000 f99e 	bl	8002600 <ADC_Enable>
 80022c4:	4603      	mov	r3, r0
 80022c6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80022c8:	7bfb      	ldrb	r3, [r7, #15]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	f040 8087 	bne.w	80023de <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80022d8:	f023 0301 	bic.w	r3, r3, #1
 80022dc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a41      	ldr	r2, [pc, #260]	@ (80023f0 <HAL_ADC_Start+0x154>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d105      	bne.n	80022fa <HAL_ADC_Start+0x5e>
 80022ee:	4b41      	ldr	r3, [pc, #260]	@ (80023f4 <HAL_ADC_Start+0x158>)
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d115      	bne.n	8002326 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022fe:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002310:	2b00      	cmp	r3, #0
 8002312:	d026      	beq.n	8002362 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002318:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800231c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002324:	e01d      	b.n	8002362 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800232a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a2f      	ldr	r2, [pc, #188]	@ (80023f4 <HAL_ADC_Start+0x158>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d004      	beq.n	8002346 <HAL_ADC_Start+0xaa>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a2b      	ldr	r2, [pc, #172]	@ (80023f0 <HAL_ADC_Start+0x154>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d10d      	bne.n	8002362 <HAL_ADC_Start+0xc6>
 8002346:	4b2b      	ldr	r3, [pc, #172]	@ (80023f4 <HAL_ADC_Start+0x158>)
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800234e:	2b00      	cmp	r3, #0
 8002350:	d007      	beq.n	8002362 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002356:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800235a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002366:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d006      	beq.n	800237c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002372:	f023 0206 	bic.w	r2, r3, #6
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	62da      	str	r2, [r3, #44]	@ 0x2c
 800237a:	e002      	b.n	8002382 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f06f 0202 	mvn.w	r2, #2
 8002392:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800239e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80023a2:	d113      	bne.n	80023cc <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80023a8:	4a11      	ldr	r2, [pc, #68]	@ (80023f0 <HAL_ADC_Start+0x154>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d105      	bne.n	80023ba <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80023ae:	4b11      	ldr	r3, [pc, #68]	@ (80023f4 <HAL_ADC_Start+0x158>)
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d108      	bne.n	80023cc <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	689a      	ldr	r2, [r3, #8]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80023c8:	609a      	str	r2, [r3, #8]
 80023ca:	e00c      	b.n	80023e6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	689a      	ldr	r2, [r3, #8]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80023da:	609a      	str	r2, [r3, #8]
 80023dc:	e003      	b.n	80023e6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80023e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3710      	adds	r7, #16
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	40012800 	.word	0x40012800
 80023f4:	40012400 	.word	0x40012400

080023f8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002406:	4618      	mov	r0, r3
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	bc80      	pop	{r7}
 800240e:	4770      	bx	lr

08002410 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002410:	b480      	push	{r7}
 8002412:	b085      	sub	sp, #20
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800241a:	2300      	movs	r3, #0
 800241c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800241e:	2300      	movs	r3, #0
 8002420:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002428:	2b01      	cmp	r3, #1
 800242a:	d101      	bne.n	8002430 <HAL_ADC_ConfigChannel+0x20>
 800242c:	2302      	movs	r3, #2
 800242e:	e0dc      	b.n	80025ea <HAL_ADC_ConfigChannel+0x1da>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	2b06      	cmp	r3, #6
 800243e:	d81c      	bhi.n	800247a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	685a      	ldr	r2, [r3, #4]
 800244a:	4613      	mov	r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	4413      	add	r3, r2
 8002450:	3b05      	subs	r3, #5
 8002452:	221f      	movs	r2, #31
 8002454:	fa02 f303 	lsl.w	r3, r2, r3
 8002458:	43db      	mvns	r3, r3
 800245a:	4019      	ands	r1, r3
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	6818      	ldr	r0, [r3, #0]
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685a      	ldr	r2, [r3, #4]
 8002464:	4613      	mov	r3, r2
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	4413      	add	r3, r2
 800246a:	3b05      	subs	r3, #5
 800246c:	fa00 f203 	lsl.w	r2, r0, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	430a      	orrs	r2, r1
 8002476:	635a      	str	r2, [r3, #52]	@ 0x34
 8002478:	e03c      	b.n	80024f4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	2b0c      	cmp	r3, #12
 8002480:	d81c      	bhi.n	80024bc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685a      	ldr	r2, [r3, #4]
 800248c:	4613      	mov	r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	4413      	add	r3, r2
 8002492:	3b23      	subs	r3, #35	@ 0x23
 8002494:	221f      	movs	r2, #31
 8002496:	fa02 f303 	lsl.w	r3, r2, r3
 800249a:	43db      	mvns	r3, r3
 800249c:	4019      	ands	r1, r3
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	6818      	ldr	r0, [r3, #0]
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685a      	ldr	r2, [r3, #4]
 80024a6:	4613      	mov	r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	4413      	add	r3, r2
 80024ac:	3b23      	subs	r3, #35	@ 0x23
 80024ae:	fa00 f203 	lsl.w	r2, r0, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	430a      	orrs	r2, r1
 80024b8:	631a      	str	r2, [r3, #48]	@ 0x30
 80024ba:	e01b      	b.n	80024f4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	685a      	ldr	r2, [r3, #4]
 80024c6:	4613      	mov	r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	4413      	add	r3, r2
 80024cc:	3b41      	subs	r3, #65	@ 0x41
 80024ce:	221f      	movs	r2, #31
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	43db      	mvns	r3, r3
 80024d6:	4019      	ands	r1, r3
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	6818      	ldr	r0, [r3, #0]
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685a      	ldr	r2, [r3, #4]
 80024e0:	4613      	mov	r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	4413      	add	r3, r2
 80024e6:	3b41      	subs	r3, #65	@ 0x41
 80024e8:	fa00 f203 	lsl.w	r2, r0, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	430a      	orrs	r2, r1
 80024f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2b09      	cmp	r3, #9
 80024fa:	d91c      	bls.n	8002536 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	68d9      	ldr	r1, [r3, #12]
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	4613      	mov	r3, r2
 8002508:	005b      	lsls	r3, r3, #1
 800250a:	4413      	add	r3, r2
 800250c:	3b1e      	subs	r3, #30
 800250e:	2207      	movs	r2, #7
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	43db      	mvns	r3, r3
 8002516:	4019      	ands	r1, r3
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	6898      	ldr	r0, [r3, #8]
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	4613      	mov	r3, r2
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	4413      	add	r3, r2
 8002526:	3b1e      	subs	r3, #30
 8002528:	fa00 f203 	lsl.w	r2, r0, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	430a      	orrs	r2, r1
 8002532:	60da      	str	r2, [r3, #12]
 8002534:	e019      	b.n	800256a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	6919      	ldr	r1, [r3, #16]
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	4613      	mov	r3, r2
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	4413      	add	r3, r2
 8002546:	2207      	movs	r2, #7
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	43db      	mvns	r3, r3
 800254e:	4019      	ands	r1, r3
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	6898      	ldr	r0, [r3, #8]
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	4613      	mov	r3, r2
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	4413      	add	r3, r2
 800255e:	fa00 f203 	lsl.w	r2, r0, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	430a      	orrs	r2, r1
 8002568:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2b10      	cmp	r3, #16
 8002570:	d003      	beq.n	800257a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002576:	2b11      	cmp	r3, #17
 8002578:	d132      	bne.n	80025e0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a1d      	ldr	r2, [pc, #116]	@ (80025f4 <HAL_ADC_ConfigChannel+0x1e4>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d125      	bne.n	80025d0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d126      	bne.n	80025e0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	689a      	ldr	r2, [r3, #8]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80025a0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2b10      	cmp	r3, #16
 80025a8:	d11a      	bne.n	80025e0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80025aa:	4b13      	ldr	r3, [pc, #76]	@ (80025f8 <HAL_ADC_ConfigChannel+0x1e8>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a13      	ldr	r2, [pc, #76]	@ (80025fc <HAL_ADC_ConfigChannel+0x1ec>)
 80025b0:	fba2 2303 	umull	r2, r3, r2, r3
 80025b4:	0c9a      	lsrs	r2, r3, #18
 80025b6:	4613      	mov	r3, r2
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	4413      	add	r3, r2
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80025c0:	e002      	b.n	80025c8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	3b01      	subs	r3, #1
 80025c6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d1f9      	bne.n	80025c2 <HAL_ADC_ConfigChannel+0x1b2>
 80025ce:	e007      	b.n	80025e0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025d4:	f043 0220 	orr.w	r2, r3, #32
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80025e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3714      	adds	r7, #20
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bc80      	pop	{r7}
 80025f2:	4770      	bx	lr
 80025f4:	40012400 	.word	0x40012400
 80025f8:	20000000 	.word	0x20000000
 80025fc:	431bde83 	.word	0x431bde83

08002600 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002608:	2300      	movs	r3, #0
 800260a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800260c:	2300      	movs	r3, #0
 800260e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	2b01      	cmp	r3, #1
 800261c:	d040      	beq.n	80026a0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	689a      	ldr	r2, [r3, #8]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f042 0201 	orr.w	r2, r2, #1
 800262c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800262e:	4b1f      	ldr	r3, [pc, #124]	@ (80026ac <ADC_Enable+0xac>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a1f      	ldr	r2, [pc, #124]	@ (80026b0 <ADC_Enable+0xb0>)
 8002634:	fba2 2303 	umull	r2, r3, r2, r3
 8002638:	0c9b      	lsrs	r3, r3, #18
 800263a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800263c:	e002      	b.n	8002644 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	3b01      	subs	r3, #1
 8002642:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d1f9      	bne.n	800263e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800264a:	f7ff fd45 	bl	80020d8 <HAL_GetTick>
 800264e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002650:	e01f      	b.n	8002692 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002652:	f7ff fd41 	bl	80020d8 <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	2b02      	cmp	r3, #2
 800265e:	d918      	bls.n	8002692 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	2b01      	cmp	r3, #1
 800266c:	d011      	beq.n	8002692 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002672:	f043 0210 	orr.w	r2, r3, #16
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800267e:	f043 0201 	orr.w	r2, r3, #1
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e007      	b.n	80026a2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f003 0301 	and.w	r3, r3, #1
 800269c:	2b01      	cmp	r3, #1
 800269e:	d1d8      	bne.n	8002652 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3710      	adds	r7, #16
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	20000000 	.word	0x20000000
 80026b0:	431bde83 	.word	0x431bde83

080026b4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026bc:	2300      	movs	r3, #0
 80026be:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d12e      	bne.n	800272c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	689a      	ldr	r2, [r3, #8]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f022 0201 	bic.w	r2, r2, #1
 80026dc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80026de:	f7ff fcfb 	bl	80020d8 <HAL_GetTick>
 80026e2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80026e4:	e01b      	b.n	800271e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80026e6:	f7ff fcf7 	bl	80020d8 <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d914      	bls.n	800271e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d10d      	bne.n	800271e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002706:	f043 0210 	orr.w	r2, r3, #16
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002712:	f043 0201 	orr.w	r2, r3, #1
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e007      	b.n	800272e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f003 0301 	and.w	r3, r3, #1
 8002728:	2b01      	cmp	r3, #1
 800272a:	d0dc      	beq.n	80026e6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3710      	adds	r7, #16
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
	...

08002738 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002738:	b480      	push	{r7}
 800273a:	b085      	sub	sp, #20
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f003 0307 	and.w	r3, r3, #7
 8002746:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002748:	4b0c      	ldr	r3, [pc, #48]	@ (800277c <__NVIC_SetPriorityGrouping+0x44>)
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800274e:	68ba      	ldr	r2, [r7, #8]
 8002750:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002754:	4013      	ands	r3, r2
 8002756:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002760:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002764:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002768:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800276a:	4a04      	ldr	r2, [pc, #16]	@ (800277c <__NVIC_SetPriorityGrouping+0x44>)
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	60d3      	str	r3, [r2, #12]
}
 8002770:	bf00      	nop
 8002772:	3714      	adds	r7, #20
 8002774:	46bd      	mov	sp, r7
 8002776:	bc80      	pop	{r7}
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	e000ed00 	.word	0xe000ed00

08002780 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002784:	4b04      	ldr	r3, [pc, #16]	@ (8002798 <__NVIC_GetPriorityGrouping+0x18>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	0a1b      	lsrs	r3, r3, #8
 800278a:	f003 0307 	and.w	r3, r3, #7
}
 800278e:	4618      	mov	r0, r3
 8002790:	46bd      	mov	sp, r7
 8002792:	bc80      	pop	{r7}
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	e000ed00 	.word	0xe000ed00

0800279c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	4603      	mov	r3, r0
 80027a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	db0b      	blt.n	80027c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027ae:	79fb      	ldrb	r3, [r7, #7]
 80027b0:	f003 021f 	and.w	r2, r3, #31
 80027b4:	4906      	ldr	r1, [pc, #24]	@ (80027d0 <__NVIC_EnableIRQ+0x34>)
 80027b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ba:	095b      	lsrs	r3, r3, #5
 80027bc:	2001      	movs	r0, #1
 80027be:	fa00 f202 	lsl.w	r2, r0, r2
 80027c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027c6:	bf00      	nop
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bc80      	pop	{r7}
 80027ce:	4770      	bx	lr
 80027d0:	e000e100 	.word	0xe000e100

080027d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	4603      	mov	r3, r0
 80027dc:	6039      	str	r1, [r7, #0]
 80027de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	db0a      	blt.n	80027fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	b2da      	uxtb	r2, r3
 80027ec:	490c      	ldr	r1, [pc, #48]	@ (8002820 <__NVIC_SetPriority+0x4c>)
 80027ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f2:	0112      	lsls	r2, r2, #4
 80027f4:	b2d2      	uxtb	r2, r2
 80027f6:	440b      	add	r3, r1
 80027f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027fc:	e00a      	b.n	8002814 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	b2da      	uxtb	r2, r3
 8002802:	4908      	ldr	r1, [pc, #32]	@ (8002824 <__NVIC_SetPriority+0x50>)
 8002804:	79fb      	ldrb	r3, [r7, #7]
 8002806:	f003 030f 	and.w	r3, r3, #15
 800280a:	3b04      	subs	r3, #4
 800280c:	0112      	lsls	r2, r2, #4
 800280e:	b2d2      	uxtb	r2, r2
 8002810:	440b      	add	r3, r1
 8002812:	761a      	strb	r2, [r3, #24]
}
 8002814:	bf00      	nop
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	bc80      	pop	{r7}
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	e000e100 	.word	0xe000e100
 8002824:	e000ed00 	.word	0xe000ed00

08002828 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002828:	b480      	push	{r7}
 800282a:	b089      	sub	sp, #36	@ 0x24
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f003 0307 	and.w	r3, r3, #7
 800283a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	f1c3 0307 	rsb	r3, r3, #7
 8002842:	2b04      	cmp	r3, #4
 8002844:	bf28      	it	cs
 8002846:	2304      	movcs	r3, #4
 8002848:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	3304      	adds	r3, #4
 800284e:	2b06      	cmp	r3, #6
 8002850:	d902      	bls.n	8002858 <NVIC_EncodePriority+0x30>
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	3b03      	subs	r3, #3
 8002856:	e000      	b.n	800285a <NVIC_EncodePriority+0x32>
 8002858:	2300      	movs	r3, #0
 800285a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800285c:	f04f 32ff 	mov.w	r2, #4294967295
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	fa02 f303 	lsl.w	r3, r2, r3
 8002866:	43da      	mvns	r2, r3
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	401a      	ands	r2, r3
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002870:	f04f 31ff 	mov.w	r1, #4294967295
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	fa01 f303 	lsl.w	r3, r1, r3
 800287a:	43d9      	mvns	r1, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002880:	4313      	orrs	r3, r2
         );
}
 8002882:	4618      	mov	r0, r3
 8002884:	3724      	adds	r7, #36	@ 0x24
 8002886:	46bd      	mov	sp, r7
 8002888:	bc80      	pop	{r7}
 800288a:	4770      	bx	lr

0800288c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f7ff ff4f 	bl	8002738 <__NVIC_SetPriorityGrouping>
}
 800289a:	bf00      	nop
 800289c:	3708      	adds	r7, #8
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028a2:	b580      	push	{r7, lr}
 80028a4:	b086      	sub	sp, #24
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	4603      	mov	r3, r0
 80028aa:	60b9      	str	r1, [r7, #8]
 80028ac:	607a      	str	r2, [r7, #4]
 80028ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028b0:	2300      	movs	r3, #0
 80028b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028b4:	f7ff ff64 	bl	8002780 <__NVIC_GetPriorityGrouping>
 80028b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	68b9      	ldr	r1, [r7, #8]
 80028be:	6978      	ldr	r0, [r7, #20]
 80028c0:	f7ff ffb2 	bl	8002828 <NVIC_EncodePriority>
 80028c4:	4602      	mov	r2, r0
 80028c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028ca:	4611      	mov	r1, r2
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7ff ff81 	bl	80027d4 <__NVIC_SetPriority>
}
 80028d2:	bf00      	nop
 80028d4:	3718      	adds	r7, #24
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028da:	b580      	push	{r7, lr}
 80028dc:	b082      	sub	sp, #8
 80028de:	af00      	add	r7, sp, #0
 80028e0:	4603      	mov	r3, r0
 80028e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7ff ff57 	bl	800279c <__NVIC_EnableIRQ>
}
 80028ee:	bf00      	nop
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
	...

080028f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b08b      	sub	sp, #44	@ 0x2c
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002902:	2300      	movs	r3, #0
 8002904:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002906:	2300      	movs	r3, #0
 8002908:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800290a:	e169      	b.n	8002be0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800290c:	2201      	movs	r2, #1
 800290e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002910:	fa02 f303 	lsl.w	r3, r2, r3
 8002914:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	69fa      	ldr	r2, [r7, #28]
 800291c:	4013      	ands	r3, r2
 800291e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	429a      	cmp	r2, r3
 8002926:	f040 8158 	bne.w	8002bda <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	4a9a      	ldr	r2, [pc, #616]	@ (8002b98 <HAL_GPIO_Init+0x2a0>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d05e      	beq.n	80029f2 <HAL_GPIO_Init+0xfa>
 8002934:	4a98      	ldr	r2, [pc, #608]	@ (8002b98 <HAL_GPIO_Init+0x2a0>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d875      	bhi.n	8002a26 <HAL_GPIO_Init+0x12e>
 800293a:	4a98      	ldr	r2, [pc, #608]	@ (8002b9c <HAL_GPIO_Init+0x2a4>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d058      	beq.n	80029f2 <HAL_GPIO_Init+0xfa>
 8002940:	4a96      	ldr	r2, [pc, #600]	@ (8002b9c <HAL_GPIO_Init+0x2a4>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d86f      	bhi.n	8002a26 <HAL_GPIO_Init+0x12e>
 8002946:	4a96      	ldr	r2, [pc, #600]	@ (8002ba0 <HAL_GPIO_Init+0x2a8>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d052      	beq.n	80029f2 <HAL_GPIO_Init+0xfa>
 800294c:	4a94      	ldr	r2, [pc, #592]	@ (8002ba0 <HAL_GPIO_Init+0x2a8>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d869      	bhi.n	8002a26 <HAL_GPIO_Init+0x12e>
 8002952:	4a94      	ldr	r2, [pc, #592]	@ (8002ba4 <HAL_GPIO_Init+0x2ac>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d04c      	beq.n	80029f2 <HAL_GPIO_Init+0xfa>
 8002958:	4a92      	ldr	r2, [pc, #584]	@ (8002ba4 <HAL_GPIO_Init+0x2ac>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d863      	bhi.n	8002a26 <HAL_GPIO_Init+0x12e>
 800295e:	4a92      	ldr	r2, [pc, #584]	@ (8002ba8 <HAL_GPIO_Init+0x2b0>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d046      	beq.n	80029f2 <HAL_GPIO_Init+0xfa>
 8002964:	4a90      	ldr	r2, [pc, #576]	@ (8002ba8 <HAL_GPIO_Init+0x2b0>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d85d      	bhi.n	8002a26 <HAL_GPIO_Init+0x12e>
 800296a:	2b12      	cmp	r3, #18
 800296c:	d82a      	bhi.n	80029c4 <HAL_GPIO_Init+0xcc>
 800296e:	2b12      	cmp	r3, #18
 8002970:	d859      	bhi.n	8002a26 <HAL_GPIO_Init+0x12e>
 8002972:	a201      	add	r2, pc, #4	@ (adr r2, 8002978 <HAL_GPIO_Init+0x80>)
 8002974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002978:	080029f3 	.word	0x080029f3
 800297c:	080029cd 	.word	0x080029cd
 8002980:	080029df 	.word	0x080029df
 8002984:	08002a21 	.word	0x08002a21
 8002988:	08002a27 	.word	0x08002a27
 800298c:	08002a27 	.word	0x08002a27
 8002990:	08002a27 	.word	0x08002a27
 8002994:	08002a27 	.word	0x08002a27
 8002998:	08002a27 	.word	0x08002a27
 800299c:	08002a27 	.word	0x08002a27
 80029a0:	08002a27 	.word	0x08002a27
 80029a4:	08002a27 	.word	0x08002a27
 80029a8:	08002a27 	.word	0x08002a27
 80029ac:	08002a27 	.word	0x08002a27
 80029b0:	08002a27 	.word	0x08002a27
 80029b4:	08002a27 	.word	0x08002a27
 80029b8:	08002a27 	.word	0x08002a27
 80029bc:	080029d5 	.word	0x080029d5
 80029c0:	080029e9 	.word	0x080029e9
 80029c4:	4a79      	ldr	r2, [pc, #484]	@ (8002bac <HAL_GPIO_Init+0x2b4>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d013      	beq.n	80029f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80029ca:	e02c      	b.n	8002a26 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	623b      	str	r3, [r7, #32]
          break;
 80029d2:	e029      	b.n	8002a28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	3304      	adds	r3, #4
 80029da:	623b      	str	r3, [r7, #32]
          break;
 80029dc:	e024      	b.n	8002a28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	3308      	adds	r3, #8
 80029e4:	623b      	str	r3, [r7, #32]
          break;
 80029e6:	e01f      	b.n	8002a28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	330c      	adds	r3, #12
 80029ee:	623b      	str	r3, [r7, #32]
          break;
 80029f0:	e01a      	b.n	8002a28 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d102      	bne.n	8002a00 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80029fa:	2304      	movs	r3, #4
 80029fc:	623b      	str	r3, [r7, #32]
          break;
 80029fe:	e013      	b.n	8002a28 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d105      	bne.n	8002a14 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a08:	2308      	movs	r3, #8
 8002a0a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	69fa      	ldr	r2, [r7, #28]
 8002a10:	611a      	str	r2, [r3, #16]
          break;
 8002a12:	e009      	b.n	8002a28 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a14:	2308      	movs	r3, #8
 8002a16:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	69fa      	ldr	r2, [r7, #28]
 8002a1c:	615a      	str	r2, [r3, #20]
          break;
 8002a1e:	e003      	b.n	8002a28 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002a20:	2300      	movs	r3, #0
 8002a22:	623b      	str	r3, [r7, #32]
          break;
 8002a24:	e000      	b.n	8002a28 <HAL_GPIO_Init+0x130>
          break;
 8002a26:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	2bff      	cmp	r3, #255	@ 0xff
 8002a2c:	d801      	bhi.n	8002a32 <HAL_GPIO_Init+0x13a>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	e001      	b.n	8002a36 <HAL_GPIO_Init+0x13e>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	3304      	adds	r3, #4
 8002a36:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	2bff      	cmp	r3, #255	@ 0xff
 8002a3c:	d802      	bhi.n	8002a44 <HAL_GPIO_Init+0x14c>
 8002a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	e002      	b.n	8002a4a <HAL_GPIO_Init+0x152>
 8002a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a46:	3b08      	subs	r3, #8
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	210f      	movs	r1, #15
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	fa01 f303 	lsl.w	r3, r1, r3
 8002a58:	43db      	mvns	r3, r3
 8002a5a:	401a      	ands	r2, r3
 8002a5c:	6a39      	ldr	r1, [r7, #32]
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	fa01 f303 	lsl.w	r3, r1, r3
 8002a64:	431a      	orrs	r2, r3
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	f000 80b1 	beq.w	8002bda <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002a78:	4b4d      	ldr	r3, [pc, #308]	@ (8002bb0 <HAL_GPIO_Init+0x2b8>)
 8002a7a:	699b      	ldr	r3, [r3, #24]
 8002a7c:	4a4c      	ldr	r2, [pc, #304]	@ (8002bb0 <HAL_GPIO_Init+0x2b8>)
 8002a7e:	f043 0301 	orr.w	r3, r3, #1
 8002a82:	6193      	str	r3, [r2, #24]
 8002a84:	4b4a      	ldr	r3, [pc, #296]	@ (8002bb0 <HAL_GPIO_Init+0x2b8>)
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	f003 0301 	and.w	r3, r3, #1
 8002a8c:	60bb      	str	r3, [r7, #8]
 8002a8e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002a90:	4a48      	ldr	r2, [pc, #288]	@ (8002bb4 <HAL_GPIO_Init+0x2bc>)
 8002a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a94:	089b      	lsrs	r3, r3, #2
 8002a96:	3302      	adds	r3, #2
 8002a98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a9c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa0:	f003 0303 	and.w	r3, r3, #3
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	220f      	movs	r2, #15
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	43db      	mvns	r3, r3
 8002aae:	68fa      	ldr	r2, [r7, #12]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4a40      	ldr	r2, [pc, #256]	@ (8002bb8 <HAL_GPIO_Init+0x2c0>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d013      	beq.n	8002ae4 <HAL_GPIO_Init+0x1ec>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	4a3f      	ldr	r2, [pc, #252]	@ (8002bbc <HAL_GPIO_Init+0x2c4>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d00d      	beq.n	8002ae0 <HAL_GPIO_Init+0x1e8>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	4a3e      	ldr	r2, [pc, #248]	@ (8002bc0 <HAL_GPIO_Init+0x2c8>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d007      	beq.n	8002adc <HAL_GPIO_Init+0x1e4>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	4a3d      	ldr	r2, [pc, #244]	@ (8002bc4 <HAL_GPIO_Init+0x2cc>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d101      	bne.n	8002ad8 <HAL_GPIO_Init+0x1e0>
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e006      	b.n	8002ae6 <HAL_GPIO_Init+0x1ee>
 8002ad8:	2304      	movs	r3, #4
 8002ada:	e004      	b.n	8002ae6 <HAL_GPIO_Init+0x1ee>
 8002adc:	2302      	movs	r3, #2
 8002ade:	e002      	b.n	8002ae6 <HAL_GPIO_Init+0x1ee>
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e000      	b.n	8002ae6 <HAL_GPIO_Init+0x1ee>
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ae8:	f002 0203 	and.w	r2, r2, #3
 8002aec:	0092      	lsls	r2, r2, #2
 8002aee:	4093      	lsls	r3, r2
 8002af0:	68fa      	ldr	r2, [r7, #12]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002af6:	492f      	ldr	r1, [pc, #188]	@ (8002bb4 <HAL_GPIO_Init+0x2bc>)
 8002af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002afa:	089b      	lsrs	r3, r3, #2
 8002afc:	3302      	adds	r3, #2
 8002afe:	68fa      	ldr	r2, [r7, #12]
 8002b00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d006      	beq.n	8002b1e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002b10:	4b2d      	ldr	r3, [pc, #180]	@ (8002bc8 <HAL_GPIO_Init+0x2d0>)
 8002b12:	689a      	ldr	r2, [r3, #8]
 8002b14:	492c      	ldr	r1, [pc, #176]	@ (8002bc8 <HAL_GPIO_Init+0x2d0>)
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	608b      	str	r3, [r1, #8]
 8002b1c:	e006      	b.n	8002b2c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002b1e:	4b2a      	ldr	r3, [pc, #168]	@ (8002bc8 <HAL_GPIO_Init+0x2d0>)
 8002b20:	689a      	ldr	r2, [r3, #8]
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	43db      	mvns	r3, r3
 8002b26:	4928      	ldr	r1, [pc, #160]	@ (8002bc8 <HAL_GPIO_Init+0x2d0>)
 8002b28:	4013      	ands	r3, r2
 8002b2a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d006      	beq.n	8002b46 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002b38:	4b23      	ldr	r3, [pc, #140]	@ (8002bc8 <HAL_GPIO_Init+0x2d0>)
 8002b3a:	68da      	ldr	r2, [r3, #12]
 8002b3c:	4922      	ldr	r1, [pc, #136]	@ (8002bc8 <HAL_GPIO_Init+0x2d0>)
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	60cb      	str	r3, [r1, #12]
 8002b44:	e006      	b.n	8002b54 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002b46:	4b20      	ldr	r3, [pc, #128]	@ (8002bc8 <HAL_GPIO_Init+0x2d0>)
 8002b48:	68da      	ldr	r2, [r3, #12]
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	43db      	mvns	r3, r3
 8002b4e:	491e      	ldr	r1, [pc, #120]	@ (8002bc8 <HAL_GPIO_Init+0x2d0>)
 8002b50:	4013      	ands	r3, r2
 8002b52:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d006      	beq.n	8002b6e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002b60:	4b19      	ldr	r3, [pc, #100]	@ (8002bc8 <HAL_GPIO_Init+0x2d0>)
 8002b62:	685a      	ldr	r2, [r3, #4]
 8002b64:	4918      	ldr	r1, [pc, #96]	@ (8002bc8 <HAL_GPIO_Init+0x2d0>)
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	604b      	str	r3, [r1, #4]
 8002b6c:	e006      	b.n	8002b7c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002b6e:	4b16      	ldr	r3, [pc, #88]	@ (8002bc8 <HAL_GPIO_Init+0x2d0>)
 8002b70:	685a      	ldr	r2, [r3, #4]
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	43db      	mvns	r3, r3
 8002b76:	4914      	ldr	r1, [pc, #80]	@ (8002bc8 <HAL_GPIO_Init+0x2d0>)
 8002b78:	4013      	ands	r3, r2
 8002b7a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d021      	beq.n	8002bcc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002b88:	4b0f      	ldr	r3, [pc, #60]	@ (8002bc8 <HAL_GPIO_Init+0x2d0>)
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	490e      	ldr	r1, [pc, #56]	@ (8002bc8 <HAL_GPIO_Init+0x2d0>)
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	600b      	str	r3, [r1, #0]
 8002b94:	e021      	b.n	8002bda <HAL_GPIO_Init+0x2e2>
 8002b96:	bf00      	nop
 8002b98:	10320000 	.word	0x10320000
 8002b9c:	10310000 	.word	0x10310000
 8002ba0:	10220000 	.word	0x10220000
 8002ba4:	10210000 	.word	0x10210000
 8002ba8:	10120000 	.word	0x10120000
 8002bac:	10110000 	.word	0x10110000
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	40010000 	.word	0x40010000
 8002bb8:	40010800 	.word	0x40010800
 8002bbc:	40010c00 	.word	0x40010c00
 8002bc0:	40011000 	.word	0x40011000
 8002bc4:	40011400 	.word	0x40011400
 8002bc8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002bcc:	4b0b      	ldr	r3, [pc, #44]	@ (8002bfc <HAL_GPIO_Init+0x304>)
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	43db      	mvns	r3, r3
 8002bd4:	4909      	ldr	r1, [pc, #36]	@ (8002bfc <HAL_GPIO_Init+0x304>)
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bdc:	3301      	adds	r3, #1
 8002bde:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be6:	fa22 f303 	lsr.w	r3, r2, r3
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	f47f ae8e 	bne.w	800290c <HAL_GPIO_Init+0x14>
  }
}
 8002bf0:	bf00      	nop
 8002bf2:	bf00      	nop
 8002bf4:	372c      	adds	r7, #44	@ 0x2c
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bc80      	pop	{r7}
 8002bfa:	4770      	bx	lr
 8002bfc:	40010400 	.word	0x40010400

08002c00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d101      	bne.n	8002c12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e12b      	b.n	8002e6a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d106      	bne.n	8002c2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f7fe ffba 	bl	8001ba0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2224      	movs	r2, #36	@ 0x24
 8002c30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f022 0201 	bic.w	r2, r2, #1
 8002c42:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002c52:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002c62:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c64:	f001 fbfc 	bl	8004460 <HAL_RCC_GetPCLK1Freq>
 8002c68:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	4a81      	ldr	r2, [pc, #516]	@ (8002e74 <HAL_I2C_Init+0x274>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d807      	bhi.n	8002c84 <HAL_I2C_Init+0x84>
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	4a80      	ldr	r2, [pc, #512]	@ (8002e78 <HAL_I2C_Init+0x278>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	bf94      	ite	ls
 8002c7c:	2301      	movls	r3, #1
 8002c7e:	2300      	movhi	r3, #0
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	e006      	b.n	8002c92 <HAL_I2C_Init+0x92>
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	4a7d      	ldr	r2, [pc, #500]	@ (8002e7c <HAL_I2C_Init+0x27c>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	bf94      	ite	ls
 8002c8c:	2301      	movls	r3, #1
 8002c8e:	2300      	movhi	r3, #0
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e0e7      	b.n	8002e6a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	4a78      	ldr	r2, [pc, #480]	@ (8002e80 <HAL_I2C_Init+0x280>)
 8002c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca2:	0c9b      	lsrs	r3, r3, #18
 8002ca4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	68ba      	ldr	r2, [r7, #8]
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	6a1b      	ldr	r3, [r3, #32]
 8002cc0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	4a6a      	ldr	r2, [pc, #424]	@ (8002e74 <HAL_I2C_Init+0x274>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d802      	bhi.n	8002cd4 <HAL_I2C_Init+0xd4>
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	e009      	b.n	8002ce8 <HAL_I2C_Init+0xe8>
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002cda:	fb02 f303 	mul.w	r3, r2, r3
 8002cde:	4a69      	ldr	r2, [pc, #420]	@ (8002e84 <HAL_I2C_Init+0x284>)
 8002ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce4:	099b      	lsrs	r3, r3, #6
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	6812      	ldr	r2, [r2, #0]
 8002cec:	430b      	orrs	r3, r1
 8002cee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	69db      	ldr	r3, [r3, #28]
 8002cf6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002cfa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	495c      	ldr	r1, [pc, #368]	@ (8002e74 <HAL_I2C_Init+0x274>)
 8002d04:	428b      	cmp	r3, r1
 8002d06:	d819      	bhi.n	8002d3c <HAL_I2C_Init+0x13c>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	1e59      	subs	r1, r3, #1
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	005b      	lsls	r3, r3, #1
 8002d12:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d16:	1c59      	adds	r1, r3, #1
 8002d18:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002d1c:	400b      	ands	r3, r1
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d00a      	beq.n	8002d38 <HAL_I2C_Init+0x138>
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	1e59      	subs	r1, r3, #1
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	005b      	lsls	r3, r3, #1
 8002d2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d30:	3301      	adds	r3, #1
 8002d32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d36:	e051      	b.n	8002ddc <HAL_I2C_Init+0x1dc>
 8002d38:	2304      	movs	r3, #4
 8002d3a:	e04f      	b.n	8002ddc <HAL_I2C_Init+0x1dc>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d111      	bne.n	8002d68 <HAL_I2C_Init+0x168>
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	1e58      	subs	r0, r3, #1
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6859      	ldr	r1, [r3, #4]
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	005b      	lsls	r3, r3, #1
 8002d50:	440b      	add	r3, r1
 8002d52:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d56:	3301      	adds	r3, #1
 8002d58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	bf0c      	ite	eq
 8002d60:	2301      	moveq	r3, #1
 8002d62:	2300      	movne	r3, #0
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	e012      	b.n	8002d8e <HAL_I2C_Init+0x18e>
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	1e58      	subs	r0, r3, #1
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6859      	ldr	r1, [r3, #4]
 8002d70:	460b      	mov	r3, r1
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	440b      	add	r3, r1
 8002d76:	0099      	lsls	r1, r3, #2
 8002d78:	440b      	add	r3, r1
 8002d7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d7e:	3301      	adds	r3, #1
 8002d80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	bf0c      	ite	eq
 8002d88:	2301      	moveq	r3, #1
 8002d8a:	2300      	movne	r3, #0
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d001      	beq.n	8002d96 <HAL_I2C_Init+0x196>
 8002d92:	2301      	movs	r3, #1
 8002d94:	e022      	b.n	8002ddc <HAL_I2C_Init+0x1dc>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d10e      	bne.n	8002dbc <HAL_I2C_Init+0x1bc>
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	1e58      	subs	r0, r3, #1
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6859      	ldr	r1, [r3, #4]
 8002da6:	460b      	mov	r3, r1
 8002da8:	005b      	lsls	r3, r3, #1
 8002daa:	440b      	add	r3, r1
 8002dac:	fbb0 f3f3 	udiv	r3, r0, r3
 8002db0:	3301      	adds	r3, #1
 8002db2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002db6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002dba:	e00f      	b.n	8002ddc <HAL_I2C_Init+0x1dc>
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	1e58      	subs	r0, r3, #1
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6859      	ldr	r1, [r3, #4]
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	440b      	add	r3, r1
 8002dca:	0099      	lsls	r1, r3, #2
 8002dcc:	440b      	add	r3, r1
 8002dce:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dd8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002ddc:	6879      	ldr	r1, [r7, #4]
 8002dde:	6809      	ldr	r1, [r1, #0]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	69da      	ldr	r2, [r3, #28]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a1b      	ldr	r3, [r3, #32]
 8002df6:	431a      	orrs	r2, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	430a      	orrs	r2, r1
 8002dfe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002e0a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	6911      	ldr	r1, [r2, #16]
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	68d2      	ldr	r2, [r2, #12]
 8002e16:	4311      	orrs	r1, r2
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	6812      	ldr	r2, [r2, #0]
 8002e1c:	430b      	orrs	r3, r1
 8002e1e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	695a      	ldr	r2, [r3, #20]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	699b      	ldr	r3, [r3, #24]
 8002e32:	431a      	orrs	r2, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	430a      	orrs	r2, r1
 8002e3a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f042 0201 	orr.w	r2, r2, #1
 8002e4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2220      	movs	r2, #32
 8002e56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3710      	adds	r7, #16
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	000186a0 	.word	0x000186a0
 8002e78:	001e847f 	.word	0x001e847f
 8002e7c:	003d08ff 	.word	0x003d08ff
 8002e80:	431bde83 	.word	0x431bde83
 8002e84:	10624dd3 	.word	0x10624dd3

08002e88 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b088      	sub	sp, #32
 8002e8c:	af02      	add	r7, sp, #8
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	4608      	mov	r0, r1
 8002e92:	4611      	mov	r1, r2
 8002e94:	461a      	mov	r2, r3
 8002e96:	4603      	mov	r3, r0
 8002e98:	817b      	strh	r3, [r7, #10]
 8002e9a:	460b      	mov	r3, r1
 8002e9c:	813b      	strh	r3, [r7, #8]
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ea2:	f7ff f919 	bl	80020d8 <HAL_GetTick>
 8002ea6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	2b20      	cmp	r3, #32
 8002eb2:	f040 80d9 	bne.w	8003068 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	9300      	str	r3, [sp, #0]
 8002eba:	2319      	movs	r3, #25
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	496d      	ldr	r1, [pc, #436]	@ (8003074 <HAL_I2C_Mem_Write+0x1ec>)
 8002ec0:	68f8      	ldr	r0, [r7, #12]
 8002ec2:	f000 fccd 	bl	8003860 <I2C_WaitOnFlagUntilTimeout>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d001      	beq.n	8002ed0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002ecc:	2302      	movs	r3, #2
 8002ece:	e0cc      	b.n	800306a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d101      	bne.n	8002ede <HAL_I2C_Mem_Write+0x56>
 8002eda:	2302      	movs	r3, #2
 8002edc:	e0c5      	b.n	800306a <HAL_I2C_Mem_Write+0x1e2>
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0301 	and.w	r3, r3, #1
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d007      	beq.n	8002f04 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f042 0201 	orr.w	r2, r2, #1
 8002f02:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f12:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2221      	movs	r2, #33	@ 0x21
 8002f18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2240      	movs	r2, #64	@ 0x40
 8002f20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2200      	movs	r2, #0
 8002f28:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6a3a      	ldr	r2, [r7, #32]
 8002f2e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002f34:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f3a:	b29a      	uxth	r2, r3
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	4a4d      	ldr	r2, [pc, #308]	@ (8003078 <HAL_I2C_Mem_Write+0x1f0>)
 8002f44:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f46:	88f8      	ldrh	r0, [r7, #6]
 8002f48:	893a      	ldrh	r2, [r7, #8]
 8002f4a:	8979      	ldrh	r1, [r7, #10]
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	9301      	str	r3, [sp, #4]
 8002f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f52:	9300      	str	r3, [sp, #0]
 8002f54:	4603      	mov	r3, r0
 8002f56:	68f8      	ldr	r0, [r7, #12]
 8002f58:	f000 fb04 	bl	8003564 <I2C_RequestMemoryWrite>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d052      	beq.n	8003008 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e081      	b.n	800306a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f66:	697a      	ldr	r2, [r7, #20]
 8002f68:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f6a:	68f8      	ldr	r0, [r7, #12]
 8002f6c:	f000 fd92 	bl	8003a94 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d00d      	beq.n	8002f92 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f7a:	2b04      	cmp	r3, #4
 8002f7c:	d107      	bne.n	8002f8e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f8c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e06b      	b.n	800306a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f96:	781a      	ldrb	r2, [r3, #0]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fa2:	1c5a      	adds	r2, r3, #1
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fac:	3b01      	subs	r3, #1
 8002fae:	b29a      	uxth	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	3b01      	subs	r3, #1
 8002fbc:	b29a      	uxth	r2, r3
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	695b      	ldr	r3, [r3, #20]
 8002fc8:	f003 0304 	and.w	r3, r3, #4
 8002fcc:	2b04      	cmp	r3, #4
 8002fce:	d11b      	bne.n	8003008 <HAL_I2C_Mem_Write+0x180>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d017      	beq.n	8003008 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fdc:	781a      	ldrb	r2, [r3, #0]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fe8:	1c5a      	adds	r2, r3, #1
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	b29a      	uxth	r2, r3
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	3b01      	subs	r3, #1
 8003002:	b29a      	uxth	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800300c:	2b00      	cmp	r3, #0
 800300e:	d1aa      	bne.n	8002f66 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003010:	697a      	ldr	r2, [r7, #20]
 8003012:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003014:	68f8      	ldr	r0, [r7, #12]
 8003016:	f000 fd85 	bl	8003b24 <I2C_WaitOnBTFFlagUntilTimeout>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d00d      	beq.n	800303c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003024:	2b04      	cmp	r3, #4
 8003026:	d107      	bne.n	8003038 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003036:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e016      	b.n	800306a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800304a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2220      	movs	r2, #32
 8003050:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003064:	2300      	movs	r3, #0
 8003066:	e000      	b.n	800306a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003068:	2302      	movs	r3, #2
  }
}
 800306a:	4618      	mov	r0, r3
 800306c:	3718      	adds	r7, #24
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	00100002 	.word	0x00100002
 8003078:	ffff0000 	.word	0xffff0000

0800307c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b08c      	sub	sp, #48	@ 0x30
 8003080:	af02      	add	r7, sp, #8
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	4608      	mov	r0, r1
 8003086:	4611      	mov	r1, r2
 8003088:	461a      	mov	r2, r3
 800308a:	4603      	mov	r3, r0
 800308c:	817b      	strh	r3, [r7, #10]
 800308e:	460b      	mov	r3, r1
 8003090:	813b      	strh	r3, [r7, #8]
 8003092:	4613      	mov	r3, r2
 8003094:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003096:	2300      	movs	r3, #0
 8003098:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800309a:	f7ff f81d 	bl	80020d8 <HAL_GetTick>
 800309e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	2b20      	cmp	r3, #32
 80030aa:	f040 8250 	bne.w	800354e <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b0:	9300      	str	r3, [sp, #0]
 80030b2:	2319      	movs	r3, #25
 80030b4:	2201      	movs	r2, #1
 80030b6:	4982      	ldr	r1, [pc, #520]	@ (80032c0 <HAL_I2C_Mem_Read+0x244>)
 80030b8:	68f8      	ldr	r0, [r7, #12]
 80030ba:	f000 fbd1 	bl	8003860 <I2C_WaitOnFlagUntilTimeout>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d001      	beq.n	80030c8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80030c4:	2302      	movs	r3, #2
 80030c6:	e243      	b.n	8003550 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d101      	bne.n	80030d6 <HAL_I2C_Mem_Read+0x5a>
 80030d2:	2302      	movs	r3, #2
 80030d4:	e23c      	b.n	8003550 <HAL_I2C_Mem_Read+0x4d4>
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2201      	movs	r2, #1
 80030da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0301 	and.w	r3, r3, #1
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d007      	beq.n	80030fc <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f042 0201 	orr.w	r2, r2, #1
 80030fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800310a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2222      	movs	r2, #34	@ 0x22
 8003110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2240      	movs	r2, #64	@ 0x40
 8003118:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2200      	movs	r2, #0
 8003120:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003126:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800312c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003132:	b29a      	uxth	r2, r3
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	4a62      	ldr	r2, [pc, #392]	@ (80032c4 <HAL_I2C_Mem_Read+0x248>)
 800313c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800313e:	88f8      	ldrh	r0, [r7, #6]
 8003140:	893a      	ldrh	r2, [r7, #8]
 8003142:	8979      	ldrh	r1, [r7, #10]
 8003144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003146:	9301      	str	r3, [sp, #4]
 8003148:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800314a:	9300      	str	r3, [sp, #0]
 800314c:	4603      	mov	r3, r0
 800314e:	68f8      	ldr	r0, [r7, #12]
 8003150:	f000 fa9e 	bl	8003690 <I2C_RequestMemoryRead>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d001      	beq.n	800315e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e1f8      	b.n	8003550 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003162:	2b00      	cmp	r3, #0
 8003164:	d113      	bne.n	800318e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003166:	2300      	movs	r3, #0
 8003168:	61fb      	str	r3, [r7, #28]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	695b      	ldr	r3, [r3, #20]
 8003170:	61fb      	str	r3, [r7, #28]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	699b      	ldr	r3, [r3, #24]
 8003178:	61fb      	str	r3, [r7, #28]
 800317a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800318a:	601a      	str	r2, [r3, #0]
 800318c:	e1cc      	b.n	8003528 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003192:	2b01      	cmp	r3, #1
 8003194:	d11e      	bne.n	80031d4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031a4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80031a6:	b672      	cpsid	i
}
 80031a8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031aa:	2300      	movs	r3, #0
 80031ac:	61bb      	str	r3, [r7, #24]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	695b      	ldr	r3, [r3, #20]
 80031b4:	61bb      	str	r3, [r7, #24]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	61bb      	str	r3, [r7, #24]
 80031be:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031ce:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80031d0:	b662      	cpsie	i
}
 80031d2:	e035      	b.n	8003240 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d11e      	bne.n	800321a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80031ea:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80031ec:	b672      	cpsid	i
}
 80031ee:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031f0:	2300      	movs	r3, #0
 80031f2:	617b      	str	r3, [r7, #20]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	695b      	ldr	r3, [r3, #20]
 80031fa:	617b      	str	r3, [r7, #20]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	699b      	ldr	r3, [r3, #24]
 8003202:	617b      	str	r3, [r7, #20]
 8003204:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003214:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003216:	b662      	cpsie	i
}
 8003218:	e012      	b.n	8003240 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003228:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800322a:	2300      	movs	r3, #0
 800322c:	613b      	str	r3, [r7, #16]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	695b      	ldr	r3, [r3, #20]
 8003234:	613b      	str	r3, [r7, #16]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	699b      	ldr	r3, [r3, #24]
 800323c:	613b      	str	r3, [r7, #16]
 800323e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003240:	e172      	b.n	8003528 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003246:	2b03      	cmp	r3, #3
 8003248:	f200 811f 	bhi.w	800348a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003250:	2b01      	cmp	r3, #1
 8003252:	d123      	bne.n	800329c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003254:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003256:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003258:	68f8      	ldr	r0, [r7, #12]
 800325a:	f000 fcab 	bl	8003bb4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d001      	beq.n	8003268 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e173      	b.n	8003550 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	691a      	ldr	r2, [r3, #16]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003272:	b2d2      	uxtb	r2, r2
 8003274:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800327a:	1c5a      	adds	r2, r3, #1
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003284:	3b01      	subs	r3, #1
 8003286:	b29a      	uxth	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003290:	b29b      	uxth	r3, r3
 8003292:	3b01      	subs	r3, #1
 8003294:	b29a      	uxth	r2, r3
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800329a:	e145      	b.n	8003528 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d152      	bne.n	800334a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80032a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032a6:	9300      	str	r3, [sp, #0]
 80032a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032aa:	2200      	movs	r2, #0
 80032ac:	4906      	ldr	r1, [pc, #24]	@ (80032c8 <HAL_I2C_Mem_Read+0x24c>)
 80032ae:	68f8      	ldr	r0, [r7, #12]
 80032b0:	f000 fad6 	bl	8003860 <I2C_WaitOnFlagUntilTimeout>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d008      	beq.n	80032cc <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e148      	b.n	8003550 <HAL_I2C_Mem_Read+0x4d4>
 80032be:	bf00      	nop
 80032c0:	00100002 	.word	0x00100002
 80032c4:	ffff0000 	.word	0xffff0000
 80032c8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80032cc:	b672      	cpsid	i
}
 80032ce:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	691a      	ldr	r2, [r3, #16]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ea:	b2d2      	uxtb	r2, r2
 80032ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f2:	1c5a      	adds	r2, r3, #1
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032fc:	3b01      	subs	r3, #1
 80032fe:	b29a      	uxth	r2, r3
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003308:	b29b      	uxth	r3, r3
 800330a:	3b01      	subs	r3, #1
 800330c:	b29a      	uxth	r2, r3
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003312:	b662      	cpsie	i
}
 8003314:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	691a      	ldr	r2, [r3, #16]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003320:	b2d2      	uxtb	r2, r2
 8003322:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003328:	1c5a      	adds	r2, r3, #1
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003332:	3b01      	subs	r3, #1
 8003334:	b29a      	uxth	r2, r3
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800333e:	b29b      	uxth	r3, r3
 8003340:	3b01      	subs	r3, #1
 8003342:	b29a      	uxth	r2, r3
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003348:	e0ee      	b.n	8003528 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800334a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800334c:	9300      	str	r3, [sp, #0]
 800334e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003350:	2200      	movs	r2, #0
 8003352:	4981      	ldr	r1, [pc, #516]	@ (8003558 <HAL_I2C_Mem_Read+0x4dc>)
 8003354:	68f8      	ldr	r0, [r7, #12]
 8003356:	f000 fa83 	bl	8003860 <I2C_WaitOnFlagUntilTimeout>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d001      	beq.n	8003364 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e0f5      	b.n	8003550 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003372:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003374:	b672      	cpsid	i
}
 8003376:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	691a      	ldr	r2, [r3, #16]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003382:	b2d2      	uxtb	r2, r2
 8003384:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800338a:	1c5a      	adds	r2, r3, #1
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003394:	3b01      	subs	r3, #1
 8003396:	b29a      	uxth	r2, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	3b01      	subs	r3, #1
 80033a4:	b29a      	uxth	r2, r3
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80033aa:	4b6c      	ldr	r3, [pc, #432]	@ (800355c <HAL_I2C_Mem_Read+0x4e0>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	08db      	lsrs	r3, r3, #3
 80033b0:	4a6b      	ldr	r2, [pc, #428]	@ (8003560 <HAL_I2C_Mem_Read+0x4e4>)
 80033b2:	fba2 2303 	umull	r2, r3, r2, r3
 80033b6:	0a1a      	lsrs	r2, r3, #8
 80033b8:	4613      	mov	r3, r2
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	4413      	add	r3, r2
 80033be:	00da      	lsls	r2, r3, #3
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80033c4:	6a3b      	ldr	r3, [r7, #32]
 80033c6:	3b01      	subs	r3, #1
 80033c8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80033ca:	6a3b      	ldr	r3, [r7, #32]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d118      	bne.n	8003402 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2200      	movs	r2, #0
 80033d4:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2220      	movs	r2, #32
 80033da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ea:	f043 0220 	orr.w	r2, r3, #32
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80033f2:	b662      	cpsie	i
}
 80033f4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e0a6      	b.n	8003550 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	695b      	ldr	r3, [r3, #20]
 8003408:	f003 0304 	and.w	r3, r3, #4
 800340c:	2b04      	cmp	r3, #4
 800340e:	d1d9      	bne.n	80033c4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800341e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	691a      	ldr	r2, [r3, #16]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800342a:	b2d2      	uxtb	r2, r2
 800342c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003432:	1c5a      	adds	r2, r3, #1
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800343c:	3b01      	subs	r3, #1
 800343e:	b29a      	uxth	r2, r3
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003448:	b29b      	uxth	r3, r3
 800344a:	3b01      	subs	r3, #1
 800344c:	b29a      	uxth	r2, r3
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003452:	b662      	cpsie	i
}
 8003454:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	691a      	ldr	r2, [r3, #16]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003460:	b2d2      	uxtb	r2, r2
 8003462:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003468:	1c5a      	adds	r2, r3, #1
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003472:	3b01      	subs	r3, #1
 8003474:	b29a      	uxth	r2, r3
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800347e:	b29b      	uxth	r3, r3
 8003480:	3b01      	subs	r3, #1
 8003482:	b29a      	uxth	r2, r3
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003488:	e04e      	b.n	8003528 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800348a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800348c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800348e:	68f8      	ldr	r0, [r7, #12]
 8003490:	f000 fb90 	bl	8003bb4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d001      	beq.n	800349e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e058      	b.n	8003550 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	691a      	ldr	r2, [r3, #16]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a8:	b2d2      	uxtb	r2, r2
 80034aa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b0:	1c5a      	adds	r2, r3, #1
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034ba:	3b01      	subs	r3, #1
 80034bc:	b29a      	uxth	r2, r3
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	3b01      	subs	r3, #1
 80034ca:	b29a      	uxth	r2, r3
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	f003 0304 	and.w	r3, r3, #4
 80034da:	2b04      	cmp	r3, #4
 80034dc:	d124      	bne.n	8003528 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034e2:	2b03      	cmp	r3, #3
 80034e4:	d107      	bne.n	80034f6 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034f4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	691a      	ldr	r2, [r3, #16]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003500:	b2d2      	uxtb	r2, r2
 8003502:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003508:	1c5a      	adds	r2, r3, #1
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003512:	3b01      	subs	r3, #1
 8003514:	b29a      	uxth	r2, r3
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800351e:	b29b      	uxth	r3, r3
 8003520:	3b01      	subs	r3, #1
 8003522:	b29a      	uxth	r2, r3
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800352c:	2b00      	cmp	r3, #0
 800352e:	f47f ae88 	bne.w	8003242 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2220      	movs	r2, #32
 8003536:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800354a:	2300      	movs	r3, #0
 800354c:	e000      	b.n	8003550 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 800354e:	2302      	movs	r3, #2
  }
}
 8003550:	4618      	mov	r0, r3
 8003552:	3728      	adds	r7, #40	@ 0x28
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	00010004 	.word	0x00010004
 800355c:	20000000 	.word	0x20000000
 8003560:	14f8b589 	.word	0x14f8b589

08003564 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b088      	sub	sp, #32
 8003568:	af02      	add	r7, sp, #8
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	4608      	mov	r0, r1
 800356e:	4611      	mov	r1, r2
 8003570:	461a      	mov	r2, r3
 8003572:	4603      	mov	r3, r0
 8003574:	817b      	strh	r3, [r7, #10]
 8003576:	460b      	mov	r3, r1
 8003578:	813b      	strh	r3, [r7, #8]
 800357a:	4613      	mov	r3, r2
 800357c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800358c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800358e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003590:	9300      	str	r3, [sp, #0]
 8003592:	6a3b      	ldr	r3, [r7, #32]
 8003594:	2200      	movs	r2, #0
 8003596:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800359a:	68f8      	ldr	r0, [r7, #12]
 800359c:	f000 f960 	bl	8003860 <I2C_WaitOnFlagUntilTimeout>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00d      	beq.n	80035c2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035b4:	d103      	bne.n	80035be <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80035bc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e05f      	b.n	8003682 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80035c2:	897b      	ldrh	r3, [r7, #10]
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	461a      	mov	r2, r3
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80035d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035d4:	6a3a      	ldr	r2, [r7, #32]
 80035d6:	492d      	ldr	r1, [pc, #180]	@ (800368c <I2C_RequestMemoryWrite+0x128>)
 80035d8:	68f8      	ldr	r0, [r7, #12]
 80035da:	f000 f9bb 	bl	8003954 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d001      	beq.n	80035e8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e04c      	b.n	8003682 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035e8:	2300      	movs	r3, #0
 80035ea:	617b      	str	r3, [r7, #20]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	695b      	ldr	r3, [r3, #20]
 80035f2:	617b      	str	r3, [r7, #20]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	699b      	ldr	r3, [r3, #24]
 80035fa:	617b      	str	r3, [r7, #20]
 80035fc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003600:	6a39      	ldr	r1, [r7, #32]
 8003602:	68f8      	ldr	r0, [r7, #12]
 8003604:	f000 fa46 	bl	8003a94 <I2C_WaitOnTXEFlagUntilTimeout>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d00d      	beq.n	800362a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003612:	2b04      	cmp	r3, #4
 8003614:	d107      	bne.n	8003626 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003624:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e02b      	b.n	8003682 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800362a:	88fb      	ldrh	r3, [r7, #6]
 800362c:	2b01      	cmp	r3, #1
 800362e:	d105      	bne.n	800363c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003630:	893b      	ldrh	r3, [r7, #8]
 8003632:	b2da      	uxtb	r2, r3
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	611a      	str	r2, [r3, #16]
 800363a:	e021      	b.n	8003680 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800363c:	893b      	ldrh	r3, [r7, #8]
 800363e:	0a1b      	lsrs	r3, r3, #8
 8003640:	b29b      	uxth	r3, r3
 8003642:	b2da      	uxtb	r2, r3
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800364a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800364c:	6a39      	ldr	r1, [r7, #32]
 800364e:	68f8      	ldr	r0, [r7, #12]
 8003650:	f000 fa20 	bl	8003a94 <I2C_WaitOnTXEFlagUntilTimeout>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d00d      	beq.n	8003676 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800365e:	2b04      	cmp	r3, #4
 8003660:	d107      	bne.n	8003672 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003670:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e005      	b.n	8003682 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003676:	893b      	ldrh	r3, [r7, #8]
 8003678:	b2da      	uxtb	r2, r3
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	3718      	adds	r7, #24
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	00010002 	.word	0x00010002

08003690 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b088      	sub	sp, #32
 8003694:	af02      	add	r7, sp, #8
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	4608      	mov	r0, r1
 800369a:	4611      	mov	r1, r2
 800369c:	461a      	mov	r2, r3
 800369e:	4603      	mov	r3, r0
 80036a0:	817b      	strh	r3, [r7, #10]
 80036a2:	460b      	mov	r3, r1
 80036a4:	813b      	strh	r3, [r7, #8]
 80036a6:	4613      	mov	r3, r2
 80036a8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80036b8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80036c8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036cc:	9300      	str	r3, [sp, #0]
 80036ce:	6a3b      	ldr	r3, [r7, #32]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80036d6:	68f8      	ldr	r0, [r7, #12]
 80036d8:	f000 f8c2 	bl	8003860 <I2C_WaitOnFlagUntilTimeout>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d00d      	beq.n	80036fe <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036f0:	d103      	bne.n	80036fa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036f8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e0aa      	b.n	8003854 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80036fe:	897b      	ldrh	r3, [r7, #10]
 8003700:	b2db      	uxtb	r3, r3
 8003702:	461a      	mov	r2, r3
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800370c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800370e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003710:	6a3a      	ldr	r2, [r7, #32]
 8003712:	4952      	ldr	r1, [pc, #328]	@ (800385c <I2C_RequestMemoryRead+0x1cc>)
 8003714:	68f8      	ldr	r0, [r7, #12]
 8003716:	f000 f91d 	bl	8003954 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d001      	beq.n	8003724 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e097      	b.n	8003854 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003724:	2300      	movs	r3, #0
 8003726:	617b      	str	r3, [r7, #20]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	695b      	ldr	r3, [r3, #20]
 800372e:	617b      	str	r3, [r7, #20]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	699b      	ldr	r3, [r3, #24]
 8003736:	617b      	str	r3, [r7, #20]
 8003738:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800373a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800373c:	6a39      	ldr	r1, [r7, #32]
 800373e:	68f8      	ldr	r0, [r7, #12]
 8003740:	f000 f9a8 	bl	8003a94 <I2C_WaitOnTXEFlagUntilTimeout>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d00d      	beq.n	8003766 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800374e:	2b04      	cmp	r3, #4
 8003750:	d107      	bne.n	8003762 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003760:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e076      	b.n	8003854 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003766:	88fb      	ldrh	r3, [r7, #6]
 8003768:	2b01      	cmp	r3, #1
 800376a:	d105      	bne.n	8003778 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800376c:	893b      	ldrh	r3, [r7, #8]
 800376e:	b2da      	uxtb	r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	611a      	str	r2, [r3, #16]
 8003776:	e021      	b.n	80037bc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003778:	893b      	ldrh	r3, [r7, #8]
 800377a:	0a1b      	lsrs	r3, r3, #8
 800377c:	b29b      	uxth	r3, r3
 800377e:	b2da      	uxtb	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003786:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003788:	6a39      	ldr	r1, [r7, #32]
 800378a:	68f8      	ldr	r0, [r7, #12]
 800378c:	f000 f982 	bl	8003a94 <I2C_WaitOnTXEFlagUntilTimeout>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d00d      	beq.n	80037b2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800379a:	2b04      	cmp	r3, #4
 800379c:	d107      	bne.n	80037ae <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037ac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e050      	b.n	8003854 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80037b2:	893b      	ldrh	r3, [r7, #8]
 80037b4:	b2da      	uxtb	r2, r3
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037be:	6a39      	ldr	r1, [r7, #32]
 80037c0:	68f8      	ldr	r0, [r7, #12]
 80037c2:	f000 f967 	bl	8003a94 <I2C_WaitOnTXEFlagUntilTimeout>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d00d      	beq.n	80037e8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d0:	2b04      	cmp	r3, #4
 80037d2:	d107      	bne.n	80037e4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037e2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e035      	b.n	8003854 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80037f6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037fa:	9300      	str	r3, [sp, #0]
 80037fc:	6a3b      	ldr	r3, [r7, #32]
 80037fe:	2200      	movs	r2, #0
 8003800:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003804:	68f8      	ldr	r0, [r7, #12]
 8003806:	f000 f82b 	bl	8003860 <I2C_WaitOnFlagUntilTimeout>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d00d      	beq.n	800382c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800381a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800381e:	d103      	bne.n	8003828 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003826:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003828:	2303      	movs	r3, #3
 800382a:	e013      	b.n	8003854 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800382c:	897b      	ldrh	r3, [r7, #10]
 800382e:	b2db      	uxtb	r3, r3
 8003830:	f043 0301 	orr.w	r3, r3, #1
 8003834:	b2da      	uxtb	r2, r3
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800383c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800383e:	6a3a      	ldr	r2, [r7, #32]
 8003840:	4906      	ldr	r1, [pc, #24]	@ (800385c <I2C_RequestMemoryRead+0x1cc>)
 8003842:	68f8      	ldr	r0, [r7, #12]
 8003844:	f000 f886 	bl	8003954 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d001      	beq.n	8003852 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e000      	b.n	8003854 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003852:	2300      	movs	r3, #0
}
 8003854:	4618      	mov	r0, r3
 8003856:	3718      	adds	r7, #24
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	00010002 	.word	0x00010002

08003860 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	603b      	str	r3, [r7, #0]
 800386c:	4613      	mov	r3, r2
 800386e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003870:	e048      	b.n	8003904 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003878:	d044      	beq.n	8003904 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800387a:	f7fe fc2d 	bl	80020d8 <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	683a      	ldr	r2, [r7, #0]
 8003886:	429a      	cmp	r2, r3
 8003888:	d302      	bcc.n	8003890 <I2C_WaitOnFlagUntilTimeout+0x30>
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d139      	bne.n	8003904 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	0c1b      	lsrs	r3, r3, #16
 8003894:	b2db      	uxtb	r3, r3
 8003896:	2b01      	cmp	r3, #1
 8003898:	d10d      	bne.n	80038b6 <I2C_WaitOnFlagUntilTimeout+0x56>
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	695b      	ldr	r3, [r3, #20]
 80038a0:	43da      	mvns	r2, r3
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	4013      	ands	r3, r2
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	bf0c      	ite	eq
 80038ac:	2301      	moveq	r3, #1
 80038ae:	2300      	movne	r3, #0
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	461a      	mov	r2, r3
 80038b4:	e00c      	b.n	80038d0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	699b      	ldr	r3, [r3, #24]
 80038bc:	43da      	mvns	r2, r3
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	4013      	ands	r3, r2
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	bf0c      	ite	eq
 80038c8:	2301      	moveq	r3, #1
 80038ca:	2300      	movne	r3, #0
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	461a      	mov	r2, r3
 80038d0:	79fb      	ldrb	r3, [r7, #7]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d116      	bne.n	8003904 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2200      	movs	r2, #0
 80038da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2220      	movs	r2, #32
 80038e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038f0:	f043 0220 	orr.w	r2, r3, #32
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e023      	b.n	800394c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	0c1b      	lsrs	r3, r3, #16
 8003908:	b2db      	uxtb	r3, r3
 800390a:	2b01      	cmp	r3, #1
 800390c:	d10d      	bne.n	800392a <I2C_WaitOnFlagUntilTimeout+0xca>
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	695b      	ldr	r3, [r3, #20]
 8003914:	43da      	mvns	r2, r3
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	4013      	ands	r3, r2
 800391a:	b29b      	uxth	r3, r3
 800391c:	2b00      	cmp	r3, #0
 800391e:	bf0c      	ite	eq
 8003920:	2301      	moveq	r3, #1
 8003922:	2300      	movne	r3, #0
 8003924:	b2db      	uxtb	r3, r3
 8003926:	461a      	mov	r2, r3
 8003928:	e00c      	b.n	8003944 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	699b      	ldr	r3, [r3, #24]
 8003930:	43da      	mvns	r2, r3
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	4013      	ands	r3, r2
 8003936:	b29b      	uxth	r3, r3
 8003938:	2b00      	cmp	r3, #0
 800393a:	bf0c      	ite	eq
 800393c:	2301      	moveq	r3, #1
 800393e:	2300      	movne	r3, #0
 8003940:	b2db      	uxtb	r3, r3
 8003942:	461a      	mov	r2, r3
 8003944:	79fb      	ldrb	r3, [r7, #7]
 8003946:	429a      	cmp	r2, r3
 8003948:	d093      	beq.n	8003872 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800394a:	2300      	movs	r3, #0
}
 800394c:	4618      	mov	r0, r3
 800394e:	3710      	adds	r7, #16
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	60b9      	str	r1, [r7, #8]
 800395e:	607a      	str	r2, [r7, #4]
 8003960:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003962:	e071      	b.n	8003a48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800396e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003972:	d123      	bne.n	80039bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003982:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800398c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2200      	movs	r2, #0
 8003992:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2220      	movs	r2, #32
 8003998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a8:	f043 0204 	orr.w	r2, r3, #4
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2200      	movs	r2, #0
 80039b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e067      	b.n	8003a8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039c2:	d041      	beq.n	8003a48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039c4:	f7fe fb88 	bl	80020d8 <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d302      	bcc.n	80039da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d136      	bne.n	8003a48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	0c1b      	lsrs	r3, r3, #16
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d10c      	bne.n	80039fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	695b      	ldr	r3, [r3, #20]
 80039ea:	43da      	mvns	r2, r3
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	4013      	ands	r3, r2
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	bf14      	ite	ne
 80039f6:	2301      	movne	r3, #1
 80039f8:	2300      	moveq	r3, #0
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	e00b      	b.n	8003a16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	699b      	ldr	r3, [r3, #24]
 8003a04:	43da      	mvns	r2, r3
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	4013      	ands	r3, r2
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	bf14      	ite	ne
 8003a10:	2301      	movne	r3, #1
 8003a12:	2300      	moveq	r3, #0
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d016      	beq.n	8003a48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2220      	movs	r2, #32
 8003a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a34:	f043 0220 	orr.w	r2, r3, #32
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e021      	b.n	8003a8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	0c1b      	lsrs	r3, r3, #16
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d10c      	bne.n	8003a6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	695b      	ldr	r3, [r3, #20]
 8003a58:	43da      	mvns	r2, r3
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	bf14      	ite	ne
 8003a64:	2301      	movne	r3, #1
 8003a66:	2300      	moveq	r3, #0
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	e00b      	b.n	8003a84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	699b      	ldr	r3, [r3, #24]
 8003a72:	43da      	mvns	r2, r3
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	4013      	ands	r3, r2
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	bf14      	ite	ne
 8003a7e:	2301      	movne	r3, #1
 8003a80:	2300      	moveq	r3, #0
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	f47f af6d 	bne.w	8003964 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3710      	adds	r7, #16
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003aa0:	e034      	b.n	8003b0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003aa2:	68f8      	ldr	r0, [r7, #12]
 8003aa4:	f000 f8e3 	bl	8003c6e <I2C_IsAcknowledgeFailed>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d001      	beq.n	8003ab2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e034      	b.n	8003b1c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab8:	d028      	beq.n	8003b0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aba:	f7fe fb0d 	bl	80020d8 <HAL_GetTick>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	68ba      	ldr	r2, [r7, #8]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d302      	bcc.n	8003ad0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d11d      	bne.n	8003b0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	695b      	ldr	r3, [r3, #20]
 8003ad6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ada:	2b80      	cmp	r3, #128	@ 0x80
 8003adc:	d016      	beq.n	8003b0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2220      	movs	r2, #32
 8003ae8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2200      	movs	r2, #0
 8003af0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af8:	f043 0220 	orr.w	r2, r3, #32
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e007      	b.n	8003b1c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	695b      	ldr	r3, [r3, #20]
 8003b12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b16:	2b80      	cmp	r3, #128	@ 0x80
 8003b18:	d1c3      	bne.n	8003aa2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003b1a:	2300      	movs	r3, #0
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3710      	adds	r7, #16
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b30:	e034      	b.n	8003b9c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b32:	68f8      	ldr	r0, [r7, #12]
 8003b34:	f000 f89b 	bl	8003c6e <I2C_IsAcknowledgeFailed>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d001      	beq.n	8003b42 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e034      	b.n	8003bac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b48:	d028      	beq.n	8003b9c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b4a:	f7fe fac5 	bl	80020d8 <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	68ba      	ldr	r2, [r7, #8]
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d302      	bcc.n	8003b60 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d11d      	bne.n	8003b9c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	695b      	ldr	r3, [r3, #20]
 8003b66:	f003 0304 	and.w	r3, r3, #4
 8003b6a:	2b04      	cmp	r3, #4
 8003b6c:	d016      	beq.n	8003b9c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2200      	movs	r2, #0
 8003b72:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2220      	movs	r2, #32
 8003b78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b88:	f043 0220 	orr.w	r2, r3, #32
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e007      	b.n	8003bac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	695b      	ldr	r3, [r3, #20]
 8003ba2:	f003 0304 	and.w	r3, r3, #4
 8003ba6:	2b04      	cmp	r3, #4
 8003ba8:	d1c3      	bne.n	8003b32 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003baa:	2300      	movs	r3, #0
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3710      	adds	r7, #16
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003bc0:	e049      	b.n	8003c56 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	695b      	ldr	r3, [r3, #20]
 8003bc8:	f003 0310 	and.w	r3, r3, #16
 8003bcc:	2b10      	cmp	r3, #16
 8003bce:	d119      	bne.n	8003c04 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f06f 0210 	mvn.w	r2, #16
 8003bd8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2220      	movs	r2, #32
 8003be4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e030      	b.n	8003c66 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c04:	f7fe fa68 	bl	80020d8 <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	68ba      	ldr	r2, [r7, #8]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d302      	bcc.n	8003c1a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d11d      	bne.n	8003c56 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	695b      	ldr	r3, [r3, #20]
 8003c20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c24:	2b40      	cmp	r3, #64	@ 0x40
 8003c26:	d016      	beq.n	8003c56 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2220      	movs	r2, #32
 8003c32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c42:	f043 0220 	orr.w	r2, r3, #32
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e007      	b.n	8003c66 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	695b      	ldr	r3, [r3, #20]
 8003c5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c60:	2b40      	cmp	r3, #64	@ 0x40
 8003c62:	d1ae      	bne.n	8003bc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3710      	adds	r7, #16
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}

08003c6e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003c6e:	b480      	push	{r7}
 8003c70:	b083      	sub	sp, #12
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	695b      	ldr	r3, [r3, #20]
 8003c7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c84:	d11b      	bne.n	8003cbe <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003c8e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2220      	movs	r2, #32
 8003c9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003caa:	f043 0204 	orr.w	r2, r3, #4
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e000      	b.n	8003cc0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003cbe:	2300      	movs	r3, #0
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bc80      	pop	{r7}
 8003cc8:	4770      	bx	lr
	...

08003ccc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b086      	sub	sp, #24
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d101      	bne.n	8003cde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e272      	b.n	80041c4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0301 	and.w	r3, r3, #1
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	f000 8087 	beq.w	8003dfa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003cec:	4b92      	ldr	r3, [pc, #584]	@ (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	f003 030c 	and.w	r3, r3, #12
 8003cf4:	2b04      	cmp	r3, #4
 8003cf6:	d00c      	beq.n	8003d12 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003cf8:	4b8f      	ldr	r3, [pc, #572]	@ (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	f003 030c 	and.w	r3, r3, #12
 8003d00:	2b08      	cmp	r3, #8
 8003d02:	d112      	bne.n	8003d2a <HAL_RCC_OscConfig+0x5e>
 8003d04:	4b8c      	ldr	r3, [pc, #560]	@ (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d10:	d10b      	bne.n	8003d2a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d12:	4b89      	ldr	r3, [pc, #548]	@ (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d06c      	beq.n	8003df8 <HAL_RCC_OscConfig+0x12c>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d168      	bne.n	8003df8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e24c      	b.n	80041c4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d32:	d106      	bne.n	8003d42 <HAL_RCC_OscConfig+0x76>
 8003d34:	4b80      	ldr	r3, [pc, #512]	@ (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a7f      	ldr	r2, [pc, #508]	@ (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003d3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d3e:	6013      	str	r3, [r2, #0]
 8003d40:	e02e      	b.n	8003da0 <HAL_RCC_OscConfig+0xd4>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d10c      	bne.n	8003d64 <HAL_RCC_OscConfig+0x98>
 8003d4a:	4b7b      	ldr	r3, [pc, #492]	@ (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a7a      	ldr	r2, [pc, #488]	@ (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003d50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d54:	6013      	str	r3, [r2, #0]
 8003d56:	4b78      	ldr	r3, [pc, #480]	@ (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a77      	ldr	r2, [pc, #476]	@ (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003d5c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d60:	6013      	str	r3, [r2, #0]
 8003d62:	e01d      	b.n	8003da0 <HAL_RCC_OscConfig+0xd4>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d6c:	d10c      	bne.n	8003d88 <HAL_RCC_OscConfig+0xbc>
 8003d6e:	4b72      	ldr	r3, [pc, #456]	@ (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a71      	ldr	r2, [pc, #452]	@ (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003d74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d78:	6013      	str	r3, [r2, #0]
 8003d7a:	4b6f      	ldr	r3, [pc, #444]	@ (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a6e      	ldr	r2, [pc, #440]	@ (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003d80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d84:	6013      	str	r3, [r2, #0]
 8003d86:	e00b      	b.n	8003da0 <HAL_RCC_OscConfig+0xd4>
 8003d88:	4b6b      	ldr	r3, [pc, #428]	@ (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a6a      	ldr	r2, [pc, #424]	@ (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003d8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d92:	6013      	str	r3, [r2, #0]
 8003d94:	4b68      	ldr	r3, [pc, #416]	@ (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a67      	ldr	r2, [pc, #412]	@ (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003d9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d9e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d013      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003da8:	f7fe f996 	bl	80020d8 <HAL_GetTick>
 8003dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dae:	e008      	b.n	8003dc2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003db0:	f7fe f992 	bl	80020d8 <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	2b64      	cmp	r3, #100	@ 0x64
 8003dbc:	d901      	bls.n	8003dc2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e200      	b.n	80041c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dc2:	4b5d      	ldr	r3, [pc, #372]	@ (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d0f0      	beq.n	8003db0 <HAL_RCC_OscConfig+0xe4>
 8003dce:	e014      	b.n	8003dfa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dd0:	f7fe f982 	bl	80020d8 <HAL_GetTick>
 8003dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dd6:	e008      	b.n	8003dea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dd8:	f7fe f97e 	bl	80020d8 <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	2b64      	cmp	r3, #100	@ 0x64
 8003de4:	d901      	bls.n	8003dea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e1ec      	b.n	80041c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dea:	4b53      	ldr	r3, [pc, #332]	@ (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d1f0      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x10c>
 8003df6:	e000      	b.n	8003dfa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003df8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0302 	and.w	r3, r3, #2
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d063      	beq.n	8003ece <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e06:	4b4c      	ldr	r3, [pc, #304]	@ (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	f003 030c 	and.w	r3, r3, #12
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d00b      	beq.n	8003e2a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003e12:	4b49      	ldr	r3, [pc, #292]	@ (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	f003 030c 	and.w	r3, r3, #12
 8003e1a:	2b08      	cmp	r3, #8
 8003e1c:	d11c      	bne.n	8003e58 <HAL_RCC_OscConfig+0x18c>
 8003e1e:	4b46      	ldr	r3, [pc, #280]	@ (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d116      	bne.n	8003e58 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e2a:	4b43      	ldr	r3, [pc, #268]	@ (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0302 	and.w	r3, r3, #2
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d005      	beq.n	8003e42 <HAL_RCC_OscConfig+0x176>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d001      	beq.n	8003e42 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e1c0      	b.n	80041c4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e42:	4b3d      	ldr	r3, [pc, #244]	@ (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	695b      	ldr	r3, [r3, #20]
 8003e4e:	00db      	lsls	r3, r3, #3
 8003e50:	4939      	ldr	r1, [pc, #228]	@ (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e56:	e03a      	b.n	8003ece <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	691b      	ldr	r3, [r3, #16]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d020      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e60:	4b36      	ldr	r3, [pc, #216]	@ (8003f3c <HAL_RCC_OscConfig+0x270>)
 8003e62:	2201      	movs	r2, #1
 8003e64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e66:	f7fe f937 	bl	80020d8 <HAL_GetTick>
 8003e6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e6c:	e008      	b.n	8003e80 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e6e:	f7fe f933 	bl	80020d8 <HAL_GetTick>
 8003e72:	4602      	mov	r2, r0
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	d901      	bls.n	8003e80 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e1a1      	b.n	80041c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e80:	4b2d      	ldr	r3, [pc, #180]	@ (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0302 	and.w	r3, r3, #2
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d0f0      	beq.n	8003e6e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e8c:	4b2a      	ldr	r3, [pc, #168]	@ (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	695b      	ldr	r3, [r3, #20]
 8003e98:	00db      	lsls	r3, r3, #3
 8003e9a:	4927      	ldr	r1, [pc, #156]	@ (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	600b      	str	r3, [r1, #0]
 8003ea0:	e015      	b.n	8003ece <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ea2:	4b26      	ldr	r3, [pc, #152]	@ (8003f3c <HAL_RCC_OscConfig+0x270>)
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ea8:	f7fe f916 	bl	80020d8 <HAL_GetTick>
 8003eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eae:	e008      	b.n	8003ec2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003eb0:	f7fe f912 	bl	80020d8 <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d901      	bls.n	8003ec2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e180      	b.n	80041c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ec2:	4b1d      	ldr	r3, [pc, #116]	@ (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0302 	and.w	r3, r3, #2
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d1f0      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0308 	and.w	r3, r3, #8
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d03a      	beq.n	8003f50 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	699b      	ldr	r3, [r3, #24]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d019      	beq.n	8003f16 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ee2:	4b17      	ldr	r3, [pc, #92]	@ (8003f40 <HAL_RCC_OscConfig+0x274>)
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ee8:	f7fe f8f6 	bl	80020d8 <HAL_GetTick>
 8003eec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003eee:	e008      	b.n	8003f02 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ef0:	f7fe f8f2 	bl	80020d8 <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d901      	bls.n	8003f02 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e160      	b.n	80041c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f02:	4b0d      	ldr	r3, [pc, #52]	@ (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f06:	f003 0302 	and.w	r3, r3, #2
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d0f0      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003f0e:	2001      	movs	r0, #1
 8003f10:	f000 fafe 	bl	8004510 <RCC_Delay>
 8003f14:	e01c      	b.n	8003f50 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f16:	4b0a      	ldr	r3, [pc, #40]	@ (8003f40 <HAL_RCC_OscConfig+0x274>)
 8003f18:	2200      	movs	r2, #0
 8003f1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f1c:	f7fe f8dc 	bl	80020d8 <HAL_GetTick>
 8003f20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f22:	e00f      	b.n	8003f44 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f24:	f7fe f8d8 	bl	80020d8 <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	d908      	bls.n	8003f44 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	e146      	b.n	80041c4 <HAL_RCC_OscConfig+0x4f8>
 8003f36:	bf00      	nop
 8003f38:	40021000 	.word	0x40021000
 8003f3c:	42420000 	.word	0x42420000
 8003f40:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f44:	4b92      	ldr	r3, [pc, #584]	@ (8004190 <HAL_RCC_OscConfig+0x4c4>)
 8003f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f48:	f003 0302 	and.w	r3, r3, #2
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d1e9      	bne.n	8003f24 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0304 	and.w	r3, r3, #4
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	f000 80a6 	beq.w	80040aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f62:	4b8b      	ldr	r3, [pc, #556]	@ (8004190 <HAL_RCC_OscConfig+0x4c4>)
 8003f64:	69db      	ldr	r3, [r3, #28]
 8003f66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d10d      	bne.n	8003f8a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f6e:	4b88      	ldr	r3, [pc, #544]	@ (8004190 <HAL_RCC_OscConfig+0x4c4>)
 8003f70:	69db      	ldr	r3, [r3, #28]
 8003f72:	4a87      	ldr	r2, [pc, #540]	@ (8004190 <HAL_RCC_OscConfig+0x4c4>)
 8003f74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f78:	61d3      	str	r3, [r2, #28]
 8003f7a:	4b85      	ldr	r3, [pc, #532]	@ (8004190 <HAL_RCC_OscConfig+0x4c4>)
 8003f7c:	69db      	ldr	r3, [r3, #28]
 8003f7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f82:	60bb      	str	r3, [r7, #8]
 8003f84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f86:	2301      	movs	r3, #1
 8003f88:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f8a:	4b82      	ldr	r3, [pc, #520]	@ (8004194 <HAL_RCC_OscConfig+0x4c8>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d118      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f96:	4b7f      	ldr	r3, [pc, #508]	@ (8004194 <HAL_RCC_OscConfig+0x4c8>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a7e      	ldr	r2, [pc, #504]	@ (8004194 <HAL_RCC_OscConfig+0x4c8>)
 8003f9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fa0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fa2:	f7fe f899 	bl	80020d8 <HAL_GetTick>
 8003fa6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fa8:	e008      	b.n	8003fbc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003faa:	f7fe f895 	bl	80020d8 <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	2b64      	cmp	r3, #100	@ 0x64
 8003fb6:	d901      	bls.n	8003fbc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e103      	b.n	80041c4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fbc:	4b75      	ldr	r3, [pc, #468]	@ (8004194 <HAL_RCC_OscConfig+0x4c8>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d0f0      	beq.n	8003faa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d106      	bne.n	8003fde <HAL_RCC_OscConfig+0x312>
 8003fd0:	4b6f      	ldr	r3, [pc, #444]	@ (8004190 <HAL_RCC_OscConfig+0x4c4>)
 8003fd2:	6a1b      	ldr	r3, [r3, #32]
 8003fd4:	4a6e      	ldr	r2, [pc, #440]	@ (8004190 <HAL_RCC_OscConfig+0x4c4>)
 8003fd6:	f043 0301 	orr.w	r3, r3, #1
 8003fda:	6213      	str	r3, [r2, #32]
 8003fdc:	e02d      	b.n	800403a <HAL_RCC_OscConfig+0x36e>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d10c      	bne.n	8004000 <HAL_RCC_OscConfig+0x334>
 8003fe6:	4b6a      	ldr	r3, [pc, #424]	@ (8004190 <HAL_RCC_OscConfig+0x4c4>)
 8003fe8:	6a1b      	ldr	r3, [r3, #32]
 8003fea:	4a69      	ldr	r2, [pc, #420]	@ (8004190 <HAL_RCC_OscConfig+0x4c4>)
 8003fec:	f023 0301 	bic.w	r3, r3, #1
 8003ff0:	6213      	str	r3, [r2, #32]
 8003ff2:	4b67      	ldr	r3, [pc, #412]	@ (8004190 <HAL_RCC_OscConfig+0x4c4>)
 8003ff4:	6a1b      	ldr	r3, [r3, #32]
 8003ff6:	4a66      	ldr	r2, [pc, #408]	@ (8004190 <HAL_RCC_OscConfig+0x4c4>)
 8003ff8:	f023 0304 	bic.w	r3, r3, #4
 8003ffc:	6213      	str	r3, [r2, #32]
 8003ffe:	e01c      	b.n	800403a <HAL_RCC_OscConfig+0x36e>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	2b05      	cmp	r3, #5
 8004006:	d10c      	bne.n	8004022 <HAL_RCC_OscConfig+0x356>
 8004008:	4b61      	ldr	r3, [pc, #388]	@ (8004190 <HAL_RCC_OscConfig+0x4c4>)
 800400a:	6a1b      	ldr	r3, [r3, #32]
 800400c:	4a60      	ldr	r2, [pc, #384]	@ (8004190 <HAL_RCC_OscConfig+0x4c4>)
 800400e:	f043 0304 	orr.w	r3, r3, #4
 8004012:	6213      	str	r3, [r2, #32]
 8004014:	4b5e      	ldr	r3, [pc, #376]	@ (8004190 <HAL_RCC_OscConfig+0x4c4>)
 8004016:	6a1b      	ldr	r3, [r3, #32]
 8004018:	4a5d      	ldr	r2, [pc, #372]	@ (8004190 <HAL_RCC_OscConfig+0x4c4>)
 800401a:	f043 0301 	orr.w	r3, r3, #1
 800401e:	6213      	str	r3, [r2, #32]
 8004020:	e00b      	b.n	800403a <HAL_RCC_OscConfig+0x36e>
 8004022:	4b5b      	ldr	r3, [pc, #364]	@ (8004190 <HAL_RCC_OscConfig+0x4c4>)
 8004024:	6a1b      	ldr	r3, [r3, #32]
 8004026:	4a5a      	ldr	r2, [pc, #360]	@ (8004190 <HAL_RCC_OscConfig+0x4c4>)
 8004028:	f023 0301 	bic.w	r3, r3, #1
 800402c:	6213      	str	r3, [r2, #32]
 800402e:	4b58      	ldr	r3, [pc, #352]	@ (8004190 <HAL_RCC_OscConfig+0x4c4>)
 8004030:	6a1b      	ldr	r3, [r3, #32]
 8004032:	4a57      	ldr	r2, [pc, #348]	@ (8004190 <HAL_RCC_OscConfig+0x4c4>)
 8004034:	f023 0304 	bic.w	r3, r3, #4
 8004038:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d015      	beq.n	800406e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004042:	f7fe f849 	bl	80020d8 <HAL_GetTick>
 8004046:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004048:	e00a      	b.n	8004060 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800404a:	f7fe f845 	bl	80020d8 <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004058:	4293      	cmp	r3, r2
 800405a:	d901      	bls.n	8004060 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e0b1      	b.n	80041c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004060:	4b4b      	ldr	r3, [pc, #300]	@ (8004190 <HAL_RCC_OscConfig+0x4c4>)
 8004062:	6a1b      	ldr	r3, [r3, #32]
 8004064:	f003 0302 	and.w	r3, r3, #2
 8004068:	2b00      	cmp	r3, #0
 800406a:	d0ee      	beq.n	800404a <HAL_RCC_OscConfig+0x37e>
 800406c:	e014      	b.n	8004098 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800406e:	f7fe f833 	bl	80020d8 <HAL_GetTick>
 8004072:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004074:	e00a      	b.n	800408c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004076:	f7fe f82f 	bl	80020d8 <HAL_GetTick>
 800407a:	4602      	mov	r2, r0
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004084:	4293      	cmp	r3, r2
 8004086:	d901      	bls.n	800408c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004088:	2303      	movs	r3, #3
 800408a:	e09b      	b.n	80041c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800408c:	4b40      	ldr	r3, [pc, #256]	@ (8004190 <HAL_RCC_OscConfig+0x4c4>)
 800408e:	6a1b      	ldr	r3, [r3, #32]
 8004090:	f003 0302 	and.w	r3, r3, #2
 8004094:	2b00      	cmp	r3, #0
 8004096:	d1ee      	bne.n	8004076 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004098:	7dfb      	ldrb	r3, [r7, #23]
 800409a:	2b01      	cmp	r3, #1
 800409c:	d105      	bne.n	80040aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800409e:	4b3c      	ldr	r3, [pc, #240]	@ (8004190 <HAL_RCC_OscConfig+0x4c4>)
 80040a0:	69db      	ldr	r3, [r3, #28]
 80040a2:	4a3b      	ldr	r2, [pc, #236]	@ (8004190 <HAL_RCC_OscConfig+0x4c4>)
 80040a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040a8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	69db      	ldr	r3, [r3, #28]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	f000 8087 	beq.w	80041c2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040b4:	4b36      	ldr	r3, [pc, #216]	@ (8004190 <HAL_RCC_OscConfig+0x4c4>)
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f003 030c 	and.w	r3, r3, #12
 80040bc:	2b08      	cmp	r3, #8
 80040be:	d061      	beq.n	8004184 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	69db      	ldr	r3, [r3, #28]
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d146      	bne.n	8004156 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040c8:	4b33      	ldr	r3, [pc, #204]	@ (8004198 <HAL_RCC_OscConfig+0x4cc>)
 80040ca:	2200      	movs	r2, #0
 80040cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ce:	f7fe f803 	bl	80020d8 <HAL_GetTick>
 80040d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040d4:	e008      	b.n	80040e8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040d6:	f7fd ffff 	bl	80020d8 <HAL_GetTick>
 80040da:	4602      	mov	r2, r0
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d901      	bls.n	80040e8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e06d      	b.n	80041c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040e8:	4b29      	ldr	r3, [pc, #164]	@ (8004190 <HAL_RCC_OscConfig+0x4c4>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d1f0      	bne.n	80040d6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6a1b      	ldr	r3, [r3, #32]
 80040f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040fc:	d108      	bne.n	8004110 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80040fe:	4b24      	ldr	r3, [pc, #144]	@ (8004190 <HAL_RCC_OscConfig+0x4c4>)
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	4921      	ldr	r1, [pc, #132]	@ (8004190 <HAL_RCC_OscConfig+0x4c4>)
 800410c:	4313      	orrs	r3, r2
 800410e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004110:	4b1f      	ldr	r3, [pc, #124]	@ (8004190 <HAL_RCC_OscConfig+0x4c4>)
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6a19      	ldr	r1, [r3, #32]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004120:	430b      	orrs	r3, r1
 8004122:	491b      	ldr	r1, [pc, #108]	@ (8004190 <HAL_RCC_OscConfig+0x4c4>)
 8004124:	4313      	orrs	r3, r2
 8004126:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004128:	4b1b      	ldr	r3, [pc, #108]	@ (8004198 <HAL_RCC_OscConfig+0x4cc>)
 800412a:	2201      	movs	r2, #1
 800412c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800412e:	f7fd ffd3 	bl	80020d8 <HAL_GetTick>
 8004132:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004134:	e008      	b.n	8004148 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004136:	f7fd ffcf 	bl	80020d8 <HAL_GetTick>
 800413a:	4602      	mov	r2, r0
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	2b02      	cmp	r3, #2
 8004142:	d901      	bls.n	8004148 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004144:	2303      	movs	r3, #3
 8004146:	e03d      	b.n	80041c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004148:	4b11      	ldr	r3, [pc, #68]	@ (8004190 <HAL_RCC_OscConfig+0x4c4>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d0f0      	beq.n	8004136 <HAL_RCC_OscConfig+0x46a>
 8004154:	e035      	b.n	80041c2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004156:	4b10      	ldr	r3, [pc, #64]	@ (8004198 <HAL_RCC_OscConfig+0x4cc>)
 8004158:	2200      	movs	r2, #0
 800415a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800415c:	f7fd ffbc 	bl	80020d8 <HAL_GetTick>
 8004160:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004162:	e008      	b.n	8004176 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004164:	f7fd ffb8 	bl	80020d8 <HAL_GetTick>
 8004168:	4602      	mov	r2, r0
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	2b02      	cmp	r3, #2
 8004170:	d901      	bls.n	8004176 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e026      	b.n	80041c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004176:	4b06      	ldr	r3, [pc, #24]	@ (8004190 <HAL_RCC_OscConfig+0x4c4>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d1f0      	bne.n	8004164 <HAL_RCC_OscConfig+0x498>
 8004182:	e01e      	b.n	80041c2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	69db      	ldr	r3, [r3, #28]
 8004188:	2b01      	cmp	r3, #1
 800418a:	d107      	bne.n	800419c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e019      	b.n	80041c4 <HAL_RCC_OscConfig+0x4f8>
 8004190:	40021000 	.word	0x40021000
 8004194:	40007000 	.word	0x40007000
 8004198:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800419c:	4b0b      	ldr	r3, [pc, #44]	@ (80041cc <HAL_RCC_OscConfig+0x500>)
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6a1b      	ldr	r3, [r3, #32]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d106      	bne.n	80041be <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d001      	beq.n	80041c2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e000      	b.n	80041c4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80041c2:	2300      	movs	r3, #0
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3718      	adds	r7, #24
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	40021000 	.word	0x40021000

080041d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d101      	bne.n	80041e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e0d0      	b.n	8004386 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80041e4:	4b6a      	ldr	r3, [pc, #424]	@ (8004390 <HAL_RCC_ClockConfig+0x1c0>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0307 	and.w	r3, r3, #7
 80041ec:	683a      	ldr	r2, [r7, #0]
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d910      	bls.n	8004214 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041f2:	4b67      	ldr	r3, [pc, #412]	@ (8004390 <HAL_RCC_ClockConfig+0x1c0>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f023 0207 	bic.w	r2, r3, #7
 80041fa:	4965      	ldr	r1, [pc, #404]	@ (8004390 <HAL_RCC_ClockConfig+0x1c0>)
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	4313      	orrs	r3, r2
 8004200:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004202:	4b63      	ldr	r3, [pc, #396]	@ (8004390 <HAL_RCC_ClockConfig+0x1c0>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0307 	and.w	r3, r3, #7
 800420a:	683a      	ldr	r2, [r7, #0]
 800420c:	429a      	cmp	r2, r3
 800420e:	d001      	beq.n	8004214 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e0b8      	b.n	8004386 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0302 	and.w	r3, r3, #2
 800421c:	2b00      	cmp	r3, #0
 800421e:	d020      	beq.n	8004262 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0304 	and.w	r3, r3, #4
 8004228:	2b00      	cmp	r3, #0
 800422a:	d005      	beq.n	8004238 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800422c:	4b59      	ldr	r3, [pc, #356]	@ (8004394 <HAL_RCC_ClockConfig+0x1c4>)
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	4a58      	ldr	r2, [pc, #352]	@ (8004394 <HAL_RCC_ClockConfig+0x1c4>)
 8004232:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004236:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0308 	and.w	r3, r3, #8
 8004240:	2b00      	cmp	r3, #0
 8004242:	d005      	beq.n	8004250 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004244:	4b53      	ldr	r3, [pc, #332]	@ (8004394 <HAL_RCC_ClockConfig+0x1c4>)
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	4a52      	ldr	r2, [pc, #328]	@ (8004394 <HAL_RCC_ClockConfig+0x1c4>)
 800424a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800424e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004250:	4b50      	ldr	r3, [pc, #320]	@ (8004394 <HAL_RCC_ClockConfig+0x1c4>)
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	494d      	ldr	r1, [pc, #308]	@ (8004394 <HAL_RCC_ClockConfig+0x1c4>)
 800425e:	4313      	orrs	r3, r2
 8004260:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0301 	and.w	r3, r3, #1
 800426a:	2b00      	cmp	r3, #0
 800426c:	d040      	beq.n	80042f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	2b01      	cmp	r3, #1
 8004274:	d107      	bne.n	8004286 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004276:	4b47      	ldr	r3, [pc, #284]	@ (8004394 <HAL_RCC_ClockConfig+0x1c4>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d115      	bne.n	80042ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e07f      	b.n	8004386 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	2b02      	cmp	r3, #2
 800428c:	d107      	bne.n	800429e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800428e:	4b41      	ldr	r3, [pc, #260]	@ (8004394 <HAL_RCC_ClockConfig+0x1c4>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d109      	bne.n	80042ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e073      	b.n	8004386 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800429e:	4b3d      	ldr	r3, [pc, #244]	@ (8004394 <HAL_RCC_ClockConfig+0x1c4>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0302 	and.w	r3, r3, #2
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d101      	bne.n	80042ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e06b      	b.n	8004386 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042ae:	4b39      	ldr	r3, [pc, #228]	@ (8004394 <HAL_RCC_ClockConfig+0x1c4>)
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f023 0203 	bic.w	r2, r3, #3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	4936      	ldr	r1, [pc, #216]	@ (8004394 <HAL_RCC_ClockConfig+0x1c4>)
 80042bc:	4313      	orrs	r3, r2
 80042be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042c0:	f7fd ff0a 	bl	80020d8 <HAL_GetTick>
 80042c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042c6:	e00a      	b.n	80042de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042c8:	f7fd ff06 	bl	80020d8 <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d901      	bls.n	80042de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e053      	b.n	8004386 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042de:	4b2d      	ldr	r3, [pc, #180]	@ (8004394 <HAL_RCC_ClockConfig+0x1c4>)
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	f003 020c 	and.w	r2, r3, #12
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d1eb      	bne.n	80042c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042f0:	4b27      	ldr	r3, [pc, #156]	@ (8004390 <HAL_RCC_ClockConfig+0x1c0>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 0307 	and.w	r3, r3, #7
 80042f8:	683a      	ldr	r2, [r7, #0]
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d210      	bcs.n	8004320 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042fe:	4b24      	ldr	r3, [pc, #144]	@ (8004390 <HAL_RCC_ClockConfig+0x1c0>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f023 0207 	bic.w	r2, r3, #7
 8004306:	4922      	ldr	r1, [pc, #136]	@ (8004390 <HAL_RCC_ClockConfig+0x1c0>)
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	4313      	orrs	r3, r2
 800430c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800430e:	4b20      	ldr	r3, [pc, #128]	@ (8004390 <HAL_RCC_ClockConfig+0x1c0>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0307 	and.w	r3, r3, #7
 8004316:	683a      	ldr	r2, [r7, #0]
 8004318:	429a      	cmp	r2, r3
 800431a:	d001      	beq.n	8004320 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e032      	b.n	8004386 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0304 	and.w	r3, r3, #4
 8004328:	2b00      	cmp	r3, #0
 800432a:	d008      	beq.n	800433e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800432c:	4b19      	ldr	r3, [pc, #100]	@ (8004394 <HAL_RCC_ClockConfig+0x1c4>)
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	4916      	ldr	r1, [pc, #88]	@ (8004394 <HAL_RCC_ClockConfig+0x1c4>)
 800433a:	4313      	orrs	r3, r2
 800433c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0308 	and.w	r3, r3, #8
 8004346:	2b00      	cmp	r3, #0
 8004348:	d009      	beq.n	800435e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800434a:	4b12      	ldr	r3, [pc, #72]	@ (8004394 <HAL_RCC_ClockConfig+0x1c4>)
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	00db      	lsls	r3, r3, #3
 8004358:	490e      	ldr	r1, [pc, #56]	@ (8004394 <HAL_RCC_ClockConfig+0x1c4>)
 800435a:	4313      	orrs	r3, r2
 800435c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800435e:	f000 f821 	bl	80043a4 <HAL_RCC_GetSysClockFreq>
 8004362:	4602      	mov	r2, r0
 8004364:	4b0b      	ldr	r3, [pc, #44]	@ (8004394 <HAL_RCC_ClockConfig+0x1c4>)
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	091b      	lsrs	r3, r3, #4
 800436a:	f003 030f 	and.w	r3, r3, #15
 800436e:	490a      	ldr	r1, [pc, #40]	@ (8004398 <HAL_RCC_ClockConfig+0x1c8>)
 8004370:	5ccb      	ldrb	r3, [r1, r3]
 8004372:	fa22 f303 	lsr.w	r3, r2, r3
 8004376:	4a09      	ldr	r2, [pc, #36]	@ (800439c <HAL_RCC_ClockConfig+0x1cc>)
 8004378:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800437a:	4b09      	ldr	r3, [pc, #36]	@ (80043a0 <HAL_RCC_ClockConfig+0x1d0>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4618      	mov	r0, r3
 8004380:	f7fd fcfe 	bl	8001d80 <HAL_InitTick>

  return HAL_OK;
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	3710      	adds	r7, #16
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	40022000 	.word	0x40022000
 8004394:	40021000 	.word	0x40021000
 8004398:	0800bf34 	.word	0x0800bf34
 800439c:	20000000 	.word	0x20000000
 80043a0:	20000004 	.word	0x20000004

080043a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b087      	sub	sp, #28
 80043a8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80043aa:	2300      	movs	r3, #0
 80043ac:	60fb      	str	r3, [r7, #12]
 80043ae:	2300      	movs	r3, #0
 80043b0:	60bb      	str	r3, [r7, #8]
 80043b2:	2300      	movs	r3, #0
 80043b4:	617b      	str	r3, [r7, #20]
 80043b6:	2300      	movs	r3, #0
 80043b8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80043ba:	2300      	movs	r3, #0
 80043bc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80043be:	4b1e      	ldr	r3, [pc, #120]	@ (8004438 <HAL_RCC_GetSysClockFreq+0x94>)
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f003 030c 	and.w	r3, r3, #12
 80043ca:	2b04      	cmp	r3, #4
 80043cc:	d002      	beq.n	80043d4 <HAL_RCC_GetSysClockFreq+0x30>
 80043ce:	2b08      	cmp	r3, #8
 80043d0:	d003      	beq.n	80043da <HAL_RCC_GetSysClockFreq+0x36>
 80043d2:	e027      	b.n	8004424 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80043d4:	4b19      	ldr	r3, [pc, #100]	@ (800443c <HAL_RCC_GetSysClockFreq+0x98>)
 80043d6:	613b      	str	r3, [r7, #16]
      break;
 80043d8:	e027      	b.n	800442a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	0c9b      	lsrs	r3, r3, #18
 80043de:	f003 030f 	and.w	r3, r3, #15
 80043e2:	4a17      	ldr	r2, [pc, #92]	@ (8004440 <HAL_RCC_GetSysClockFreq+0x9c>)
 80043e4:	5cd3      	ldrb	r3, [r2, r3]
 80043e6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d010      	beq.n	8004414 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80043f2:	4b11      	ldr	r3, [pc, #68]	@ (8004438 <HAL_RCC_GetSysClockFreq+0x94>)
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	0c5b      	lsrs	r3, r3, #17
 80043f8:	f003 0301 	and.w	r3, r3, #1
 80043fc:	4a11      	ldr	r2, [pc, #68]	@ (8004444 <HAL_RCC_GetSysClockFreq+0xa0>)
 80043fe:	5cd3      	ldrb	r3, [r2, r3]
 8004400:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4a0d      	ldr	r2, [pc, #52]	@ (800443c <HAL_RCC_GetSysClockFreq+0x98>)
 8004406:	fb03 f202 	mul.w	r2, r3, r2
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004410:	617b      	str	r3, [r7, #20]
 8004412:	e004      	b.n	800441e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	4a0c      	ldr	r2, [pc, #48]	@ (8004448 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004418:	fb02 f303 	mul.w	r3, r2, r3
 800441c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	613b      	str	r3, [r7, #16]
      break;
 8004422:	e002      	b.n	800442a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004424:	4b05      	ldr	r3, [pc, #20]	@ (800443c <HAL_RCC_GetSysClockFreq+0x98>)
 8004426:	613b      	str	r3, [r7, #16]
      break;
 8004428:	bf00      	nop
    }
  }
  return sysclockfreq;
 800442a:	693b      	ldr	r3, [r7, #16]
}
 800442c:	4618      	mov	r0, r3
 800442e:	371c      	adds	r7, #28
 8004430:	46bd      	mov	sp, r7
 8004432:	bc80      	pop	{r7}
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	40021000 	.word	0x40021000
 800443c:	007a1200 	.word	0x007a1200
 8004440:	0800bf4c 	.word	0x0800bf4c
 8004444:	0800bf5c 	.word	0x0800bf5c
 8004448:	003d0900 	.word	0x003d0900

0800444c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800444c:	b480      	push	{r7}
 800444e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004450:	4b02      	ldr	r3, [pc, #8]	@ (800445c <HAL_RCC_GetHCLKFreq+0x10>)
 8004452:	681b      	ldr	r3, [r3, #0]
}
 8004454:	4618      	mov	r0, r3
 8004456:	46bd      	mov	sp, r7
 8004458:	bc80      	pop	{r7}
 800445a:	4770      	bx	lr
 800445c:	20000000 	.word	0x20000000

08004460 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004464:	f7ff fff2 	bl	800444c <HAL_RCC_GetHCLKFreq>
 8004468:	4602      	mov	r2, r0
 800446a:	4b05      	ldr	r3, [pc, #20]	@ (8004480 <HAL_RCC_GetPCLK1Freq+0x20>)
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	0a1b      	lsrs	r3, r3, #8
 8004470:	f003 0307 	and.w	r3, r3, #7
 8004474:	4903      	ldr	r1, [pc, #12]	@ (8004484 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004476:	5ccb      	ldrb	r3, [r1, r3]
 8004478:	fa22 f303 	lsr.w	r3, r2, r3
}
 800447c:	4618      	mov	r0, r3
 800447e:	bd80      	pop	{r7, pc}
 8004480:	40021000 	.word	0x40021000
 8004484:	0800bf44 	.word	0x0800bf44

08004488 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800448c:	f7ff ffde 	bl	800444c <HAL_RCC_GetHCLKFreq>
 8004490:	4602      	mov	r2, r0
 8004492:	4b05      	ldr	r3, [pc, #20]	@ (80044a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	0adb      	lsrs	r3, r3, #11
 8004498:	f003 0307 	and.w	r3, r3, #7
 800449c:	4903      	ldr	r1, [pc, #12]	@ (80044ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800449e:	5ccb      	ldrb	r3, [r1, r3]
 80044a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	40021000 	.word	0x40021000
 80044ac:	0800bf44 	.word	0x0800bf44

080044b0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	220f      	movs	r2, #15
 80044be:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80044c0:	4b11      	ldr	r3, [pc, #68]	@ (8004508 <HAL_RCC_GetClockConfig+0x58>)
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	f003 0203 	and.w	r2, r3, #3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80044cc:	4b0e      	ldr	r3, [pc, #56]	@ (8004508 <HAL_RCC_GetClockConfig+0x58>)
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80044d8:	4b0b      	ldr	r3, [pc, #44]	@ (8004508 <HAL_RCC_GetClockConfig+0x58>)
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80044e4:	4b08      	ldr	r3, [pc, #32]	@ (8004508 <HAL_RCC_GetClockConfig+0x58>)
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	08db      	lsrs	r3, r3, #3
 80044ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80044f2:	4b06      	ldr	r3, [pc, #24]	@ (800450c <HAL_RCC_GetClockConfig+0x5c>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0207 	and.w	r2, r3, #7
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80044fe:	bf00      	nop
 8004500:	370c      	adds	r7, #12
 8004502:	46bd      	mov	sp, r7
 8004504:	bc80      	pop	{r7}
 8004506:	4770      	bx	lr
 8004508:	40021000 	.word	0x40021000
 800450c:	40022000 	.word	0x40022000

08004510 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004510:	b480      	push	{r7}
 8004512:	b085      	sub	sp, #20
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004518:	4b0a      	ldr	r3, [pc, #40]	@ (8004544 <RCC_Delay+0x34>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a0a      	ldr	r2, [pc, #40]	@ (8004548 <RCC_Delay+0x38>)
 800451e:	fba2 2303 	umull	r2, r3, r2, r3
 8004522:	0a5b      	lsrs	r3, r3, #9
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	fb02 f303 	mul.w	r3, r2, r3
 800452a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800452c:	bf00      	nop
  }
  while (Delay --);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	1e5a      	subs	r2, r3, #1
 8004532:	60fa      	str	r2, [r7, #12]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d1f9      	bne.n	800452c <RCC_Delay+0x1c>
}
 8004538:	bf00      	nop
 800453a:	bf00      	nop
 800453c:	3714      	adds	r7, #20
 800453e:	46bd      	mov	sp, r7
 8004540:	bc80      	pop	{r7}
 8004542:	4770      	bx	lr
 8004544:	20000000 	.word	0x20000000
 8004548:	10624dd3 	.word	0x10624dd3

0800454c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b086      	sub	sp, #24
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004554:	2300      	movs	r3, #0
 8004556:	613b      	str	r3, [r7, #16]
 8004558:	2300      	movs	r3, #0
 800455a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0301 	and.w	r3, r3, #1
 8004564:	2b00      	cmp	r3, #0
 8004566:	d07d      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004568:	2300      	movs	r3, #0
 800456a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800456c:	4b4f      	ldr	r3, [pc, #316]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800456e:	69db      	ldr	r3, [r3, #28]
 8004570:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004574:	2b00      	cmp	r3, #0
 8004576:	d10d      	bne.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004578:	4b4c      	ldr	r3, [pc, #304]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800457a:	69db      	ldr	r3, [r3, #28]
 800457c:	4a4b      	ldr	r2, [pc, #300]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800457e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004582:	61d3      	str	r3, [r2, #28]
 8004584:	4b49      	ldr	r3, [pc, #292]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004586:	69db      	ldr	r3, [r3, #28]
 8004588:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800458c:	60bb      	str	r3, [r7, #8]
 800458e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004590:	2301      	movs	r3, #1
 8004592:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004594:	4b46      	ldr	r3, [pc, #280]	@ (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800459c:	2b00      	cmp	r3, #0
 800459e:	d118      	bne.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045a0:	4b43      	ldr	r3, [pc, #268]	@ (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a42      	ldr	r2, [pc, #264]	@ (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045aa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045ac:	f7fd fd94 	bl	80020d8 <HAL_GetTick>
 80045b0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045b2:	e008      	b.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045b4:	f7fd fd90 	bl	80020d8 <HAL_GetTick>
 80045b8:	4602      	mov	r2, r0
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	2b64      	cmp	r3, #100	@ 0x64
 80045c0:	d901      	bls.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80045c2:	2303      	movs	r3, #3
 80045c4:	e06d      	b.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045c6:	4b3a      	ldr	r3, [pc, #232]	@ (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d0f0      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80045d2:	4b36      	ldr	r3, [pc, #216]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045d4:	6a1b      	ldr	r3, [r3, #32]
 80045d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045da:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d02e      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045ea:	68fa      	ldr	r2, [r7, #12]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d027      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80045f0:	4b2e      	ldr	r3, [pc, #184]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045f2:	6a1b      	ldr	r3, [r3, #32]
 80045f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045f8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80045fa:	4b2e      	ldr	r3, [pc, #184]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80045fc:	2201      	movs	r2, #1
 80045fe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004600:	4b2c      	ldr	r3, [pc, #176]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004602:	2200      	movs	r2, #0
 8004604:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004606:	4a29      	ldr	r2, [pc, #164]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f003 0301 	and.w	r3, r3, #1
 8004612:	2b00      	cmp	r3, #0
 8004614:	d014      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004616:	f7fd fd5f 	bl	80020d8 <HAL_GetTick>
 800461a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800461c:	e00a      	b.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800461e:	f7fd fd5b 	bl	80020d8 <HAL_GetTick>
 8004622:	4602      	mov	r2, r0
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	f241 3288 	movw	r2, #5000	@ 0x1388
 800462c:	4293      	cmp	r3, r2
 800462e:	d901      	bls.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004630:	2303      	movs	r3, #3
 8004632:	e036      	b.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004634:	4b1d      	ldr	r3, [pc, #116]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004636:	6a1b      	ldr	r3, [r3, #32]
 8004638:	f003 0302 	and.w	r3, r3, #2
 800463c:	2b00      	cmp	r3, #0
 800463e:	d0ee      	beq.n	800461e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004640:	4b1a      	ldr	r3, [pc, #104]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004642:	6a1b      	ldr	r3, [r3, #32]
 8004644:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	4917      	ldr	r1, [pc, #92]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800464e:	4313      	orrs	r3, r2
 8004650:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004652:	7dfb      	ldrb	r3, [r7, #23]
 8004654:	2b01      	cmp	r3, #1
 8004656:	d105      	bne.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004658:	4b14      	ldr	r3, [pc, #80]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800465a:	69db      	ldr	r3, [r3, #28]
 800465c:	4a13      	ldr	r2, [pc, #76]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800465e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004662:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0302 	and.w	r3, r3, #2
 800466c:	2b00      	cmp	r3, #0
 800466e:	d008      	beq.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004670:	4b0e      	ldr	r3, [pc, #56]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	490b      	ldr	r1, [pc, #44]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800467e:	4313      	orrs	r3, r2
 8004680:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0310 	and.w	r3, r3, #16
 800468a:	2b00      	cmp	r3, #0
 800468c:	d008      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800468e:	4b07      	ldr	r3, [pc, #28]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	4904      	ldr	r1, [pc, #16]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800469c:	4313      	orrs	r3, r2
 800469e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3718      	adds	r7, #24
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	40021000 	.word	0x40021000
 80046b0:	40007000 	.word	0x40007000
 80046b4:	42420440 	.word	0x42420440

080046b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b082      	sub	sp, #8
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d101      	bne.n	80046ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e041      	b.n	800474e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d106      	bne.n	80046e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 f839 	bl	8004756 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2202      	movs	r2, #2
 80046e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	3304      	adds	r3, #4
 80046f4:	4619      	mov	r1, r3
 80046f6:	4610      	mov	r0, r2
 80046f8:	f000 f99c 	bl	8004a34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800474c:	2300      	movs	r3, #0
}
 800474e:	4618      	mov	r0, r3
 8004750:	3708      	adds	r7, #8
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}

08004756 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004756:	b480      	push	{r7}
 8004758:	b083      	sub	sp, #12
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800475e:	bf00      	nop
 8004760:	370c      	adds	r7, #12
 8004762:	46bd      	mov	sp, r7
 8004764:	bc80      	pop	{r7}
 8004766:	4770      	bx	lr

08004768 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004768:	b480      	push	{r7}
 800476a:	b085      	sub	sp, #20
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004776:	b2db      	uxtb	r3, r3
 8004778:	2b01      	cmp	r3, #1
 800477a:	d001      	beq.n	8004780 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e03a      	b.n	80047f6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2202      	movs	r2, #2
 8004784:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	68da      	ldr	r2, [r3, #12]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f042 0201 	orr.w	r2, r2, #1
 8004796:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a18      	ldr	r2, [pc, #96]	@ (8004800 <HAL_TIM_Base_Start_IT+0x98>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d00e      	beq.n	80047c0 <HAL_TIM_Base_Start_IT+0x58>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047aa:	d009      	beq.n	80047c0 <HAL_TIM_Base_Start_IT+0x58>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a14      	ldr	r2, [pc, #80]	@ (8004804 <HAL_TIM_Base_Start_IT+0x9c>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d004      	beq.n	80047c0 <HAL_TIM_Base_Start_IT+0x58>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a13      	ldr	r2, [pc, #76]	@ (8004808 <HAL_TIM_Base_Start_IT+0xa0>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d111      	bne.n	80047e4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	f003 0307 	and.w	r3, r3, #7
 80047ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2b06      	cmp	r3, #6
 80047d0:	d010      	beq.n	80047f4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f042 0201 	orr.w	r2, r2, #1
 80047e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047e2:	e007      	b.n	80047f4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f042 0201 	orr.w	r2, r2, #1
 80047f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3714      	adds	r7, #20
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bc80      	pop	{r7}
 80047fe:	4770      	bx	lr
 8004800:	40012c00 	.word	0x40012c00
 8004804:	40000400 	.word	0x40000400
 8004808:	40000800 	.word	0x40000800

0800480c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	f003 0302 	and.w	r3, r3, #2
 800482a:	2b00      	cmp	r3, #0
 800482c:	d020      	beq.n	8004870 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f003 0302 	and.w	r3, r3, #2
 8004834:	2b00      	cmp	r3, #0
 8004836:	d01b      	beq.n	8004870 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f06f 0202 	mvn.w	r2, #2
 8004840:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2201      	movs	r2, #1
 8004846:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	699b      	ldr	r3, [r3, #24]
 800484e:	f003 0303 	and.w	r3, r3, #3
 8004852:	2b00      	cmp	r3, #0
 8004854:	d003      	beq.n	800485e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f000 f8d1 	bl	80049fe <HAL_TIM_IC_CaptureCallback>
 800485c:	e005      	b.n	800486a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f000 f8c4 	bl	80049ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f000 f8d3 	bl	8004a10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	f003 0304 	and.w	r3, r3, #4
 8004876:	2b00      	cmp	r3, #0
 8004878:	d020      	beq.n	80048bc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	f003 0304 	and.w	r3, r3, #4
 8004880:	2b00      	cmp	r3, #0
 8004882:	d01b      	beq.n	80048bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f06f 0204 	mvn.w	r2, #4
 800488c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2202      	movs	r2, #2
 8004892:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	699b      	ldr	r3, [r3, #24]
 800489a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d003      	beq.n	80048aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 f8ab 	bl	80049fe <HAL_TIM_IC_CaptureCallback>
 80048a8:	e005      	b.n	80048b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 f89e 	bl	80049ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f000 f8ad 	bl	8004a10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	f003 0308 	and.w	r3, r3, #8
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d020      	beq.n	8004908 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f003 0308 	and.w	r3, r3, #8
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d01b      	beq.n	8004908 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f06f 0208 	mvn.w	r2, #8
 80048d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2204      	movs	r2, #4
 80048de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	69db      	ldr	r3, [r3, #28]
 80048e6:	f003 0303 	and.w	r3, r3, #3
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d003      	beq.n	80048f6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 f885 	bl	80049fe <HAL_TIM_IC_CaptureCallback>
 80048f4:	e005      	b.n	8004902 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f000 f878 	bl	80049ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f000 f887 	bl	8004a10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	f003 0310 	and.w	r3, r3, #16
 800490e:	2b00      	cmp	r3, #0
 8004910:	d020      	beq.n	8004954 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f003 0310 	and.w	r3, r3, #16
 8004918:	2b00      	cmp	r3, #0
 800491a:	d01b      	beq.n	8004954 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f06f 0210 	mvn.w	r2, #16
 8004924:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2208      	movs	r2, #8
 800492a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	69db      	ldr	r3, [r3, #28]
 8004932:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004936:	2b00      	cmp	r3, #0
 8004938:	d003      	beq.n	8004942 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f000 f85f 	bl	80049fe <HAL_TIM_IC_CaptureCallback>
 8004940:	e005      	b.n	800494e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 f852 	bl	80049ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f000 f861 	bl	8004a10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	f003 0301 	and.w	r3, r3, #1
 800495a:	2b00      	cmp	r3, #0
 800495c:	d00c      	beq.n	8004978 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f003 0301 	and.w	r3, r3, #1
 8004964:	2b00      	cmp	r3, #0
 8004966:	d007      	beq.n	8004978 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f06f 0201 	mvn.w	r2, #1
 8004970:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f7fd f888 	bl	8001a88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00c      	beq.n	800499c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004988:	2b00      	cmp	r3, #0
 800498a:	d007      	beq.n	800499c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004994:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 f8c3 	bl	8004b22 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d00c      	beq.n	80049c0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d007      	beq.n	80049c0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80049b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f000 f831 	bl	8004a22 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	f003 0320 	and.w	r3, r3, #32
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d00c      	beq.n	80049e4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f003 0320 	and.w	r3, r3, #32
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d007      	beq.n	80049e4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f06f 0220 	mvn.w	r2, #32
 80049dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f000 f896 	bl	8004b10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80049e4:	bf00      	nop
 80049e6:	3710      	adds	r7, #16
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}

080049ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80049f4:	bf00      	nop
 80049f6:	370c      	adds	r7, #12
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bc80      	pop	{r7}
 80049fc:	4770      	bx	lr

080049fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049fe:	b480      	push	{r7}
 8004a00:	b083      	sub	sp, #12
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a06:	bf00      	nop
 8004a08:	370c      	adds	r7, #12
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bc80      	pop	{r7}
 8004a0e:	4770      	bx	lr

08004a10 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a18:	bf00      	nop
 8004a1a:	370c      	adds	r7, #12
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bc80      	pop	{r7}
 8004a20:	4770      	bx	lr

08004a22 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a22:	b480      	push	{r7}
 8004a24:	b083      	sub	sp, #12
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a2a:	bf00      	nop
 8004a2c:	370c      	adds	r7, #12
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bc80      	pop	{r7}
 8004a32:	4770      	bx	lr

08004a34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b085      	sub	sp, #20
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4a2f      	ldr	r2, [pc, #188]	@ (8004b04 <TIM_Base_SetConfig+0xd0>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d00b      	beq.n	8004a64 <TIM_Base_SetConfig+0x30>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a52:	d007      	beq.n	8004a64 <TIM_Base_SetConfig+0x30>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	4a2c      	ldr	r2, [pc, #176]	@ (8004b08 <TIM_Base_SetConfig+0xd4>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d003      	beq.n	8004a64 <TIM_Base_SetConfig+0x30>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	4a2b      	ldr	r2, [pc, #172]	@ (8004b0c <TIM_Base_SetConfig+0xd8>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d108      	bne.n	8004a76 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	68fa      	ldr	r2, [r7, #12]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4a22      	ldr	r2, [pc, #136]	@ (8004b04 <TIM_Base_SetConfig+0xd0>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d00b      	beq.n	8004a96 <TIM_Base_SetConfig+0x62>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a84:	d007      	beq.n	8004a96 <TIM_Base_SetConfig+0x62>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4a1f      	ldr	r2, [pc, #124]	@ (8004b08 <TIM_Base_SetConfig+0xd4>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d003      	beq.n	8004a96 <TIM_Base_SetConfig+0x62>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	4a1e      	ldr	r2, [pc, #120]	@ (8004b0c <TIM_Base_SetConfig+0xd8>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d108      	bne.n	8004aa8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	68fa      	ldr	r2, [r7, #12]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	695b      	ldr	r3, [r3, #20]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	68fa      	ldr	r2, [r7, #12]
 8004aba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	689a      	ldr	r2, [r3, #8]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4a0d      	ldr	r2, [pc, #52]	@ (8004b04 <TIM_Base_SetConfig+0xd0>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d103      	bne.n	8004adc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	691a      	ldr	r2, [r3, #16]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	f003 0301 	and.w	r3, r3, #1
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d005      	beq.n	8004afa <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	f023 0201 	bic.w	r2, r3, #1
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	611a      	str	r2, [r3, #16]
  }
}
 8004afa:	bf00      	nop
 8004afc:	3714      	adds	r7, #20
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bc80      	pop	{r7}
 8004b02:	4770      	bx	lr
 8004b04:	40012c00 	.word	0x40012c00
 8004b08:	40000400 	.word	0x40000400
 8004b0c:	40000800 	.word	0x40000800

08004b10 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b18:	bf00      	nop
 8004b1a:	370c      	adds	r7, #12
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bc80      	pop	{r7}
 8004b20:	4770      	bx	lr

08004b22 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b22:	b480      	push	{r7}
 8004b24:	b083      	sub	sp, #12
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b2a:	bf00      	nop
 8004b2c:	370c      	adds	r7, #12
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bc80      	pop	{r7}
 8004b32:	4770      	bx	lr

08004b34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b082      	sub	sp, #8
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d101      	bne.n	8004b46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e042      	b.n	8004bcc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d106      	bne.n	8004b60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f7fd f88c 	bl	8001c78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2224      	movs	r2, #36	@ 0x24
 8004b64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	68da      	ldr	r2, [r3, #12]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004b76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f000 f971 	bl	8004e60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	691a      	ldr	r2, [r3, #16]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004b8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	695a      	ldr	r2, [r3, #20]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004b9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68da      	ldr	r2, [r3, #12]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004bac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2220      	movs	r2, #32
 8004bb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2220      	movs	r2, #32
 8004bc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004bca:	2300      	movs	r3, #0
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3708      	adds	r7, #8
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}

08004bd4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b08a      	sub	sp, #40	@ 0x28
 8004bd8:	af02      	add	r7, sp, #8
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	60b9      	str	r1, [r7, #8]
 8004bde:	603b      	str	r3, [r7, #0]
 8004be0:	4613      	mov	r3, r2
 8004be2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004be4:	2300      	movs	r3, #0
 8004be6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	2b20      	cmp	r3, #32
 8004bf2:	d175      	bne.n	8004ce0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d002      	beq.n	8004c00 <HAL_UART_Transmit+0x2c>
 8004bfa:	88fb      	ldrh	r3, [r7, #6]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d101      	bne.n	8004c04 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	e06e      	b.n	8004ce2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2200      	movs	r2, #0
 8004c08:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2221      	movs	r2, #33	@ 0x21
 8004c0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c12:	f7fd fa61 	bl	80020d8 <HAL_GetTick>
 8004c16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	88fa      	ldrh	r2, [r7, #6]
 8004c1c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	88fa      	ldrh	r2, [r7, #6]
 8004c22:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c2c:	d108      	bne.n	8004c40 <HAL_UART_Transmit+0x6c>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d104      	bne.n	8004c40 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004c36:	2300      	movs	r3, #0
 8004c38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	61bb      	str	r3, [r7, #24]
 8004c3e:	e003      	b.n	8004c48 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c44:	2300      	movs	r3, #0
 8004c46:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004c48:	e02e      	b.n	8004ca8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	9300      	str	r3, [sp, #0]
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	2200      	movs	r2, #0
 8004c52:	2180      	movs	r1, #128	@ 0x80
 8004c54:	68f8      	ldr	r0, [r7, #12]
 8004c56:	f000 f848 	bl	8004cea <UART_WaitOnFlagUntilTimeout>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d005      	beq.n	8004c6c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2220      	movs	r2, #32
 8004c64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	e03a      	b.n	8004ce2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d10b      	bne.n	8004c8a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	881b      	ldrh	r3, [r3, #0]
 8004c76:	461a      	mov	r2, r3
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c80:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	3302      	adds	r3, #2
 8004c86:	61bb      	str	r3, [r7, #24]
 8004c88:	e007      	b.n	8004c9a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c8a:	69fb      	ldr	r3, [r7, #28]
 8004c8c:	781a      	ldrb	r2, [r3, #0]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	3301      	adds	r3, #1
 8004c98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	3b01      	subs	r3, #1
 8004ca2:	b29a      	uxth	r2, r3
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d1cb      	bne.n	8004c4a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	9300      	str	r3, [sp, #0]
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	2140      	movs	r1, #64	@ 0x40
 8004cbc:	68f8      	ldr	r0, [r7, #12]
 8004cbe:	f000 f814 	bl	8004cea <UART_WaitOnFlagUntilTimeout>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d005      	beq.n	8004cd4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2220      	movs	r2, #32
 8004ccc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	e006      	b.n	8004ce2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2220      	movs	r2, #32
 8004cd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	e000      	b.n	8004ce2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004ce0:	2302      	movs	r3, #2
  }
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3720      	adds	r7, #32
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}

08004cea <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004cea:	b580      	push	{r7, lr}
 8004cec:	b086      	sub	sp, #24
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	60f8      	str	r0, [r7, #12]
 8004cf2:	60b9      	str	r1, [r7, #8]
 8004cf4:	603b      	str	r3, [r7, #0]
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cfa:	e03b      	b.n	8004d74 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cfc:	6a3b      	ldr	r3, [r7, #32]
 8004cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d02:	d037      	beq.n	8004d74 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d04:	f7fd f9e8 	bl	80020d8 <HAL_GetTick>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	6a3a      	ldr	r2, [r7, #32]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d302      	bcc.n	8004d1a <UART_WaitOnFlagUntilTimeout+0x30>
 8004d14:	6a3b      	ldr	r3, [r7, #32]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d101      	bne.n	8004d1e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e03a      	b.n	8004d94 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	f003 0304 	and.w	r3, r3, #4
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d023      	beq.n	8004d74 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	2b80      	cmp	r3, #128	@ 0x80
 8004d30:	d020      	beq.n	8004d74 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	2b40      	cmp	r3, #64	@ 0x40
 8004d36:	d01d      	beq.n	8004d74 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 0308 	and.w	r3, r3, #8
 8004d42:	2b08      	cmp	r3, #8
 8004d44:	d116      	bne.n	8004d74 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004d46:	2300      	movs	r3, #0
 8004d48:	617b      	str	r3, [r7, #20]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	617b      	str	r3, [r7, #20]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	617b      	str	r3, [r7, #20]
 8004d5a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d5c:	68f8      	ldr	r0, [r7, #12]
 8004d5e:	f000 f81d 	bl	8004d9c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2208      	movs	r2, #8
 8004d66:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	e00f      	b.n	8004d94 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	68ba      	ldr	r2, [r7, #8]
 8004d80:	429a      	cmp	r2, r3
 8004d82:	bf0c      	ite	eq
 8004d84:	2301      	moveq	r3, #1
 8004d86:	2300      	movne	r3, #0
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	79fb      	ldrb	r3, [r7, #7]
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d0b4      	beq.n	8004cfc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d92:	2300      	movs	r3, #0
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3718      	adds	r7, #24
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b095      	sub	sp, #84	@ 0x54
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	330c      	adds	r3, #12
 8004daa:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dae:	e853 3f00 	ldrex	r3, [r3]
 8004db2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004db4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004db6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004dba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	330c      	adds	r3, #12
 8004dc2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004dc4:	643a      	str	r2, [r7, #64]	@ 0x40
 8004dc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004dca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004dcc:	e841 2300 	strex	r3, r2, [r1]
 8004dd0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004dd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d1e5      	bne.n	8004da4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	3314      	adds	r3, #20
 8004dde:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de0:	6a3b      	ldr	r3, [r7, #32]
 8004de2:	e853 3f00 	ldrex	r3, [r3]
 8004de6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004de8:	69fb      	ldr	r3, [r7, #28]
 8004dea:	f023 0301 	bic.w	r3, r3, #1
 8004dee:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	3314      	adds	r3, #20
 8004df6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004df8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004dfa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dfc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004dfe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e00:	e841 2300 	strex	r3, r2, [r1]
 8004e04:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d1e5      	bne.n	8004dd8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d119      	bne.n	8004e48 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	330c      	adds	r3, #12
 8004e1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	e853 3f00 	ldrex	r3, [r3]
 8004e22:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	f023 0310 	bic.w	r3, r3, #16
 8004e2a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	330c      	adds	r3, #12
 8004e32:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e34:	61ba      	str	r2, [r7, #24]
 8004e36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e38:	6979      	ldr	r1, [r7, #20]
 8004e3a:	69ba      	ldr	r2, [r7, #24]
 8004e3c:	e841 2300 	strex	r3, r2, [r1]
 8004e40:	613b      	str	r3, [r7, #16]
   return(result);
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d1e5      	bne.n	8004e14 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2220      	movs	r2, #32
 8004e4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004e56:	bf00      	nop
 8004e58:	3754      	adds	r7, #84	@ 0x54
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bc80      	pop	{r7}
 8004e5e:	4770      	bx	lr

08004e60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	691b      	ldr	r3, [r3, #16]
 8004e6e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	68da      	ldr	r2, [r3, #12]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	430a      	orrs	r2, r1
 8004e7c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	689a      	ldr	r2, [r3, #8]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	691b      	ldr	r3, [r3, #16]
 8004e86:	431a      	orrs	r2, r3
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	695b      	ldr	r3, [r3, #20]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004e9a:	f023 030c 	bic.w	r3, r3, #12
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	6812      	ldr	r2, [r2, #0]
 8004ea2:	68b9      	ldr	r1, [r7, #8]
 8004ea4:	430b      	orrs	r3, r1
 8004ea6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	695b      	ldr	r3, [r3, #20]
 8004eae:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	699a      	ldr	r2, [r3, #24]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	430a      	orrs	r2, r1
 8004ebc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a2c      	ldr	r2, [pc, #176]	@ (8004f74 <UART_SetConfig+0x114>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d103      	bne.n	8004ed0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004ec8:	f7ff fade 	bl	8004488 <HAL_RCC_GetPCLK2Freq>
 8004ecc:	60f8      	str	r0, [r7, #12]
 8004ece:	e002      	b.n	8004ed6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004ed0:	f7ff fac6 	bl	8004460 <HAL_RCC_GetPCLK1Freq>
 8004ed4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ed6:	68fa      	ldr	r2, [r7, #12]
 8004ed8:	4613      	mov	r3, r2
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	4413      	add	r3, r2
 8004ede:	009a      	lsls	r2, r3, #2
 8004ee0:	441a      	add	r2, r3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eec:	4a22      	ldr	r2, [pc, #136]	@ (8004f78 <UART_SetConfig+0x118>)
 8004eee:	fba2 2303 	umull	r2, r3, r2, r3
 8004ef2:	095b      	lsrs	r3, r3, #5
 8004ef4:	0119      	lsls	r1, r3, #4
 8004ef6:	68fa      	ldr	r2, [r7, #12]
 8004ef8:	4613      	mov	r3, r2
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	4413      	add	r3, r2
 8004efe:	009a      	lsls	r2, r3, #2
 8004f00:	441a      	add	r2, r3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f0c:	4b1a      	ldr	r3, [pc, #104]	@ (8004f78 <UART_SetConfig+0x118>)
 8004f0e:	fba3 0302 	umull	r0, r3, r3, r2
 8004f12:	095b      	lsrs	r3, r3, #5
 8004f14:	2064      	movs	r0, #100	@ 0x64
 8004f16:	fb00 f303 	mul.w	r3, r0, r3
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	011b      	lsls	r3, r3, #4
 8004f1e:	3332      	adds	r3, #50	@ 0x32
 8004f20:	4a15      	ldr	r2, [pc, #84]	@ (8004f78 <UART_SetConfig+0x118>)
 8004f22:	fba2 2303 	umull	r2, r3, r2, r3
 8004f26:	095b      	lsrs	r3, r3, #5
 8004f28:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f2c:	4419      	add	r1, r3
 8004f2e:	68fa      	ldr	r2, [r7, #12]
 8004f30:	4613      	mov	r3, r2
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	4413      	add	r3, r2
 8004f36:	009a      	lsls	r2, r3, #2
 8004f38:	441a      	add	r2, r3
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f44:	4b0c      	ldr	r3, [pc, #48]	@ (8004f78 <UART_SetConfig+0x118>)
 8004f46:	fba3 0302 	umull	r0, r3, r3, r2
 8004f4a:	095b      	lsrs	r3, r3, #5
 8004f4c:	2064      	movs	r0, #100	@ 0x64
 8004f4e:	fb00 f303 	mul.w	r3, r0, r3
 8004f52:	1ad3      	subs	r3, r2, r3
 8004f54:	011b      	lsls	r3, r3, #4
 8004f56:	3332      	adds	r3, #50	@ 0x32
 8004f58:	4a07      	ldr	r2, [pc, #28]	@ (8004f78 <UART_SetConfig+0x118>)
 8004f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f5e:	095b      	lsrs	r3, r3, #5
 8004f60:	f003 020f 	and.w	r2, r3, #15
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	440a      	add	r2, r1
 8004f6a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004f6c:	bf00      	nop
 8004f6e:	3710      	adds	r7, #16
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}
 8004f74:	40013800 	.word	0x40013800
 8004f78:	51eb851f 	.word	0x51eb851f

08004f7c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b085      	sub	sp, #20
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	4603      	mov	r3, r0
 8004f84:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004f86:	2300      	movs	r3, #0
 8004f88:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004f8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f8e:	2b84      	cmp	r3, #132	@ 0x84
 8004f90:	d005      	beq.n	8004f9e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004f92:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	4413      	add	r3, r2
 8004f9a:	3303      	adds	r3, #3
 8004f9c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3714      	adds	r7, #20
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bc80      	pop	{r7}
 8004fa8:	4770      	bx	lr

08004faa <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004faa:	b580      	push	{r7, lr}
 8004fac:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004fae:	f000 faf7 	bl	80055a0 <vTaskStartScheduler>
  
  return osOK;
 8004fb2:	2300      	movs	r3, #0
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	bd80      	pop	{r7, pc}

08004fb8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fba:	b089      	sub	sp, #36	@ 0x24
 8004fbc:	af04      	add	r7, sp, #16
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	695b      	ldr	r3, [r3, #20]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d020      	beq.n	800500c <osThreadCreate+0x54>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	699b      	ldr	r3, [r3, #24]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d01c      	beq.n	800500c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	685c      	ldr	r4, [r3, #4]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	691e      	ldr	r6, [r3, #16]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f7ff ffc9 	bl	8004f7c <makeFreeRtosPriority>
 8004fea:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	695b      	ldr	r3, [r3, #20]
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004ff4:	9202      	str	r2, [sp, #8]
 8004ff6:	9301      	str	r3, [sp, #4]
 8004ff8:	9100      	str	r1, [sp, #0]
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	4632      	mov	r2, r6
 8004ffe:	4629      	mov	r1, r5
 8005000:	4620      	mov	r0, r4
 8005002:	f000 f8e8 	bl	80051d6 <xTaskCreateStatic>
 8005006:	4603      	mov	r3, r0
 8005008:	60fb      	str	r3, [r7, #12]
 800500a:	e01c      	b.n	8005046 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	685c      	ldr	r4, [r3, #4]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005018:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005020:	4618      	mov	r0, r3
 8005022:	f7ff ffab 	bl	8004f7c <makeFreeRtosPriority>
 8005026:	4602      	mov	r2, r0
 8005028:	f107 030c 	add.w	r3, r7, #12
 800502c:	9301      	str	r3, [sp, #4]
 800502e:	9200      	str	r2, [sp, #0]
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	4632      	mov	r2, r6
 8005034:	4629      	mov	r1, r5
 8005036:	4620      	mov	r0, r4
 8005038:	f000 f92d 	bl	8005296 <xTaskCreate>
 800503c:	4603      	mov	r3, r0
 800503e:	2b01      	cmp	r3, #1
 8005040:	d001      	beq.n	8005046 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005042:	2300      	movs	r3, #0
 8005044:	e000      	b.n	8005048 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005046:	68fb      	ldr	r3, [r7, #12]
}
 8005048:	4618      	mov	r0, r3
 800504a:	3714      	adds	r7, #20
 800504c:	46bd      	mov	sp, r7
 800504e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005050 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b084      	sub	sp, #16
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d001      	beq.n	8005066 <osDelay+0x16>
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	e000      	b.n	8005068 <osDelay+0x18>
 8005066:	2301      	movs	r3, #1
 8005068:	4618      	mov	r0, r3
 800506a:	f000 fa63 	bl	8005534 <vTaskDelay>
  
  return osOK;
 800506e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005070:	4618      	mov	r0, r3
 8005072:	3710      	adds	r7, #16
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}

08005078 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005078:	b480      	push	{r7}
 800507a:	b083      	sub	sp, #12
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f103 0208 	add.w	r2, r3, #8
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f04f 32ff 	mov.w	r2, #4294967295
 8005090:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f103 0208 	add.w	r2, r3, #8
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f103 0208 	add.w	r2, r3, #8
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2200      	movs	r2, #0
 80050aa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80050ac:	bf00      	nop
 80050ae:	370c      	adds	r7, #12
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bc80      	pop	{r7}
 80050b4:	4770      	bx	lr

080050b6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80050b6:	b480      	push	{r7}
 80050b8:	b083      	sub	sp, #12
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80050c4:	bf00      	nop
 80050c6:	370c      	adds	r7, #12
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bc80      	pop	{r7}
 80050cc:	4770      	bx	lr

080050ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80050ce:	b480      	push	{r7}
 80050d0:	b085      	sub	sp, #20
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6078      	str	r0, [r7, #4]
 80050d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	689a      	ldr	r2, [r3, #8]
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	683a      	ldr	r2, [r7, #0]
 80050f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	683a      	ldr	r2, [r7, #0]
 80050f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	1c5a      	adds	r2, r3, #1
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	601a      	str	r2, [r3, #0]
}
 800510a:	bf00      	nop
 800510c:	3714      	adds	r7, #20
 800510e:	46bd      	mov	sp, r7
 8005110:	bc80      	pop	{r7}
 8005112:	4770      	bx	lr

08005114 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005114:	b480      	push	{r7}
 8005116:	b085      	sub	sp, #20
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800512a:	d103      	bne.n	8005134 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	691b      	ldr	r3, [r3, #16]
 8005130:	60fb      	str	r3, [r7, #12]
 8005132:	e00c      	b.n	800514e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	3308      	adds	r3, #8
 8005138:	60fb      	str	r3, [r7, #12]
 800513a:	e002      	b.n	8005142 <vListInsert+0x2e>
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	60fb      	str	r3, [r7, #12]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	68ba      	ldr	r2, [r7, #8]
 800514a:	429a      	cmp	r2, r3
 800514c:	d2f6      	bcs.n	800513c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	685a      	ldr	r2, [r3, #4]
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	683a      	ldr	r2, [r7, #0]
 800515c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	68fa      	ldr	r2, [r7, #12]
 8005162:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	683a      	ldr	r2, [r7, #0]
 8005168:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	1c5a      	adds	r2, r3, #1
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	601a      	str	r2, [r3, #0]
}
 800517a:	bf00      	nop
 800517c:	3714      	adds	r7, #20
 800517e:	46bd      	mov	sp, r7
 8005180:	bc80      	pop	{r7}
 8005182:	4770      	bx	lr

08005184 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005184:	b480      	push	{r7}
 8005186:	b085      	sub	sp, #20
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	691b      	ldr	r3, [r3, #16]
 8005190:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	6892      	ldr	r2, [r2, #8]
 800519a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	6852      	ldr	r2, [r2, #4]
 80051a4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d103      	bne.n	80051b8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	689a      	ldr	r2, [r3, #8]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	1e5a      	subs	r2, r3, #1
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3714      	adds	r7, #20
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bc80      	pop	{r7}
 80051d4:	4770      	bx	lr

080051d6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80051d6:	b580      	push	{r7, lr}
 80051d8:	b08e      	sub	sp, #56	@ 0x38
 80051da:	af04      	add	r7, sp, #16
 80051dc:	60f8      	str	r0, [r7, #12]
 80051de:	60b9      	str	r1, [r7, #8]
 80051e0:	607a      	str	r2, [r7, #4]
 80051e2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80051e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d10b      	bne.n	8005202 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80051ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051ee:	f383 8811 	msr	BASEPRI, r3
 80051f2:	f3bf 8f6f 	isb	sy
 80051f6:	f3bf 8f4f 	dsb	sy
 80051fa:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80051fc:	bf00      	nop
 80051fe:	bf00      	nop
 8005200:	e7fd      	b.n	80051fe <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005204:	2b00      	cmp	r3, #0
 8005206:	d10b      	bne.n	8005220 <xTaskCreateStatic+0x4a>
	__asm volatile
 8005208:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800520c:	f383 8811 	msr	BASEPRI, r3
 8005210:	f3bf 8f6f 	isb	sy
 8005214:	f3bf 8f4f 	dsb	sy
 8005218:	61fb      	str	r3, [r7, #28]
}
 800521a:	bf00      	nop
 800521c:	bf00      	nop
 800521e:	e7fd      	b.n	800521c <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005220:	23a0      	movs	r3, #160	@ 0xa0
 8005222:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	2ba0      	cmp	r3, #160	@ 0xa0
 8005228:	d00b      	beq.n	8005242 <xTaskCreateStatic+0x6c>
	__asm volatile
 800522a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800522e:	f383 8811 	msr	BASEPRI, r3
 8005232:	f3bf 8f6f 	isb	sy
 8005236:	f3bf 8f4f 	dsb	sy
 800523a:	61bb      	str	r3, [r7, #24]
}
 800523c:	bf00      	nop
 800523e:	bf00      	nop
 8005240:	e7fd      	b.n	800523e <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005242:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005246:	2b00      	cmp	r3, #0
 8005248:	d01e      	beq.n	8005288 <xTaskCreateStatic+0xb2>
 800524a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800524c:	2b00      	cmp	r3, #0
 800524e:	d01b      	beq.n	8005288 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005252:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005256:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005258:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800525a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800525c:	2202      	movs	r2, #2
 800525e:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005262:	2300      	movs	r3, #0
 8005264:	9303      	str	r3, [sp, #12]
 8005266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005268:	9302      	str	r3, [sp, #8]
 800526a:	f107 0314 	add.w	r3, r7, #20
 800526e:	9301      	str	r3, [sp, #4]
 8005270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005272:	9300      	str	r3, [sp, #0]
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	68b9      	ldr	r1, [r7, #8]
 800527a:	68f8      	ldr	r0, [r7, #12]
 800527c:	f000 f850 	bl	8005320 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005280:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005282:	f000 f8ed 	bl	8005460 <prvAddNewTaskToReadyList>
 8005286:	e001      	b.n	800528c <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005288:	2300      	movs	r3, #0
 800528a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800528c:	697b      	ldr	r3, [r7, #20]
	}
 800528e:	4618      	mov	r0, r3
 8005290:	3728      	adds	r7, #40	@ 0x28
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}

08005296 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005296:	b580      	push	{r7, lr}
 8005298:	b08c      	sub	sp, #48	@ 0x30
 800529a:	af04      	add	r7, sp, #16
 800529c:	60f8      	str	r0, [r7, #12]
 800529e:	60b9      	str	r1, [r7, #8]
 80052a0:	603b      	str	r3, [r7, #0]
 80052a2:	4613      	mov	r3, r2
 80052a4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80052a6:	88fb      	ldrh	r3, [r7, #6]
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	4618      	mov	r0, r3
 80052ac:	f000 fea0 	bl	8005ff0 <pvPortMalloc>
 80052b0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d00e      	beq.n	80052d6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80052b8:	20a0      	movs	r0, #160	@ 0xa0
 80052ba:	f000 fe99 	bl	8005ff0 <pvPortMalloc>
 80052be:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80052c0:	69fb      	ldr	r3, [r7, #28]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d003      	beq.n	80052ce <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80052c6:	69fb      	ldr	r3, [r7, #28]
 80052c8:	697a      	ldr	r2, [r7, #20]
 80052ca:	631a      	str	r2, [r3, #48]	@ 0x30
 80052cc:	e005      	b.n	80052da <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80052ce:	6978      	ldr	r0, [r7, #20]
 80052d0:	f000 ff5c 	bl	800618c <vPortFree>
 80052d4:	e001      	b.n	80052da <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80052d6:	2300      	movs	r3, #0
 80052d8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d017      	beq.n	8005310 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80052e0:	69fb      	ldr	r3, [r7, #28]
 80052e2:	2200      	movs	r2, #0
 80052e4:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80052e8:	88fa      	ldrh	r2, [r7, #6]
 80052ea:	2300      	movs	r3, #0
 80052ec:	9303      	str	r3, [sp, #12]
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	9302      	str	r3, [sp, #8]
 80052f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052f4:	9301      	str	r3, [sp, #4]
 80052f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052f8:	9300      	str	r3, [sp, #0]
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	68b9      	ldr	r1, [r7, #8]
 80052fe:	68f8      	ldr	r0, [r7, #12]
 8005300:	f000 f80e 	bl	8005320 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005304:	69f8      	ldr	r0, [r7, #28]
 8005306:	f000 f8ab 	bl	8005460 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800530a:	2301      	movs	r3, #1
 800530c:	61bb      	str	r3, [r7, #24]
 800530e:	e002      	b.n	8005316 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005310:	f04f 33ff 	mov.w	r3, #4294967295
 8005314:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005316:	69bb      	ldr	r3, [r7, #24]
	}
 8005318:	4618      	mov	r0, r3
 800531a:	3720      	adds	r7, #32
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}

08005320 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b088      	sub	sp, #32
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	607a      	str	r2, [r7, #4]
 800532c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800532e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005330:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005338:	3b01      	subs	r3, #1
 800533a:	009b      	lsls	r3, r3, #2
 800533c:	4413      	add	r3, r2
 800533e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005340:	69bb      	ldr	r3, [r7, #24]
 8005342:	f023 0307 	bic.w	r3, r3, #7
 8005346:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	f003 0307 	and.w	r3, r3, #7
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00b      	beq.n	800536a <prvInitialiseNewTask+0x4a>
	__asm volatile
 8005352:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005356:	f383 8811 	msr	BASEPRI, r3
 800535a:	f3bf 8f6f 	isb	sy
 800535e:	f3bf 8f4f 	dsb	sy
 8005362:	617b      	str	r3, [r7, #20]
}
 8005364:	bf00      	nop
 8005366:	bf00      	nop
 8005368:	e7fd      	b.n	8005366 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d01f      	beq.n	80053b0 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005370:	2300      	movs	r3, #0
 8005372:	61fb      	str	r3, [r7, #28]
 8005374:	e012      	b.n	800539c <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005376:	68ba      	ldr	r2, [r7, #8]
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	4413      	add	r3, r2
 800537c:	7819      	ldrb	r1, [r3, #0]
 800537e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	4413      	add	r3, r2
 8005384:	3334      	adds	r3, #52	@ 0x34
 8005386:	460a      	mov	r2, r1
 8005388:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800538a:	68ba      	ldr	r2, [r7, #8]
 800538c:	69fb      	ldr	r3, [r7, #28]
 800538e:	4413      	add	r3, r2
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d006      	beq.n	80053a4 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	3301      	adds	r3, #1
 800539a:	61fb      	str	r3, [r7, #28]
 800539c:	69fb      	ldr	r3, [r7, #28]
 800539e:	2b0f      	cmp	r3, #15
 80053a0:	d9e9      	bls.n	8005376 <prvInitialiseNewTask+0x56>
 80053a2:	e000      	b.n	80053a6 <prvInitialiseNewTask+0x86>
			{
				break;
 80053a4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80053a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053a8:	2200      	movs	r2, #0
 80053aa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80053ae:	e003      	b.n	80053b8 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80053b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053b2:	2200      	movs	r2, #0
 80053b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80053b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053ba:	2b06      	cmp	r3, #6
 80053bc:	d901      	bls.n	80053c2 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80053be:	2306      	movs	r3, #6
 80053c0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80053c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80053c6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80053c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80053cc:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80053ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053d0:	2200      	movs	r2, #0
 80053d2:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80053d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053d6:	3304      	adds	r3, #4
 80053d8:	4618      	mov	r0, r3
 80053da:	f7ff fe6c 	bl	80050b6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80053de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053e0:	3318      	adds	r3, #24
 80053e2:	4618      	mov	r0, r3
 80053e4:	f7ff fe67 	bl	80050b6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80053e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053ec:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053f0:	f1c3 0207 	rsb	r2, r3, #7
 80053f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053f6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80053f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053fc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80053fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005400:	2200      	movs	r2, #0
 8005402:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005408:	2200      	movs	r2, #0
 800540a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800540e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005410:	334c      	adds	r3, #76	@ 0x4c
 8005412:	224c      	movs	r2, #76	@ 0x4c
 8005414:	2100      	movs	r1, #0
 8005416:	4618      	mov	r0, r3
 8005418:	f001 ff67 	bl	80072ea <memset>
 800541c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800541e:	4a0d      	ldr	r2, [pc, #52]	@ (8005454 <prvInitialiseNewTask+0x134>)
 8005420:	651a      	str	r2, [r3, #80]	@ 0x50
 8005422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005424:	4a0c      	ldr	r2, [pc, #48]	@ (8005458 <prvInitialiseNewTask+0x138>)
 8005426:	655a      	str	r2, [r3, #84]	@ 0x54
 8005428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800542a:	4a0c      	ldr	r2, [pc, #48]	@ (800545c <prvInitialiseNewTask+0x13c>)
 800542c:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800542e:	683a      	ldr	r2, [r7, #0]
 8005430:	68f9      	ldr	r1, [r7, #12]
 8005432:	69b8      	ldr	r0, [r7, #24]
 8005434:	f000 fc28 	bl	8005c88 <pxPortInitialiseStack>
 8005438:	4602      	mov	r2, r0
 800543a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800543c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800543e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005440:	2b00      	cmp	r3, #0
 8005442:	d002      	beq.n	800544a <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005446:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005448:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800544a:	bf00      	nop
 800544c:	3720      	adds	r7, #32
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
 8005452:	bf00      	nop
 8005454:	20001548 	.word	0x20001548
 8005458:	200015b0 	.word	0x200015b0
 800545c:	20001618 	.word	0x20001618

08005460 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b082      	sub	sp, #8
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005468:	f000 fd00 	bl	8005e6c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800546c:	4b2a      	ldr	r3, [pc, #168]	@ (8005518 <prvAddNewTaskToReadyList+0xb8>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	3301      	adds	r3, #1
 8005472:	4a29      	ldr	r2, [pc, #164]	@ (8005518 <prvAddNewTaskToReadyList+0xb8>)
 8005474:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005476:	4b29      	ldr	r3, [pc, #164]	@ (800551c <prvAddNewTaskToReadyList+0xbc>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d109      	bne.n	8005492 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800547e:	4a27      	ldr	r2, [pc, #156]	@ (800551c <prvAddNewTaskToReadyList+0xbc>)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005484:	4b24      	ldr	r3, [pc, #144]	@ (8005518 <prvAddNewTaskToReadyList+0xb8>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	2b01      	cmp	r3, #1
 800548a:	d110      	bne.n	80054ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800548c:	f000 fad2 	bl	8005a34 <prvInitialiseTaskLists>
 8005490:	e00d      	b.n	80054ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005492:	4b23      	ldr	r3, [pc, #140]	@ (8005520 <prvAddNewTaskToReadyList+0xc0>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d109      	bne.n	80054ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800549a:	4b20      	ldr	r3, [pc, #128]	@ (800551c <prvAddNewTaskToReadyList+0xbc>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d802      	bhi.n	80054ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80054a8:	4a1c      	ldr	r2, [pc, #112]	@ (800551c <prvAddNewTaskToReadyList+0xbc>)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80054ae:	4b1d      	ldr	r3, [pc, #116]	@ (8005524 <prvAddNewTaskToReadyList+0xc4>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	3301      	adds	r3, #1
 80054b4:	4a1b      	ldr	r2, [pc, #108]	@ (8005524 <prvAddNewTaskToReadyList+0xc4>)
 80054b6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054bc:	2201      	movs	r2, #1
 80054be:	409a      	lsls	r2, r3
 80054c0:	4b19      	ldr	r3, [pc, #100]	@ (8005528 <prvAddNewTaskToReadyList+0xc8>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	4a18      	ldr	r2, [pc, #96]	@ (8005528 <prvAddNewTaskToReadyList+0xc8>)
 80054c8:	6013      	str	r3, [r2, #0]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054ce:	4613      	mov	r3, r2
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	4413      	add	r3, r2
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	4a15      	ldr	r2, [pc, #84]	@ (800552c <prvAddNewTaskToReadyList+0xcc>)
 80054d8:	441a      	add	r2, r3
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	3304      	adds	r3, #4
 80054de:	4619      	mov	r1, r3
 80054e0:	4610      	mov	r0, r2
 80054e2:	f7ff fdf4 	bl	80050ce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80054e6:	f000 fcf1 	bl	8005ecc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80054ea:	4b0d      	ldr	r3, [pc, #52]	@ (8005520 <prvAddNewTaskToReadyList+0xc0>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d00e      	beq.n	8005510 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80054f2:	4b0a      	ldr	r3, [pc, #40]	@ (800551c <prvAddNewTaskToReadyList+0xbc>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d207      	bcs.n	8005510 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005500:	4b0b      	ldr	r3, [pc, #44]	@ (8005530 <prvAddNewTaskToReadyList+0xd0>)
 8005502:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005506:	601a      	str	r2, [r3, #0]
 8005508:	f3bf 8f4f 	dsb	sy
 800550c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005510:	bf00      	nop
 8005512:	3708      	adds	r7, #8
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}
 8005518:	200008f4 	.word	0x200008f4
 800551c:	200007f4 	.word	0x200007f4
 8005520:	20000900 	.word	0x20000900
 8005524:	20000910 	.word	0x20000910
 8005528:	200008fc 	.word	0x200008fc
 800552c:	200007f8 	.word	0x200007f8
 8005530:	e000ed04 	.word	0xe000ed04

08005534 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800553c:	2300      	movs	r3, #0
 800553e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d018      	beq.n	8005578 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005546:	4b14      	ldr	r3, [pc, #80]	@ (8005598 <vTaskDelay+0x64>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d00b      	beq.n	8005566 <vTaskDelay+0x32>
	__asm volatile
 800554e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005552:	f383 8811 	msr	BASEPRI, r3
 8005556:	f3bf 8f6f 	isb	sy
 800555a:	f3bf 8f4f 	dsb	sy
 800555e:	60bb      	str	r3, [r7, #8]
}
 8005560:	bf00      	nop
 8005562:	bf00      	nop
 8005564:	e7fd      	b.n	8005562 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005566:	f000 f885 	bl	8005674 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800556a:	2100      	movs	r1, #0
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f000 fb25 	bl	8005bbc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005572:	f000 f88d 	bl	8005690 <xTaskResumeAll>
 8005576:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d107      	bne.n	800558e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800557e:	4b07      	ldr	r3, [pc, #28]	@ (800559c <vTaskDelay+0x68>)
 8005580:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005584:	601a      	str	r2, [r3, #0]
 8005586:	f3bf 8f4f 	dsb	sy
 800558a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800558e:	bf00      	nop
 8005590:	3710      	adds	r7, #16
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}
 8005596:	bf00      	nop
 8005598:	2000091c 	.word	0x2000091c
 800559c:	e000ed04 	.word	0xe000ed04

080055a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b08a      	sub	sp, #40	@ 0x28
 80055a4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80055a6:	2300      	movs	r3, #0
 80055a8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80055aa:	2300      	movs	r3, #0
 80055ac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80055ae:	463a      	mov	r2, r7
 80055b0:	1d39      	adds	r1, r7, #4
 80055b2:	f107 0308 	add.w	r3, r7, #8
 80055b6:	4618      	mov	r0, r3
 80055b8:	f7fc f804 	bl	80015c4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80055bc:	6839      	ldr	r1, [r7, #0]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	68ba      	ldr	r2, [r7, #8]
 80055c2:	9202      	str	r2, [sp, #8]
 80055c4:	9301      	str	r3, [sp, #4]
 80055c6:	2300      	movs	r3, #0
 80055c8:	9300      	str	r3, [sp, #0]
 80055ca:	2300      	movs	r3, #0
 80055cc:	460a      	mov	r2, r1
 80055ce:	4921      	ldr	r1, [pc, #132]	@ (8005654 <vTaskStartScheduler+0xb4>)
 80055d0:	4821      	ldr	r0, [pc, #132]	@ (8005658 <vTaskStartScheduler+0xb8>)
 80055d2:	f7ff fe00 	bl	80051d6 <xTaskCreateStatic>
 80055d6:	4603      	mov	r3, r0
 80055d8:	4a20      	ldr	r2, [pc, #128]	@ (800565c <vTaskStartScheduler+0xbc>)
 80055da:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80055dc:	4b1f      	ldr	r3, [pc, #124]	@ (800565c <vTaskStartScheduler+0xbc>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d002      	beq.n	80055ea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80055e4:	2301      	movs	r3, #1
 80055e6:	617b      	str	r3, [r7, #20]
 80055e8:	e001      	b.n	80055ee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80055ea:	2300      	movs	r3, #0
 80055ec:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d11b      	bne.n	800562c <vTaskStartScheduler+0x8c>
	__asm volatile
 80055f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055f8:	f383 8811 	msr	BASEPRI, r3
 80055fc:	f3bf 8f6f 	isb	sy
 8005600:	f3bf 8f4f 	dsb	sy
 8005604:	613b      	str	r3, [r7, #16]
}
 8005606:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005608:	4b15      	ldr	r3, [pc, #84]	@ (8005660 <vTaskStartScheduler+0xc0>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	334c      	adds	r3, #76	@ 0x4c
 800560e:	4a15      	ldr	r2, [pc, #84]	@ (8005664 <vTaskStartScheduler+0xc4>)
 8005610:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005612:	4b15      	ldr	r3, [pc, #84]	@ (8005668 <vTaskStartScheduler+0xc8>)
 8005614:	f04f 32ff 	mov.w	r2, #4294967295
 8005618:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800561a:	4b14      	ldr	r3, [pc, #80]	@ (800566c <vTaskStartScheduler+0xcc>)
 800561c:	2201      	movs	r2, #1
 800561e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005620:	4b13      	ldr	r3, [pc, #76]	@ (8005670 <vTaskStartScheduler+0xd0>)
 8005622:	2200      	movs	r2, #0
 8005624:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005626:	f000 fbaf 	bl	8005d88 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800562a:	e00f      	b.n	800564c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005632:	d10b      	bne.n	800564c <vTaskStartScheduler+0xac>
	__asm volatile
 8005634:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005638:	f383 8811 	msr	BASEPRI, r3
 800563c:	f3bf 8f6f 	isb	sy
 8005640:	f3bf 8f4f 	dsb	sy
 8005644:	60fb      	str	r3, [r7, #12]
}
 8005646:	bf00      	nop
 8005648:	bf00      	nop
 800564a:	e7fd      	b.n	8005648 <vTaskStartScheduler+0xa8>
}
 800564c:	bf00      	nop
 800564e:	3718      	adds	r7, #24
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}
 8005654:	0800bf2c 	.word	0x0800bf2c
 8005658:	08005a05 	.word	0x08005a05
 800565c:	20000918 	.word	0x20000918
 8005660:	200007f4 	.word	0x200007f4
 8005664:	2000001c 	.word	0x2000001c
 8005668:	20000914 	.word	0x20000914
 800566c:	20000900 	.word	0x20000900
 8005670:	200008f8 	.word	0x200008f8

08005674 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005674:	b480      	push	{r7}
 8005676:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005678:	4b04      	ldr	r3, [pc, #16]	@ (800568c <vTaskSuspendAll+0x18>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	3301      	adds	r3, #1
 800567e:	4a03      	ldr	r2, [pc, #12]	@ (800568c <vTaskSuspendAll+0x18>)
 8005680:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005682:	bf00      	nop
 8005684:	46bd      	mov	sp, r7
 8005686:	bc80      	pop	{r7}
 8005688:	4770      	bx	lr
 800568a:	bf00      	nop
 800568c:	2000091c 	.word	0x2000091c

08005690 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b084      	sub	sp, #16
 8005694:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005696:	2300      	movs	r3, #0
 8005698:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800569a:	2300      	movs	r3, #0
 800569c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800569e:	4b42      	ldr	r3, [pc, #264]	@ (80057a8 <xTaskResumeAll+0x118>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d10b      	bne.n	80056be <xTaskResumeAll+0x2e>
	__asm volatile
 80056a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056aa:	f383 8811 	msr	BASEPRI, r3
 80056ae:	f3bf 8f6f 	isb	sy
 80056b2:	f3bf 8f4f 	dsb	sy
 80056b6:	603b      	str	r3, [r7, #0]
}
 80056b8:	bf00      	nop
 80056ba:	bf00      	nop
 80056bc:	e7fd      	b.n	80056ba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80056be:	f000 fbd5 	bl	8005e6c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80056c2:	4b39      	ldr	r3, [pc, #228]	@ (80057a8 <xTaskResumeAll+0x118>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	3b01      	subs	r3, #1
 80056c8:	4a37      	ldr	r2, [pc, #220]	@ (80057a8 <xTaskResumeAll+0x118>)
 80056ca:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056cc:	4b36      	ldr	r3, [pc, #216]	@ (80057a8 <xTaskResumeAll+0x118>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d161      	bne.n	8005798 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80056d4:	4b35      	ldr	r3, [pc, #212]	@ (80057ac <xTaskResumeAll+0x11c>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d05d      	beq.n	8005798 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80056dc:	e02e      	b.n	800573c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056de:	4b34      	ldr	r3, [pc, #208]	@ (80057b0 <xTaskResumeAll+0x120>)
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	3318      	adds	r3, #24
 80056ea:	4618      	mov	r0, r3
 80056ec:	f7ff fd4a 	bl	8005184 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	3304      	adds	r3, #4
 80056f4:	4618      	mov	r0, r3
 80056f6:	f7ff fd45 	bl	8005184 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056fe:	2201      	movs	r2, #1
 8005700:	409a      	lsls	r2, r3
 8005702:	4b2c      	ldr	r3, [pc, #176]	@ (80057b4 <xTaskResumeAll+0x124>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4313      	orrs	r3, r2
 8005708:	4a2a      	ldr	r2, [pc, #168]	@ (80057b4 <xTaskResumeAll+0x124>)
 800570a:	6013      	str	r3, [r2, #0]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005710:	4613      	mov	r3, r2
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	4413      	add	r3, r2
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	4a27      	ldr	r2, [pc, #156]	@ (80057b8 <xTaskResumeAll+0x128>)
 800571a:	441a      	add	r2, r3
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	3304      	adds	r3, #4
 8005720:	4619      	mov	r1, r3
 8005722:	4610      	mov	r0, r2
 8005724:	f7ff fcd3 	bl	80050ce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800572c:	4b23      	ldr	r3, [pc, #140]	@ (80057bc <xTaskResumeAll+0x12c>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005732:	429a      	cmp	r2, r3
 8005734:	d302      	bcc.n	800573c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005736:	4b22      	ldr	r3, [pc, #136]	@ (80057c0 <xTaskResumeAll+0x130>)
 8005738:	2201      	movs	r2, #1
 800573a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800573c:	4b1c      	ldr	r3, [pc, #112]	@ (80057b0 <xTaskResumeAll+0x120>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d1cc      	bne.n	80056de <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d001      	beq.n	800574e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800574a:	f000 fa17 	bl	8005b7c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800574e:	4b1d      	ldr	r3, [pc, #116]	@ (80057c4 <xTaskResumeAll+0x134>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d010      	beq.n	800577c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800575a:	f000 f837 	bl	80057cc <xTaskIncrementTick>
 800575e:	4603      	mov	r3, r0
 8005760:	2b00      	cmp	r3, #0
 8005762:	d002      	beq.n	800576a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005764:	4b16      	ldr	r3, [pc, #88]	@ (80057c0 <xTaskResumeAll+0x130>)
 8005766:	2201      	movs	r2, #1
 8005768:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	3b01      	subs	r3, #1
 800576e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d1f1      	bne.n	800575a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005776:	4b13      	ldr	r3, [pc, #76]	@ (80057c4 <xTaskResumeAll+0x134>)
 8005778:	2200      	movs	r2, #0
 800577a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800577c:	4b10      	ldr	r3, [pc, #64]	@ (80057c0 <xTaskResumeAll+0x130>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d009      	beq.n	8005798 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005784:	2301      	movs	r3, #1
 8005786:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005788:	4b0f      	ldr	r3, [pc, #60]	@ (80057c8 <xTaskResumeAll+0x138>)
 800578a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800578e:	601a      	str	r2, [r3, #0]
 8005790:	f3bf 8f4f 	dsb	sy
 8005794:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005798:	f000 fb98 	bl	8005ecc <vPortExitCritical>

	return xAlreadyYielded;
 800579c:	68bb      	ldr	r3, [r7, #8]
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3710      	adds	r7, #16
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
 80057a6:	bf00      	nop
 80057a8:	2000091c 	.word	0x2000091c
 80057ac:	200008f4 	.word	0x200008f4
 80057b0:	200008b4 	.word	0x200008b4
 80057b4:	200008fc 	.word	0x200008fc
 80057b8:	200007f8 	.word	0x200007f8
 80057bc:	200007f4 	.word	0x200007f4
 80057c0:	20000908 	.word	0x20000908
 80057c4:	20000904 	.word	0x20000904
 80057c8:	e000ed04 	.word	0xe000ed04

080057cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b086      	sub	sp, #24
 80057d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80057d2:	2300      	movs	r3, #0
 80057d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057d6:	4b4f      	ldr	r3, [pc, #316]	@ (8005914 <xTaskIncrementTick+0x148>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	f040 808f 	bne.w	80058fe <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80057e0:	4b4d      	ldr	r3, [pc, #308]	@ (8005918 <xTaskIncrementTick+0x14c>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	3301      	adds	r3, #1
 80057e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80057e8:	4a4b      	ldr	r2, [pc, #300]	@ (8005918 <xTaskIncrementTick+0x14c>)
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d121      	bne.n	8005838 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80057f4:	4b49      	ldr	r3, [pc, #292]	@ (800591c <xTaskIncrementTick+0x150>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d00b      	beq.n	8005816 <xTaskIncrementTick+0x4a>
	__asm volatile
 80057fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005802:	f383 8811 	msr	BASEPRI, r3
 8005806:	f3bf 8f6f 	isb	sy
 800580a:	f3bf 8f4f 	dsb	sy
 800580e:	603b      	str	r3, [r7, #0]
}
 8005810:	bf00      	nop
 8005812:	bf00      	nop
 8005814:	e7fd      	b.n	8005812 <xTaskIncrementTick+0x46>
 8005816:	4b41      	ldr	r3, [pc, #260]	@ (800591c <xTaskIncrementTick+0x150>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	60fb      	str	r3, [r7, #12]
 800581c:	4b40      	ldr	r3, [pc, #256]	@ (8005920 <xTaskIncrementTick+0x154>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a3e      	ldr	r2, [pc, #248]	@ (800591c <xTaskIncrementTick+0x150>)
 8005822:	6013      	str	r3, [r2, #0]
 8005824:	4a3e      	ldr	r2, [pc, #248]	@ (8005920 <xTaskIncrementTick+0x154>)
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	6013      	str	r3, [r2, #0]
 800582a:	4b3e      	ldr	r3, [pc, #248]	@ (8005924 <xTaskIncrementTick+0x158>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	3301      	adds	r3, #1
 8005830:	4a3c      	ldr	r2, [pc, #240]	@ (8005924 <xTaskIncrementTick+0x158>)
 8005832:	6013      	str	r3, [r2, #0]
 8005834:	f000 f9a2 	bl	8005b7c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005838:	4b3b      	ldr	r3, [pc, #236]	@ (8005928 <xTaskIncrementTick+0x15c>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	693a      	ldr	r2, [r7, #16]
 800583e:	429a      	cmp	r2, r3
 8005840:	d348      	bcc.n	80058d4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005842:	4b36      	ldr	r3, [pc, #216]	@ (800591c <xTaskIncrementTick+0x150>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d104      	bne.n	8005856 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800584c:	4b36      	ldr	r3, [pc, #216]	@ (8005928 <xTaskIncrementTick+0x15c>)
 800584e:	f04f 32ff 	mov.w	r2, #4294967295
 8005852:	601a      	str	r2, [r3, #0]
					break;
 8005854:	e03e      	b.n	80058d4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005856:	4b31      	ldr	r3, [pc, #196]	@ (800591c <xTaskIncrementTick+0x150>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	68db      	ldr	r3, [r3, #12]
 800585e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005866:	693a      	ldr	r2, [r7, #16]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	429a      	cmp	r2, r3
 800586c:	d203      	bcs.n	8005876 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800586e:	4a2e      	ldr	r2, [pc, #184]	@ (8005928 <xTaskIncrementTick+0x15c>)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005874:	e02e      	b.n	80058d4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	3304      	adds	r3, #4
 800587a:	4618      	mov	r0, r3
 800587c:	f7ff fc82 	bl	8005184 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005884:	2b00      	cmp	r3, #0
 8005886:	d004      	beq.n	8005892 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	3318      	adds	r3, #24
 800588c:	4618      	mov	r0, r3
 800588e:	f7ff fc79 	bl	8005184 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005896:	2201      	movs	r2, #1
 8005898:	409a      	lsls	r2, r3
 800589a:	4b24      	ldr	r3, [pc, #144]	@ (800592c <xTaskIncrementTick+0x160>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4313      	orrs	r3, r2
 80058a0:	4a22      	ldr	r2, [pc, #136]	@ (800592c <xTaskIncrementTick+0x160>)
 80058a2:	6013      	str	r3, [r2, #0]
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058a8:	4613      	mov	r3, r2
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	4413      	add	r3, r2
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	4a1f      	ldr	r2, [pc, #124]	@ (8005930 <xTaskIncrementTick+0x164>)
 80058b2:	441a      	add	r2, r3
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	3304      	adds	r3, #4
 80058b8:	4619      	mov	r1, r3
 80058ba:	4610      	mov	r0, r2
 80058bc:	f7ff fc07 	bl	80050ce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058c4:	4b1b      	ldr	r3, [pc, #108]	@ (8005934 <xTaskIncrementTick+0x168>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d3b9      	bcc.n	8005842 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80058ce:	2301      	movs	r3, #1
 80058d0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80058d2:	e7b6      	b.n	8005842 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80058d4:	4b17      	ldr	r3, [pc, #92]	@ (8005934 <xTaskIncrementTick+0x168>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058da:	4915      	ldr	r1, [pc, #84]	@ (8005930 <xTaskIncrementTick+0x164>)
 80058dc:	4613      	mov	r3, r2
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	4413      	add	r3, r2
 80058e2:	009b      	lsls	r3, r3, #2
 80058e4:	440b      	add	r3, r1
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d901      	bls.n	80058f0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80058ec:	2301      	movs	r3, #1
 80058ee:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80058f0:	4b11      	ldr	r3, [pc, #68]	@ (8005938 <xTaskIncrementTick+0x16c>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d007      	beq.n	8005908 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80058f8:	2301      	movs	r3, #1
 80058fa:	617b      	str	r3, [r7, #20]
 80058fc:	e004      	b.n	8005908 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80058fe:	4b0f      	ldr	r3, [pc, #60]	@ (800593c <xTaskIncrementTick+0x170>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	3301      	adds	r3, #1
 8005904:	4a0d      	ldr	r2, [pc, #52]	@ (800593c <xTaskIncrementTick+0x170>)
 8005906:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005908:	697b      	ldr	r3, [r7, #20]
}
 800590a:	4618      	mov	r0, r3
 800590c:	3718      	adds	r7, #24
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
 8005912:	bf00      	nop
 8005914:	2000091c 	.word	0x2000091c
 8005918:	200008f8 	.word	0x200008f8
 800591c:	200008ac 	.word	0x200008ac
 8005920:	200008b0 	.word	0x200008b0
 8005924:	2000090c 	.word	0x2000090c
 8005928:	20000914 	.word	0x20000914
 800592c:	200008fc 	.word	0x200008fc
 8005930:	200007f8 	.word	0x200007f8
 8005934:	200007f4 	.word	0x200007f4
 8005938:	20000908 	.word	0x20000908
 800593c:	20000904 	.word	0x20000904

08005940 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005940:	b480      	push	{r7}
 8005942:	b087      	sub	sp, #28
 8005944:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005946:	4b29      	ldr	r3, [pc, #164]	@ (80059ec <vTaskSwitchContext+0xac>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d003      	beq.n	8005956 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800594e:	4b28      	ldr	r3, [pc, #160]	@ (80059f0 <vTaskSwitchContext+0xb0>)
 8005950:	2201      	movs	r2, #1
 8005952:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005954:	e045      	b.n	80059e2 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8005956:	4b26      	ldr	r3, [pc, #152]	@ (80059f0 <vTaskSwitchContext+0xb0>)
 8005958:	2200      	movs	r2, #0
 800595a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800595c:	4b25      	ldr	r3, [pc, #148]	@ (80059f4 <vTaskSwitchContext+0xb4>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	fab3 f383 	clz	r3, r3
 8005968:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800596a:	7afb      	ldrb	r3, [r7, #11]
 800596c:	f1c3 031f 	rsb	r3, r3, #31
 8005970:	617b      	str	r3, [r7, #20]
 8005972:	4921      	ldr	r1, [pc, #132]	@ (80059f8 <vTaskSwitchContext+0xb8>)
 8005974:	697a      	ldr	r2, [r7, #20]
 8005976:	4613      	mov	r3, r2
 8005978:	009b      	lsls	r3, r3, #2
 800597a:	4413      	add	r3, r2
 800597c:	009b      	lsls	r3, r3, #2
 800597e:	440b      	add	r3, r1
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d10b      	bne.n	800599e <vTaskSwitchContext+0x5e>
	__asm volatile
 8005986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800598a:	f383 8811 	msr	BASEPRI, r3
 800598e:	f3bf 8f6f 	isb	sy
 8005992:	f3bf 8f4f 	dsb	sy
 8005996:	607b      	str	r3, [r7, #4]
}
 8005998:	bf00      	nop
 800599a:	bf00      	nop
 800599c:	e7fd      	b.n	800599a <vTaskSwitchContext+0x5a>
 800599e:	697a      	ldr	r2, [r7, #20]
 80059a0:	4613      	mov	r3, r2
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	4413      	add	r3, r2
 80059a6:	009b      	lsls	r3, r3, #2
 80059a8:	4a13      	ldr	r2, [pc, #76]	@ (80059f8 <vTaskSwitchContext+0xb8>)
 80059aa:	4413      	add	r3, r2
 80059ac:	613b      	str	r3, [r7, #16]
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	685a      	ldr	r2, [r3, #4]
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	605a      	str	r2, [r3, #4]
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	685a      	ldr	r2, [r3, #4]
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	3308      	adds	r3, #8
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d104      	bne.n	80059ce <vTaskSwitchContext+0x8e>
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	685a      	ldr	r2, [r3, #4]
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	605a      	str	r2, [r3, #4]
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	4a09      	ldr	r2, [pc, #36]	@ (80059fc <vTaskSwitchContext+0xbc>)
 80059d6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80059d8:	4b08      	ldr	r3, [pc, #32]	@ (80059fc <vTaskSwitchContext+0xbc>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	334c      	adds	r3, #76	@ 0x4c
 80059de:	4a08      	ldr	r2, [pc, #32]	@ (8005a00 <vTaskSwitchContext+0xc0>)
 80059e0:	6013      	str	r3, [r2, #0]
}
 80059e2:	bf00      	nop
 80059e4:	371c      	adds	r7, #28
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bc80      	pop	{r7}
 80059ea:	4770      	bx	lr
 80059ec:	2000091c 	.word	0x2000091c
 80059f0:	20000908 	.word	0x20000908
 80059f4:	200008fc 	.word	0x200008fc
 80059f8:	200007f8 	.word	0x200007f8
 80059fc:	200007f4 	.word	0x200007f4
 8005a00:	2000001c 	.word	0x2000001c

08005a04 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b082      	sub	sp, #8
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005a0c:	f000 f852 	bl	8005ab4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005a10:	4b06      	ldr	r3, [pc, #24]	@ (8005a2c <prvIdleTask+0x28>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d9f9      	bls.n	8005a0c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005a18:	4b05      	ldr	r3, [pc, #20]	@ (8005a30 <prvIdleTask+0x2c>)
 8005a1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a1e:	601a      	str	r2, [r3, #0]
 8005a20:	f3bf 8f4f 	dsb	sy
 8005a24:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005a28:	e7f0      	b.n	8005a0c <prvIdleTask+0x8>
 8005a2a:	bf00      	nop
 8005a2c:	200007f8 	.word	0x200007f8
 8005a30:	e000ed04 	.word	0xe000ed04

08005a34 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b082      	sub	sp, #8
 8005a38:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	607b      	str	r3, [r7, #4]
 8005a3e:	e00c      	b.n	8005a5a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	4613      	mov	r3, r2
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	4413      	add	r3, r2
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	4a12      	ldr	r2, [pc, #72]	@ (8005a94 <prvInitialiseTaskLists+0x60>)
 8005a4c:	4413      	add	r3, r2
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f7ff fb12 	bl	8005078 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	3301      	adds	r3, #1
 8005a58:	607b      	str	r3, [r7, #4]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2b06      	cmp	r3, #6
 8005a5e:	d9ef      	bls.n	8005a40 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005a60:	480d      	ldr	r0, [pc, #52]	@ (8005a98 <prvInitialiseTaskLists+0x64>)
 8005a62:	f7ff fb09 	bl	8005078 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005a66:	480d      	ldr	r0, [pc, #52]	@ (8005a9c <prvInitialiseTaskLists+0x68>)
 8005a68:	f7ff fb06 	bl	8005078 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005a6c:	480c      	ldr	r0, [pc, #48]	@ (8005aa0 <prvInitialiseTaskLists+0x6c>)
 8005a6e:	f7ff fb03 	bl	8005078 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005a72:	480c      	ldr	r0, [pc, #48]	@ (8005aa4 <prvInitialiseTaskLists+0x70>)
 8005a74:	f7ff fb00 	bl	8005078 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005a78:	480b      	ldr	r0, [pc, #44]	@ (8005aa8 <prvInitialiseTaskLists+0x74>)
 8005a7a:	f7ff fafd 	bl	8005078 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005a7e:	4b0b      	ldr	r3, [pc, #44]	@ (8005aac <prvInitialiseTaskLists+0x78>)
 8005a80:	4a05      	ldr	r2, [pc, #20]	@ (8005a98 <prvInitialiseTaskLists+0x64>)
 8005a82:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005a84:	4b0a      	ldr	r3, [pc, #40]	@ (8005ab0 <prvInitialiseTaskLists+0x7c>)
 8005a86:	4a05      	ldr	r2, [pc, #20]	@ (8005a9c <prvInitialiseTaskLists+0x68>)
 8005a88:	601a      	str	r2, [r3, #0]
}
 8005a8a:	bf00      	nop
 8005a8c:	3708      	adds	r7, #8
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}
 8005a92:	bf00      	nop
 8005a94:	200007f8 	.word	0x200007f8
 8005a98:	20000884 	.word	0x20000884
 8005a9c:	20000898 	.word	0x20000898
 8005aa0:	200008b4 	.word	0x200008b4
 8005aa4:	200008c8 	.word	0x200008c8
 8005aa8:	200008e0 	.word	0x200008e0
 8005aac:	200008ac 	.word	0x200008ac
 8005ab0:	200008b0 	.word	0x200008b0

08005ab4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b082      	sub	sp, #8
 8005ab8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005aba:	e019      	b.n	8005af0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005abc:	f000 f9d6 	bl	8005e6c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ac0:	4b10      	ldr	r3, [pc, #64]	@ (8005b04 <prvCheckTasksWaitingTermination+0x50>)
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	68db      	ldr	r3, [r3, #12]
 8005ac6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	3304      	adds	r3, #4
 8005acc:	4618      	mov	r0, r3
 8005ace:	f7ff fb59 	bl	8005184 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8005b08 <prvCheckTasksWaitingTermination+0x54>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	3b01      	subs	r3, #1
 8005ad8:	4a0b      	ldr	r2, [pc, #44]	@ (8005b08 <prvCheckTasksWaitingTermination+0x54>)
 8005ada:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005adc:	4b0b      	ldr	r3, [pc, #44]	@ (8005b0c <prvCheckTasksWaitingTermination+0x58>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	3b01      	subs	r3, #1
 8005ae2:	4a0a      	ldr	r2, [pc, #40]	@ (8005b0c <prvCheckTasksWaitingTermination+0x58>)
 8005ae4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005ae6:	f000 f9f1 	bl	8005ecc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f000 f810 	bl	8005b10 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005af0:	4b06      	ldr	r3, [pc, #24]	@ (8005b0c <prvCheckTasksWaitingTermination+0x58>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d1e1      	bne.n	8005abc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005af8:	bf00      	nop
 8005afa:	bf00      	nop
 8005afc:	3708      	adds	r7, #8
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}
 8005b02:	bf00      	nop
 8005b04:	200008c8 	.word	0x200008c8
 8005b08:	200008f4 	.word	0x200008f4
 8005b0c:	200008dc 	.word	0x200008dc

08005b10 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	334c      	adds	r3, #76	@ 0x4c
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f001 fc01 	bl	8007324 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d108      	bne.n	8005b3e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b30:	4618      	mov	r0, r3
 8005b32:	f000 fb2b 	bl	800618c <vPortFree>
				vPortFree( pxTCB );
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f000 fb28 	bl	800618c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005b3c:	e019      	b.n	8005b72 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d103      	bne.n	8005b50 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f000 fb1f 	bl	800618c <vPortFree>
	}
 8005b4e:	e010      	b.n	8005b72 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005b56:	2b02      	cmp	r3, #2
 8005b58:	d00b      	beq.n	8005b72 <prvDeleteTCB+0x62>
	__asm volatile
 8005b5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b5e:	f383 8811 	msr	BASEPRI, r3
 8005b62:	f3bf 8f6f 	isb	sy
 8005b66:	f3bf 8f4f 	dsb	sy
 8005b6a:	60fb      	str	r3, [r7, #12]
}
 8005b6c:	bf00      	nop
 8005b6e:	bf00      	nop
 8005b70:	e7fd      	b.n	8005b6e <prvDeleteTCB+0x5e>
	}
 8005b72:	bf00      	nop
 8005b74:	3710      	adds	r7, #16
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
	...

08005b7c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b82:	4b0c      	ldr	r3, [pc, #48]	@ (8005bb4 <prvResetNextTaskUnblockTime+0x38>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d104      	bne.n	8005b96 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005b8c:	4b0a      	ldr	r3, [pc, #40]	@ (8005bb8 <prvResetNextTaskUnblockTime+0x3c>)
 8005b8e:	f04f 32ff 	mov.w	r2, #4294967295
 8005b92:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005b94:	e008      	b.n	8005ba8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b96:	4b07      	ldr	r3, [pc, #28]	@ (8005bb4 <prvResetNextTaskUnblockTime+0x38>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	4a04      	ldr	r2, [pc, #16]	@ (8005bb8 <prvResetNextTaskUnblockTime+0x3c>)
 8005ba6:	6013      	str	r3, [r2, #0]
}
 8005ba8:	bf00      	nop
 8005baa:	370c      	adds	r7, #12
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bc80      	pop	{r7}
 8005bb0:	4770      	bx	lr
 8005bb2:	bf00      	nop
 8005bb4:	200008ac 	.word	0x200008ac
 8005bb8:	20000914 	.word	0x20000914

08005bbc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b084      	sub	sp, #16
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005bc6:	4b29      	ldr	r3, [pc, #164]	@ (8005c6c <prvAddCurrentTaskToDelayedList+0xb0>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005bcc:	4b28      	ldr	r3, [pc, #160]	@ (8005c70 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	3304      	adds	r3, #4
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f7ff fad6 	bl	8005184 <uxListRemove>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d10b      	bne.n	8005bf6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005bde:	4b24      	ldr	r3, [pc, #144]	@ (8005c70 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005be4:	2201      	movs	r2, #1
 8005be6:	fa02 f303 	lsl.w	r3, r2, r3
 8005bea:	43da      	mvns	r2, r3
 8005bec:	4b21      	ldr	r3, [pc, #132]	@ (8005c74 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	4a20      	ldr	r2, [pc, #128]	@ (8005c74 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005bf4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bfc:	d10a      	bne.n	8005c14 <prvAddCurrentTaskToDelayedList+0x58>
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d007      	beq.n	8005c14 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c04:	4b1a      	ldr	r3, [pc, #104]	@ (8005c70 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	3304      	adds	r3, #4
 8005c0a:	4619      	mov	r1, r3
 8005c0c:	481a      	ldr	r0, [pc, #104]	@ (8005c78 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005c0e:	f7ff fa5e 	bl	80050ce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005c12:	e026      	b.n	8005c62 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005c14:	68fa      	ldr	r2, [r7, #12]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4413      	add	r3, r2
 8005c1a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005c1c:	4b14      	ldr	r3, [pc, #80]	@ (8005c70 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	68ba      	ldr	r2, [r7, #8]
 8005c22:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005c24:	68ba      	ldr	r2, [r7, #8]
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	d209      	bcs.n	8005c40 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c2c:	4b13      	ldr	r3, [pc, #76]	@ (8005c7c <prvAddCurrentTaskToDelayedList+0xc0>)
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	4b0f      	ldr	r3, [pc, #60]	@ (8005c70 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	3304      	adds	r3, #4
 8005c36:	4619      	mov	r1, r3
 8005c38:	4610      	mov	r0, r2
 8005c3a:	f7ff fa6b 	bl	8005114 <vListInsert>
}
 8005c3e:	e010      	b.n	8005c62 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c40:	4b0f      	ldr	r3, [pc, #60]	@ (8005c80 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	4b0a      	ldr	r3, [pc, #40]	@ (8005c70 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	3304      	adds	r3, #4
 8005c4a:	4619      	mov	r1, r3
 8005c4c:	4610      	mov	r0, r2
 8005c4e:	f7ff fa61 	bl	8005114 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005c52:	4b0c      	ldr	r3, [pc, #48]	@ (8005c84 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	68ba      	ldr	r2, [r7, #8]
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d202      	bcs.n	8005c62 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005c5c:	4a09      	ldr	r2, [pc, #36]	@ (8005c84 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	6013      	str	r3, [r2, #0]
}
 8005c62:	bf00      	nop
 8005c64:	3710      	adds	r7, #16
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	bf00      	nop
 8005c6c:	200008f8 	.word	0x200008f8
 8005c70:	200007f4 	.word	0x200007f4
 8005c74:	200008fc 	.word	0x200008fc
 8005c78:	200008e0 	.word	0x200008e0
 8005c7c:	200008b0 	.word	0x200008b0
 8005c80:	200008ac 	.word	0x200008ac
 8005c84:	20000914 	.word	0x20000914

08005c88 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b085      	sub	sp, #20
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	60f8      	str	r0, [r7, #12]
 8005c90:	60b9      	str	r1, [r7, #8]
 8005c92:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	3b04      	subs	r3, #4
 8005c98:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005ca0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	3b04      	subs	r3, #4
 8005ca6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	f023 0201 	bic.w	r2, r3, #1
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	3b04      	subs	r3, #4
 8005cb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005cb8:	4a08      	ldr	r2, [pc, #32]	@ (8005cdc <pxPortInitialiseStack+0x54>)
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	3b14      	subs	r3, #20
 8005cc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	3b20      	subs	r3, #32
 8005cce:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3714      	adds	r7, #20
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bc80      	pop	{r7}
 8005cda:	4770      	bx	lr
 8005cdc:	08005ce1 	.word	0x08005ce1

08005ce0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b085      	sub	sp, #20
 8005ce4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005cea:	4b12      	ldr	r3, [pc, #72]	@ (8005d34 <prvTaskExitError+0x54>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cf2:	d00b      	beq.n	8005d0c <prvTaskExitError+0x2c>
	__asm volatile
 8005cf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cf8:	f383 8811 	msr	BASEPRI, r3
 8005cfc:	f3bf 8f6f 	isb	sy
 8005d00:	f3bf 8f4f 	dsb	sy
 8005d04:	60fb      	str	r3, [r7, #12]
}
 8005d06:	bf00      	nop
 8005d08:	bf00      	nop
 8005d0a:	e7fd      	b.n	8005d08 <prvTaskExitError+0x28>
	__asm volatile
 8005d0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d10:	f383 8811 	msr	BASEPRI, r3
 8005d14:	f3bf 8f6f 	isb	sy
 8005d18:	f3bf 8f4f 	dsb	sy
 8005d1c:	60bb      	str	r3, [r7, #8]
}
 8005d1e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005d20:	bf00      	nop
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d0fc      	beq.n	8005d22 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005d28:	bf00      	nop
 8005d2a:	bf00      	nop
 8005d2c:	3714      	adds	r7, #20
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bc80      	pop	{r7}
 8005d32:	4770      	bx	lr
 8005d34:	2000000c 	.word	0x2000000c
	...

08005d40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005d40:	4b07      	ldr	r3, [pc, #28]	@ (8005d60 <pxCurrentTCBConst2>)
 8005d42:	6819      	ldr	r1, [r3, #0]
 8005d44:	6808      	ldr	r0, [r1, #0]
 8005d46:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005d4a:	f380 8809 	msr	PSP, r0
 8005d4e:	f3bf 8f6f 	isb	sy
 8005d52:	f04f 0000 	mov.w	r0, #0
 8005d56:	f380 8811 	msr	BASEPRI, r0
 8005d5a:	f04e 0e0d 	orr.w	lr, lr, #13
 8005d5e:	4770      	bx	lr

08005d60 <pxCurrentTCBConst2>:
 8005d60:	200007f4 	.word	0x200007f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005d64:	bf00      	nop
 8005d66:	bf00      	nop

08005d68 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005d68:	4806      	ldr	r0, [pc, #24]	@ (8005d84 <prvPortStartFirstTask+0x1c>)
 8005d6a:	6800      	ldr	r0, [r0, #0]
 8005d6c:	6800      	ldr	r0, [r0, #0]
 8005d6e:	f380 8808 	msr	MSP, r0
 8005d72:	b662      	cpsie	i
 8005d74:	b661      	cpsie	f
 8005d76:	f3bf 8f4f 	dsb	sy
 8005d7a:	f3bf 8f6f 	isb	sy
 8005d7e:	df00      	svc	0
 8005d80:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005d82:	bf00      	nop
 8005d84:	e000ed08 	.word	0xe000ed08

08005d88 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b084      	sub	sp, #16
 8005d8c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005d8e:	4b32      	ldr	r3, [pc, #200]	@ (8005e58 <xPortStartScheduler+0xd0>)
 8005d90:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	781b      	ldrb	r3, [r3, #0]
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	22ff      	movs	r2, #255	@ 0xff
 8005d9e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005da8:	78fb      	ldrb	r3, [r7, #3]
 8005daa:	b2db      	uxtb	r3, r3
 8005dac:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005db0:	b2da      	uxtb	r2, r3
 8005db2:	4b2a      	ldr	r3, [pc, #168]	@ (8005e5c <xPortStartScheduler+0xd4>)
 8005db4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005db6:	4b2a      	ldr	r3, [pc, #168]	@ (8005e60 <xPortStartScheduler+0xd8>)
 8005db8:	2207      	movs	r2, #7
 8005dba:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005dbc:	e009      	b.n	8005dd2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005dbe:	4b28      	ldr	r3, [pc, #160]	@ (8005e60 <xPortStartScheduler+0xd8>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	3b01      	subs	r3, #1
 8005dc4:	4a26      	ldr	r2, [pc, #152]	@ (8005e60 <xPortStartScheduler+0xd8>)
 8005dc6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005dc8:	78fb      	ldrb	r3, [r7, #3]
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	005b      	lsls	r3, r3, #1
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005dd2:	78fb      	ldrb	r3, [r7, #3]
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dda:	2b80      	cmp	r3, #128	@ 0x80
 8005ddc:	d0ef      	beq.n	8005dbe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005dde:	4b20      	ldr	r3, [pc, #128]	@ (8005e60 <xPortStartScheduler+0xd8>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f1c3 0307 	rsb	r3, r3, #7
 8005de6:	2b04      	cmp	r3, #4
 8005de8:	d00b      	beq.n	8005e02 <xPortStartScheduler+0x7a>
	__asm volatile
 8005dea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dee:	f383 8811 	msr	BASEPRI, r3
 8005df2:	f3bf 8f6f 	isb	sy
 8005df6:	f3bf 8f4f 	dsb	sy
 8005dfa:	60bb      	str	r3, [r7, #8]
}
 8005dfc:	bf00      	nop
 8005dfe:	bf00      	nop
 8005e00:	e7fd      	b.n	8005dfe <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005e02:	4b17      	ldr	r3, [pc, #92]	@ (8005e60 <xPortStartScheduler+0xd8>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	021b      	lsls	r3, r3, #8
 8005e08:	4a15      	ldr	r2, [pc, #84]	@ (8005e60 <xPortStartScheduler+0xd8>)
 8005e0a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005e0c:	4b14      	ldr	r3, [pc, #80]	@ (8005e60 <xPortStartScheduler+0xd8>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005e14:	4a12      	ldr	r2, [pc, #72]	@ (8005e60 <xPortStartScheduler+0xd8>)
 8005e16:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	b2da      	uxtb	r2, r3
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005e20:	4b10      	ldr	r3, [pc, #64]	@ (8005e64 <xPortStartScheduler+0xdc>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a0f      	ldr	r2, [pc, #60]	@ (8005e64 <xPortStartScheduler+0xdc>)
 8005e26:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005e2a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005e2c:	4b0d      	ldr	r3, [pc, #52]	@ (8005e64 <xPortStartScheduler+0xdc>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a0c      	ldr	r2, [pc, #48]	@ (8005e64 <xPortStartScheduler+0xdc>)
 8005e32:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005e36:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005e38:	f000 f8b8 	bl	8005fac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005e3c:	4b0a      	ldr	r3, [pc, #40]	@ (8005e68 <xPortStartScheduler+0xe0>)
 8005e3e:	2200      	movs	r2, #0
 8005e40:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005e42:	f7ff ff91 	bl	8005d68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005e46:	f7ff fd7b 	bl	8005940 <vTaskSwitchContext>
	prvTaskExitError();
 8005e4a:	f7ff ff49 	bl	8005ce0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005e4e:	2300      	movs	r3, #0
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3710      	adds	r7, #16
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}
 8005e58:	e000e400 	.word	0xe000e400
 8005e5c:	20000920 	.word	0x20000920
 8005e60:	20000924 	.word	0x20000924
 8005e64:	e000ed20 	.word	0xe000ed20
 8005e68:	2000000c 	.word	0x2000000c

08005e6c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b083      	sub	sp, #12
 8005e70:	af00      	add	r7, sp, #0
	__asm volatile
 8005e72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e76:	f383 8811 	msr	BASEPRI, r3
 8005e7a:	f3bf 8f6f 	isb	sy
 8005e7e:	f3bf 8f4f 	dsb	sy
 8005e82:	607b      	str	r3, [r7, #4]
}
 8005e84:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005e86:	4b0f      	ldr	r3, [pc, #60]	@ (8005ec4 <vPortEnterCritical+0x58>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	3301      	adds	r3, #1
 8005e8c:	4a0d      	ldr	r2, [pc, #52]	@ (8005ec4 <vPortEnterCritical+0x58>)
 8005e8e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005e90:	4b0c      	ldr	r3, [pc, #48]	@ (8005ec4 <vPortEnterCritical+0x58>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d110      	bne.n	8005eba <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005e98:	4b0b      	ldr	r3, [pc, #44]	@ (8005ec8 <vPortEnterCritical+0x5c>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d00b      	beq.n	8005eba <vPortEnterCritical+0x4e>
	__asm volatile
 8005ea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ea6:	f383 8811 	msr	BASEPRI, r3
 8005eaa:	f3bf 8f6f 	isb	sy
 8005eae:	f3bf 8f4f 	dsb	sy
 8005eb2:	603b      	str	r3, [r7, #0]
}
 8005eb4:	bf00      	nop
 8005eb6:	bf00      	nop
 8005eb8:	e7fd      	b.n	8005eb6 <vPortEnterCritical+0x4a>
	}
}
 8005eba:	bf00      	nop
 8005ebc:	370c      	adds	r7, #12
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bc80      	pop	{r7}
 8005ec2:	4770      	bx	lr
 8005ec4:	2000000c 	.word	0x2000000c
 8005ec8:	e000ed04 	.word	0xe000ed04

08005ecc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b083      	sub	sp, #12
 8005ed0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005ed2:	4b12      	ldr	r3, [pc, #72]	@ (8005f1c <vPortExitCritical+0x50>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d10b      	bne.n	8005ef2 <vPortExitCritical+0x26>
	__asm volatile
 8005eda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ede:	f383 8811 	msr	BASEPRI, r3
 8005ee2:	f3bf 8f6f 	isb	sy
 8005ee6:	f3bf 8f4f 	dsb	sy
 8005eea:	607b      	str	r3, [r7, #4]
}
 8005eec:	bf00      	nop
 8005eee:	bf00      	nop
 8005ef0:	e7fd      	b.n	8005eee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005ef2:	4b0a      	ldr	r3, [pc, #40]	@ (8005f1c <vPortExitCritical+0x50>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	3b01      	subs	r3, #1
 8005ef8:	4a08      	ldr	r2, [pc, #32]	@ (8005f1c <vPortExitCritical+0x50>)
 8005efa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005efc:	4b07      	ldr	r3, [pc, #28]	@ (8005f1c <vPortExitCritical+0x50>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d105      	bne.n	8005f10 <vPortExitCritical+0x44>
 8005f04:	2300      	movs	r3, #0
 8005f06:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005f0e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005f10:	bf00      	nop
 8005f12:	370c      	adds	r7, #12
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bc80      	pop	{r7}
 8005f18:	4770      	bx	lr
 8005f1a:	bf00      	nop
 8005f1c:	2000000c 	.word	0x2000000c

08005f20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005f20:	f3ef 8009 	mrs	r0, PSP
 8005f24:	f3bf 8f6f 	isb	sy
 8005f28:	4b0d      	ldr	r3, [pc, #52]	@ (8005f60 <pxCurrentTCBConst>)
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005f30:	6010      	str	r0, [r2, #0]
 8005f32:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005f36:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005f3a:	f380 8811 	msr	BASEPRI, r0
 8005f3e:	f7ff fcff 	bl	8005940 <vTaskSwitchContext>
 8005f42:	f04f 0000 	mov.w	r0, #0
 8005f46:	f380 8811 	msr	BASEPRI, r0
 8005f4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005f4e:	6819      	ldr	r1, [r3, #0]
 8005f50:	6808      	ldr	r0, [r1, #0]
 8005f52:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005f56:	f380 8809 	msr	PSP, r0
 8005f5a:	f3bf 8f6f 	isb	sy
 8005f5e:	4770      	bx	lr

08005f60 <pxCurrentTCBConst>:
 8005f60:	200007f4 	.word	0x200007f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005f64:	bf00      	nop
 8005f66:	bf00      	nop

08005f68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b082      	sub	sp, #8
 8005f6c:	af00      	add	r7, sp, #0
	__asm volatile
 8005f6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f72:	f383 8811 	msr	BASEPRI, r3
 8005f76:	f3bf 8f6f 	isb	sy
 8005f7a:	f3bf 8f4f 	dsb	sy
 8005f7e:	607b      	str	r3, [r7, #4]
}
 8005f80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005f82:	f7ff fc23 	bl	80057cc <xTaskIncrementTick>
 8005f86:	4603      	mov	r3, r0
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d003      	beq.n	8005f94 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005f8c:	4b06      	ldr	r3, [pc, #24]	@ (8005fa8 <SysTick_Handler+0x40>)
 8005f8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f92:	601a      	str	r2, [r3, #0]
 8005f94:	2300      	movs	r3, #0
 8005f96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	f383 8811 	msr	BASEPRI, r3
}
 8005f9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005fa0:	bf00      	nop
 8005fa2:	3708      	adds	r7, #8
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}
 8005fa8:	e000ed04 	.word	0xe000ed04

08005fac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005fac:	b480      	push	{r7}
 8005fae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005fb0:	4b0a      	ldr	r3, [pc, #40]	@ (8005fdc <vPortSetupTimerInterrupt+0x30>)
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005fb6:	4b0a      	ldr	r3, [pc, #40]	@ (8005fe0 <vPortSetupTimerInterrupt+0x34>)
 8005fb8:	2200      	movs	r2, #0
 8005fba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005fbc:	4b09      	ldr	r3, [pc, #36]	@ (8005fe4 <vPortSetupTimerInterrupt+0x38>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a09      	ldr	r2, [pc, #36]	@ (8005fe8 <vPortSetupTimerInterrupt+0x3c>)
 8005fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8005fc6:	099b      	lsrs	r3, r3, #6
 8005fc8:	4a08      	ldr	r2, [pc, #32]	@ (8005fec <vPortSetupTimerInterrupt+0x40>)
 8005fca:	3b01      	subs	r3, #1
 8005fcc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005fce:	4b03      	ldr	r3, [pc, #12]	@ (8005fdc <vPortSetupTimerInterrupt+0x30>)
 8005fd0:	2207      	movs	r2, #7
 8005fd2:	601a      	str	r2, [r3, #0]
}
 8005fd4:	bf00      	nop
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bc80      	pop	{r7}
 8005fda:	4770      	bx	lr
 8005fdc:	e000e010 	.word	0xe000e010
 8005fe0:	e000e018 	.word	0xe000e018
 8005fe4:	20000000 	.word	0x20000000
 8005fe8:	10624dd3 	.word	0x10624dd3
 8005fec:	e000e014 	.word	0xe000e014

08005ff0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b08a      	sub	sp, #40	@ 0x28
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005ffc:	f7ff fb3a 	bl	8005674 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006000:	4b5c      	ldr	r3, [pc, #368]	@ (8006174 <pvPortMalloc+0x184>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d101      	bne.n	800600c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006008:	f000 f924 	bl	8006254 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800600c:	4b5a      	ldr	r3, [pc, #360]	@ (8006178 <pvPortMalloc+0x188>)
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	4013      	ands	r3, r2
 8006014:	2b00      	cmp	r3, #0
 8006016:	f040 8095 	bne.w	8006144 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d01e      	beq.n	800605e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006020:	2208      	movs	r2, #8
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4413      	add	r3, r2
 8006026:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f003 0307 	and.w	r3, r3, #7
 800602e:	2b00      	cmp	r3, #0
 8006030:	d015      	beq.n	800605e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f023 0307 	bic.w	r3, r3, #7
 8006038:	3308      	adds	r3, #8
 800603a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f003 0307 	and.w	r3, r3, #7
 8006042:	2b00      	cmp	r3, #0
 8006044:	d00b      	beq.n	800605e <pvPortMalloc+0x6e>
	__asm volatile
 8006046:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800604a:	f383 8811 	msr	BASEPRI, r3
 800604e:	f3bf 8f6f 	isb	sy
 8006052:	f3bf 8f4f 	dsb	sy
 8006056:	617b      	str	r3, [r7, #20]
}
 8006058:	bf00      	nop
 800605a:	bf00      	nop
 800605c:	e7fd      	b.n	800605a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d06f      	beq.n	8006144 <pvPortMalloc+0x154>
 8006064:	4b45      	ldr	r3, [pc, #276]	@ (800617c <pvPortMalloc+0x18c>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	429a      	cmp	r2, r3
 800606c:	d86a      	bhi.n	8006144 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800606e:	4b44      	ldr	r3, [pc, #272]	@ (8006180 <pvPortMalloc+0x190>)
 8006070:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006072:	4b43      	ldr	r3, [pc, #268]	@ (8006180 <pvPortMalloc+0x190>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006078:	e004      	b.n	8006084 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800607a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800607c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800607e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	429a      	cmp	r2, r3
 800608c:	d903      	bls.n	8006096 <pvPortMalloc+0xa6>
 800608e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d1f1      	bne.n	800607a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006096:	4b37      	ldr	r3, [pc, #220]	@ (8006174 <pvPortMalloc+0x184>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800609c:	429a      	cmp	r2, r3
 800609e:	d051      	beq.n	8006144 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80060a0:	6a3b      	ldr	r3, [r7, #32]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	2208      	movs	r2, #8
 80060a6:	4413      	add	r3, r2
 80060a8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80060aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ac:	681a      	ldr	r2, [r3, #0]
 80060ae:	6a3b      	ldr	r3, [r7, #32]
 80060b0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80060b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060b4:	685a      	ldr	r2, [r3, #4]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	1ad2      	subs	r2, r2, r3
 80060ba:	2308      	movs	r3, #8
 80060bc:	005b      	lsls	r3, r3, #1
 80060be:	429a      	cmp	r2, r3
 80060c0:	d920      	bls.n	8006104 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80060c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	4413      	add	r3, r2
 80060c8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80060ca:	69bb      	ldr	r3, [r7, #24]
 80060cc:	f003 0307 	and.w	r3, r3, #7
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d00b      	beq.n	80060ec <pvPortMalloc+0xfc>
	__asm volatile
 80060d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060d8:	f383 8811 	msr	BASEPRI, r3
 80060dc:	f3bf 8f6f 	isb	sy
 80060e0:	f3bf 8f4f 	dsb	sy
 80060e4:	613b      	str	r3, [r7, #16]
}
 80060e6:	bf00      	nop
 80060e8:	bf00      	nop
 80060ea:	e7fd      	b.n	80060e8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80060ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ee:	685a      	ldr	r2, [r3, #4]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	1ad2      	subs	r2, r2, r3
 80060f4:	69bb      	ldr	r3, [r7, #24]
 80060f6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80060f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80060fe:	69b8      	ldr	r0, [r7, #24]
 8006100:	f000 f90a 	bl	8006318 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006104:	4b1d      	ldr	r3, [pc, #116]	@ (800617c <pvPortMalloc+0x18c>)
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	1ad3      	subs	r3, r2, r3
 800610e:	4a1b      	ldr	r2, [pc, #108]	@ (800617c <pvPortMalloc+0x18c>)
 8006110:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006112:	4b1a      	ldr	r3, [pc, #104]	@ (800617c <pvPortMalloc+0x18c>)
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	4b1b      	ldr	r3, [pc, #108]	@ (8006184 <pvPortMalloc+0x194>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	429a      	cmp	r2, r3
 800611c:	d203      	bcs.n	8006126 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800611e:	4b17      	ldr	r3, [pc, #92]	@ (800617c <pvPortMalloc+0x18c>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a18      	ldr	r2, [pc, #96]	@ (8006184 <pvPortMalloc+0x194>)
 8006124:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006128:	685a      	ldr	r2, [r3, #4]
 800612a:	4b13      	ldr	r3, [pc, #76]	@ (8006178 <pvPortMalloc+0x188>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	431a      	orrs	r2, r3
 8006130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006132:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006136:	2200      	movs	r2, #0
 8006138:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800613a:	4b13      	ldr	r3, [pc, #76]	@ (8006188 <pvPortMalloc+0x198>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	3301      	adds	r3, #1
 8006140:	4a11      	ldr	r2, [pc, #68]	@ (8006188 <pvPortMalloc+0x198>)
 8006142:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006144:	f7ff faa4 	bl	8005690 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006148:	69fb      	ldr	r3, [r7, #28]
 800614a:	f003 0307 	and.w	r3, r3, #7
 800614e:	2b00      	cmp	r3, #0
 8006150:	d00b      	beq.n	800616a <pvPortMalloc+0x17a>
	__asm volatile
 8006152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006156:	f383 8811 	msr	BASEPRI, r3
 800615a:	f3bf 8f6f 	isb	sy
 800615e:	f3bf 8f4f 	dsb	sy
 8006162:	60fb      	str	r3, [r7, #12]
}
 8006164:	bf00      	nop
 8006166:	bf00      	nop
 8006168:	e7fd      	b.n	8006166 <pvPortMalloc+0x176>
	return pvReturn;
 800616a:	69fb      	ldr	r3, [r7, #28]
}
 800616c:	4618      	mov	r0, r3
 800616e:	3728      	adds	r7, #40	@ 0x28
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}
 8006174:	20001530 	.word	0x20001530
 8006178:	20001544 	.word	0x20001544
 800617c:	20001534 	.word	0x20001534
 8006180:	20001528 	.word	0x20001528
 8006184:	20001538 	.word	0x20001538
 8006188:	2000153c 	.word	0x2000153c

0800618c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b086      	sub	sp, #24
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d04f      	beq.n	800623e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800619e:	2308      	movs	r3, #8
 80061a0:	425b      	negs	r3, r3
 80061a2:	697a      	ldr	r2, [r7, #20]
 80061a4:	4413      	add	r3, r2
 80061a6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	685a      	ldr	r2, [r3, #4]
 80061b0:	4b25      	ldr	r3, [pc, #148]	@ (8006248 <vPortFree+0xbc>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4013      	ands	r3, r2
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d10b      	bne.n	80061d2 <vPortFree+0x46>
	__asm volatile
 80061ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061be:	f383 8811 	msr	BASEPRI, r3
 80061c2:	f3bf 8f6f 	isb	sy
 80061c6:	f3bf 8f4f 	dsb	sy
 80061ca:	60fb      	str	r3, [r7, #12]
}
 80061cc:	bf00      	nop
 80061ce:	bf00      	nop
 80061d0:	e7fd      	b.n	80061ce <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d00b      	beq.n	80061f2 <vPortFree+0x66>
	__asm volatile
 80061da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061de:	f383 8811 	msr	BASEPRI, r3
 80061e2:	f3bf 8f6f 	isb	sy
 80061e6:	f3bf 8f4f 	dsb	sy
 80061ea:	60bb      	str	r3, [r7, #8]
}
 80061ec:	bf00      	nop
 80061ee:	bf00      	nop
 80061f0:	e7fd      	b.n	80061ee <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	685a      	ldr	r2, [r3, #4]
 80061f6:	4b14      	ldr	r3, [pc, #80]	@ (8006248 <vPortFree+0xbc>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4013      	ands	r3, r2
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d01e      	beq.n	800623e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d11a      	bne.n	800623e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	685a      	ldr	r2, [r3, #4]
 800620c:	4b0e      	ldr	r3, [pc, #56]	@ (8006248 <vPortFree+0xbc>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	43db      	mvns	r3, r3
 8006212:	401a      	ands	r2, r3
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006218:	f7ff fa2c 	bl	8005674 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	685a      	ldr	r2, [r3, #4]
 8006220:	4b0a      	ldr	r3, [pc, #40]	@ (800624c <vPortFree+0xc0>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4413      	add	r3, r2
 8006226:	4a09      	ldr	r2, [pc, #36]	@ (800624c <vPortFree+0xc0>)
 8006228:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800622a:	6938      	ldr	r0, [r7, #16]
 800622c:	f000 f874 	bl	8006318 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006230:	4b07      	ldr	r3, [pc, #28]	@ (8006250 <vPortFree+0xc4>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	3301      	adds	r3, #1
 8006236:	4a06      	ldr	r2, [pc, #24]	@ (8006250 <vPortFree+0xc4>)
 8006238:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800623a:	f7ff fa29 	bl	8005690 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800623e:	bf00      	nop
 8006240:	3718      	adds	r7, #24
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
 8006246:	bf00      	nop
 8006248:	20001544 	.word	0x20001544
 800624c:	20001534 	.word	0x20001534
 8006250:	20001540 	.word	0x20001540

08006254 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006254:	b480      	push	{r7}
 8006256:	b085      	sub	sp, #20
 8006258:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800625a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800625e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006260:	4b27      	ldr	r3, [pc, #156]	@ (8006300 <prvHeapInit+0xac>)
 8006262:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f003 0307 	and.w	r3, r3, #7
 800626a:	2b00      	cmp	r3, #0
 800626c:	d00c      	beq.n	8006288 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	3307      	adds	r3, #7
 8006272:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f023 0307 	bic.w	r3, r3, #7
 800627a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800627c:	68ba      	ldr	r2, [r7, #8]
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	1ad3      	subs	r3, r2, r3
 8006282:	4a1f      	ldr	r2, [pc, #124]	@ (8006300 <prvHeapInit+0xac>)
 8006284:	4413      	add	r3, r2
 8006286:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800628c:	4a1d      	ldr	r2, [pc, #116]	@ (8006304 <prvHeapInit+0xb0>)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006292:	4b1c      	ldr	r3, [pc, #112]	@ (8006304 <prvHeapInit+0xb0>)
 8006294:	2200      	movs	r2, #0
 8006296:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	68ba      	ldr	r2, [r7, #8]
 800629c:	4413      	add	r3, r2
 800629e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80062a0:	2208      	movs	r2, #8
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	1a9b      	subs	r3, r3, r2
 80062a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f023 0307 	bic.w	r3, r3, #7
 80062ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	4a15      	ldr	r2, [pc, #84]	@ (8006308 <prvHeapInit+0xb4>)
 80062b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80062b6:	4b14      	ldr	r3, [pc, #80]	@ (8006308 <prvHeapInit+0xb4>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	2200      	movs	r2, #0
 80062bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80062be:	4b12      	ldr	r3, [pc, #72]	@ (8006308 <prvHeapInit+0xb4>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	2200      	movs	r2, #0
 80062c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	68fa      	ldr	r2, [r7, #12]
 80062ce:	1ad2      	subs	r2, r2, r3
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80062d4:	4b0c      	ldr	r3, [pc, #48]	@ (8006308 <prvHeapInit+0xb4>)
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	4a0a      	ldr	r2, [pc, #40]	@ (800630c <prvHeapInit+0xb8>)
 80062e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	4a09      	ldr	r2, [pc, #36]	@ (8006310 <prvHeapInit+0xbc>)
 80062ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80062ec:	4b09      	ldr	r3, [pc, #36]	@ (8006314 <prvHeapInit+0xc0>)
 80062ee:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80062f2:	601a      	str	r2, [r3, #0]
}
 80062f4:	bf00      	nop
 80062f6:	3714      	adds	r7, #20
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bc80      	pop	{r7}
 80062fc:	4770      	bx	lr
 80062fe:	bf00      	nop
 8006300:	20000928 	.word	0x20000928
 8006304:	20001528 	.word	0x20001528
 8006308:	20001530 	.word	0x20001530
 800630c:	20001538 	.word	0x20001538
 8006310:	20001534 	.word	0x20001534
 8006314:	20001544 	.word	0x20001544

08006318 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006318:	b480      	push	{r7}
 800631a:	b085      	sub	sp, #20
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006320:	4b27      	ldr	r3, [pc, #156]	@ (80063c0 <prvInsertBlockIntoFreeList+0xa8>)
 8006322:	60fb      	str	r3, [r7, #12]
 8006324:	e002      	b.n	800632c <prvInsertBlockIntoFreeList+0x14>
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	60fb      	str	r3, [r7, #12]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	429a      	cmp	r2, r3
 8006334:	d8f7      	bhi.n	8006326 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	68ba      	ldr	r2, [r7, #8]
 8006340:	4413      	add	r3, r2
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	429a      	cmp	r2, r3
 8006346:	d108      	bne.n	800635a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	685a      	ldr	r2, [r3, #4]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	441a      	add	r2, r3
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	68ba      	ldr	r2, [r7, #8]
 8006364:	441a      	add	r2, r3
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	429a      	cmp	r2, r3
 800636c:	d118      	bne.n	80063a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	4b14      	ldr	r3, [pc, #80]	@ (80063c4 <prvInsertBlockIntoFreeList+0xac>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	429a      	cmp	r2, r3
 8006378:	d00d      	beq.n	8006396 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	685a      	ldr	r2, [r3, #4]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	441a      	add	r2, r3
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	601a      	str	r2, [r3, #0]
 8006394:	e008      	b.n	80063a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006396:	4b0b      	ldr	r3, [pc, #44]	@ (80063c4 <prvInsertBlockIntoFreeList+0xac>)
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	601a      	str	r2, [r3, #0]
 800639e:	e003      	b.n	80063a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681a      	ldr	r2, [r3, #0]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80063a8:	68fa      	ldr	r2, [r7, #12]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d002      	beq.n	80063b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80063b6:	bf00      	nop
 80063b8:	3714      	adds	r7, #20
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bc80      	pop	{r7}
 80063be:	4770      	bx	lr
 80063c0:	20001528 	.word	0x20001528
 80063c4:	20001530 	.word	0x20001530

080063c8 <__cvt>:
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063ce:	461d      	mov	r5, r3
 80063d0:	bfbb      	ittet	lt
 80063d2:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80063d6:	461d      	movlt	r5, r3
 80063d8:	2300      	movge	r3, #0
 80063da:	232d      	movlt	r3, #45	@ 0x2d
 80063dc:	b088      	sub	sp, #32
 80063de:	4614      	mov	r4, r2
 80063e0:	bfb8      	it	lt
 80063e2:	4614      	movlt	r4, r2
 80063e4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80063e6:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80063e8:	7013      	strb	r3, [r2, #0]
 80063ea:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80063ec:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80063f0:	f023 0820 	bic.w	r8, r3, #32
 80063f4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80063f8:	d005      	beq.n	8006406 <__cvt+0x3e>
 80063fa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80063fe:	d100      	bne.n	8006402 <__cvt+0x3a>
 8006400:	3601      	adds	r6, #1
 8006402:	2302      	movs	r3, #2
 8006404:	e000      	b.n	8006408 <__cvt+0x40>
 8006406:	2303      	movs	r3, #3
 8006408:	aa07      	add	r2, sp, #28
 800640a:	9204      	str	r2, [sp, #16]
 800640c:	aa06      	add	r2, sp, #24
 800640e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006412:	e9cd 3600 	strd	r3, r6, [sp]
 8006416:	4622      	mov	r2, r4
 8006418:	462b      	mov	r3, r5
 800641a:	f001 f8e5 	bl	80075e8 <_dtoa_r>
 800641e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006422:	4607      	mov	r7, r0
 8006424:	d119      	bne.n	800645a <__cvt+0x92>
 8006426:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006428:	07db      	lsls	r3, r3, #31
 800642a:	d50e      	bpl.n	800644a <__cvt+0x82>
 800642c:	eb00 0906 	add.w	r9, r0, r6
 8006430:	2200      	movs	r2, #0
 8006432:	2300      	movs	r3, #0
 8006434:	4620      	mov	r0, r4
 8006436:	4629      	mov	r1, r5
 8006438:	f7fa fab6 	bl	80009a8 <__aeabi_dcmpeq>
 800643c:	b108      	cbz	r0, 8006442 <__cvt+0x7a>
 800643e:	f8cd 901c 	str.w	r9, [sp, #28]
 8006442:	2230      	movs	r2, #48	@ 0x30
 8006444:	9b07      	ldr	r3, [sp, #28]
 8006446:	454b      	cmp	r3, r9
 8006448:	d31e      	bcc.n	8006488 <__cvt+0xc0>
 800644a:	4638      	mov	r0, r7
 800644c:	9b07      	ldr	r3, [sp, #28]
 800644e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006450:	1bdb      	subs	r3, r3, r7
 8006452:	6013      	str	r3, [r2, #0]
 8006454:	b008      	add	sp, #32
 8006456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800645a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800645e:	eb00 0906 	add.w	r9, r0, r6
 8006462:	d1e5      	bne.n	8006430 <__cvt+0x68>
 8006464:	7803      	ldrb	r3, [r0, #0]
 8006466:	2b30      	cmp	r3, #48	@ 0x30
 8006468:	d10a      	bne.n	8006480 <__cvt+0xb8>
 800646a:	2200      	movs	r2, #0
 800646c:	2300      	movs	r3, #0
 800646e:	4620      	mov	r0, r4
 8006470:	4629      	mov	r1, r5
 8006472:	f7fa fa99 	bl	80009a8 <__aeabi_dcmpeq>
 8006476:	b918      	cbnz	r0, 8006480 <__cvt+0xb8>
 8006478:	f1c6 0601 	rsb	r6, r6, #1
 800647c:	f8ca 6000 	str.w	r6, [sl]
 8006480:	f8da 3000 	ldr.w	r3, [sl]
 8006484:	4499      	add	r9, r3
 8006486:	e7d3      	b.n	8006430 <__cvt+0x68>
 8006488:	1c59      	adds	r1, r3, #1
 800648a:	9107      	str	r1, [sp, #28]
 800648c:	701a      	strb	r2, [r3, #0]
 800648e:	e7d9      	b.n	8006444 <__cvt+0x7c>

08006490 <__exponent>:
 8006490:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006492:	2900      	cmp	r1, #0
 8006494:	bfb6      	itet	lt
 8006496:	232d      	movlt	r3, #45	@ 0x2d
 8006498:	232b      	movge	r3, #43	@ 0x2b
 800649a:	4249      	neglt	r1, r1
 800649c:	2909      	cmp	r1, #9
 800649e:	7002      	strb	r2, [r0, #0]
 80064a0:	7043      	strb	r3, [r0, #1]
 80064a2:	dd29      	ble.n	80064f8 <__exponent+0x68>
 80064a4:	f10d 0307 	add.w	r3, sp, #7
 80064a8:	461d      	mov	r5, r3
 80064aa:	270a      	movs	r7, #10
 80064ac:	fbb1 f6f7 	udiv	r6, r1, r7
 80064b0:	461a      	mov	r2, r3
 80064b2:	fb07 1416 	mls	r4, r7, r6, r1
 80064b6:	3430      	adds	r4, #48	@ 0x30
 80064b8:	f802 4c01 	strb.w	r4, [r2, #-1]
 80064bc:	460c      	mov	r4, r1
 80064be:	2c63      	cmp	r4, #99	@ 0x63
 80064c0:	4631      	mov	r1, r6
 80064c2:	f103 33ff 	add.w	r3, r3, #4294967295
 80064c6:	dcf1      	bgt.n	80064ac <__exponent+0x1c>
 80064c8:	3130      	adds	r1, #48	@ 0x30
 80064ca:	1e94      	subs	r4, r2, #2
 80064cc:	f803 1c01 	strb.w	r1, [r3, #-1]
 80064d0:	4623      	mov	r3, r4
 80064d2:	1c41      	adds	r1, r0, #1
 80064d4:	42ab      	cmp	r3, r5
 80064d6:	d30a      	bcc.n	80064ee <__exponent+0x5e>
 80064d8:	f10d 0309 	add.w	r3, sp, #9
 80064dc:	1a9b      	subs	r3, r3, r2
 80064de:	42ac      	cmp	r4, r5
 80064e0:	bf88      	it	hi
 80064e2:	2300      	movhi	r3, #0
 80064e4:	3302      	adds	r3, #2
 80064e6:	4403      	add	r3, r0
 80064e8:	1a18      	subs	r0, r3, r0
 80064ea:	b003      	add	sp, #12
 80064ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064ee:	f813 6b01 	ldrb.w	r6, [r3], #1
 80064f2:	f801 6f01 	strb.w	r6, [r1, #1]!
 80064f6:	e7ed      	b.n	80064d4 <__exponent+0x44>
 80064f8:	2330      	movs	r3, #48	@ 0x30
 80064fa:	3130      	adds	r1, #48	@ 0x30
 80064fc:	7083      	strb	r3, [r0, #2]
 80064fe:	70c1      	strb	r1, [r0, #3]
 8006500:	1d03      	adds	r3, r0, #4
 8006502:	e7f1      	b.n	80064e8 <__exponent+0x58>

08006504 <_printf_float>:
 8006504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006508:	b091      	sub	sp, #68	@ 0x44
 800650a:	460c      	mov	r4, r1
 800650c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8006510:	4616      	mov	r6, r2
 8006512:	461f      	mov	r7, r3
 8006514:	4605      	mov	r5, r0
 8006516:	f000 fef1 	bl	80072fc <_localeconv_r>
 800651a:	6803      	ldr	r3, [r0, #0]
 800651c:	4618      	mov	r0, r3
 800651e:	9308      	str	r3, [sp, #32]
 8006520:	f7f9 fe16 	bl	8000150 <strlen>
 8006524:	2300      	movs	r3, #0
 8006526:	930e      	str	r3, [sp, #56]	@ 0x38
 8006528:	f8d8 3000 	ldr.w	r3, [r8]
 800652c:	9009      	str	r0, [sp, #36]	@ 0x24
 800652e:	3307      	adds	r3, #7
 8006530:	f023 0307 	bic.w	r3, r3, #7
 8006534:	f103 0208 	add.w	r2, r3, #8
 8006538:	f894 a018 	ldrb.w	sl, [r4, #24]
 800653c:	f8d4 b000 	ldr.w	fp, [r4]
 8006540:	f8c8 2000 	str.w	r2, [r8]
 8006544:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006548:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800654c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800654e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8006552:	f04f 32ff 	mov.w	r2, #4294967295
 8006556:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800655a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800655e:	4b9c      	ldr	r3, [pc, #624]	@ (80067d0 <_printf_float+0x2cc>)
 8006560:	f7fa fa54 	bl	8000a0c <__aeabi_dcmpun>
 8006564:	bb70      	cbnz	r0, 80065c4 <_printf_float+0xc0>
 8006566:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800656a:	f04f 32ff 	mov.w	r2, #4294967295
 800656e:	4b98      	ldr	r3, [pc, #608]	@ (80067d0 <_printf_float+0x2cc>)
 8006570:	f7fa fa2e 	bl	80009d0 <__aeabi_dcmple>
 8006574:	bb30      	cbnz	r0, 80065c4 <_printf_float+0xc0>
 8006576:	2200      	movs	r2, #0
 8006578:	2300      	movs	r3, #0
 800657a:	4640      	mov	r0, r8
 800657c:	4649      	mov	r1, r9
 800657e:	f7fa fa1d 	bl	80009bc <__aeabi_dcmplt>
 8006582:	b110      	cbz	r0, 800658a <_printf_float+0x86>
 8006584:	232d      	movs	r3, #45	@ 0x2d
 8006586:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800658a:	4a92      	ldr	r2, [pc, #584]	@ (80067d4 <_printf_float+0x2d0>)
 800658c:	4b92      	ldr	r3, [pc, #584]	@ (80067d8 <_printf_float+0x2d4>)
 800658e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006592:	bf94      	ite	ls
 8006594:	4690      	movls	r8, r2
 8006596:	4698      	movhi	r8, r3
 8006598:	2303      	movs	r3, #3
 800659a:	f04f 0900 	mov.w	r9, #0
 800659e:	6123      	str	r3, [r4, #16]
 80065a0:	f02b 0304 	bic.w	r3, fp, #4
 80065a4:	6023      	str	r3, [r4, #0]
 80065a6:	4633      	mov	r3, r6
 80065a8:	4621      	mov	r1, r4
 80065aa:	4628      	mov	r0, r5
 80065ac:	9700      	str	r7, [sp, #0]
 80065ae:	aa0f      	add	r2, sp, #60	@ 0x3c
 80065b0:	f000 f9d4 	bl	800695c <_printf_common>
 80065b4:	3001      	adds	r0, #1
 80065b6:	f040 8090 	bne.w	80066da <_printf_float+0x1d6>
 80065ba:	f04f 30ff 	mov.w	r0, #4294967295
 80065be:	b011      	add	sp, #68	@ 0x44
 80065c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065c4:	4642      	mov	r2, r8
 80065c6:	464b      	mov	r3, r9
 80065c8:	4640      	mov	r0, r8
 80065ca:	4649      	mov	r1, r9
 80065cc:	f7fa fa1e 	bl	8000a0c <__aeabi_dcmpun>
 80065d0:	b148      	cbz	r0, 80065e6 <_printf_float+0xe2>
 80065d2:	464b      	mov	r3, r9
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	bfb8      	it	lt
 80065d8:	232d      	movlt	r3, #45	@ 0x2d
 80065da:	4a80      	ldr	r2, [pc, #512]	@ (80067dc <_printf_float+0x2d8>)
 80065dc:	bfb8      	it	lt
 80065de:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80065e2:	4b7f      	ldr	r3, [pc, #508]	@ (80067e0 <_printf_float+0x2dc>)
 80065e4:	e7d3      	b.n	800658e <_printf_float+0x8a>
 80065e6:	6863      	ldr	r3, [r4, #4]
 80065e8:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80065ec:	1c5a      	adds	r2, r3, #1
 80065ee:	d13f      	bne.n	8006670 <_printf_float+0x16c>
 80065f0:	2306      	movs	r3, #6
 80065f2:	6063      	str	r3, [r4, #4]
 80065f4:	2200      	movs	r2, #0
 80065f6:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80065fa:	6023      	str	r3, [r4, #0]
 80065fc:	9206      	str	r2, [sp, #24]
 80065fe:	aa0e      	add	r2, sp, #56	@ 0x38
 8006600:	e9cd a204 	strd	sl, r2, [sp, #16]
 8006604:	aa0d      	add	r2, sp, #52	@ 0x34
 8006606:	9203      	str	r2, [sp, #12]
 8006608:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800660c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006610:	6863      	ldr	r3, [r4, #4]
 8006612:	4642      	mov	r2, r8
 8006614:	9300      	str	r3, [sp, #0]
 8006616:	4628      	mov	r0, r5
 8006618:	464b      	mov	r3, r9
 800661a:	910a      	str	r1, [sp, #40]	@ 0x28
 800661c:	f7ff fed4 	bl	80063c8 <__cvt>
 8006620:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006622:	4680      	mov	r8, r0
 8006624:	2947      	cmp	r1, #71	@ 0x47
 8006626:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8006628:	d128      	bne.n	800667c <_printf_float+0x178>
 800662a:	1cc8      	adds	r0, r1, #3
 800662c:	db02      	blt.n	8006634 <_printf_float+0x130>
 800662e:	6863      	ldr	r3, [r4, #4]
 8006630:	4299      	cmp	r1, r3
 8006632:	dd40      	ble.n	80066b6 <_printf_float+0x1b2>
 8006634:	f1aa 0a02 	sub.w	sl, sl, #2
 8006638:	fa5f fa8a 	uxtb.w	sl, sl
 800663c:	4652      	mov	r2, sl
 800663e:	3901      	subs	r1, #1
 8006640:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006644:	910d      	str	r1, [sp, #52]	@ 0x34
 8006646:	f7ff ff23 	bl	8006490 <__exponent>
 800664a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800664c:	4681      	mov	r9, r0
 800664e:	1813      	adds	r3, r2, r0
 8006650:	2a01      	cmp	r2, #1
 8006652:	6123      	str	r3, [r4, #16]
 8006654:	dc02      	bgt.n	800665c <_printf_float+0x158>
 8006656:	6822      	ldr	r2, [r4, #0]
 8006658:	07d2      	lsls	r2, r2, #31
 800665a:	d501      	bpl.n	8006660 <_printf_float+0x15c>
 800665c:	3301      	adds	r3, #1
 800665e:	6123      	str	r3, [r4, #16]
 8006660:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8006664:	2b00      	cmp	r3, #0
 8006666:	d09e      	beq.n	80065a6 <_printf_float+0xa2>
 8006668:	232d      	movs	r3, #45	@ 0x2d
 800666a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800666e:	e79a      	b.n	80065a6 <_printf_float+0xa2>
 8006670:	2947      	cmp	r1, #71	@ 0x47
 8006672:	d1bf      	bne.n	80065f4 <_printf_float+0xf0>
 8006674:	2b00      	cmp	r3, #0
 8006676:	d1bd      	bne.n	80065f4 <_printf_float+0xf0>
 8006678:	2301      	movs	r3, #1
 800667a:	e7ba      	b.n	80065f2 <_printf_float+0xee>
 800667c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006680:	d9dc      	bls.n	800663c <_printf_float+0x138>
 8006682:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006686:	d118      	bne.n	80066ba <_printf_float+0x1b6>
 8006688:	2900      	cmp	r1, #0
 800668a:	6863      	ldr	r3, [r4, #4]
 800668c:	dd0b      	ble.n	80066a6 <_printf_float+0x1a2>
 800668e:	6121      	str	r1, [r4, #16]
 8006690:	b913      	cbnz	r3, 8006698 <_printf_float+0x194>
 8006692:	6822      	ldr	r2, [r4, #0]
 8006694:	07d0      	lsls	r0, r2, #31
 8006696:	d502      	bpl.n	800669e <_printf_float+0x19a>
 8006698:	3301      	adds	r3, #1
 800669a:	440b      	add	r3, r1
 800669c:	6123      	str	r3, [r4, #16]
 800669e:	f04f 0900 	mov.w	r9, #0
 80066a2:	65a1      	str	r1, [r4, #88]	@ 0x58
 80066a4:	e7dc      	b.n	8006660 <_printf_float+0x15c>
 80066a6:	b913      	cbnz	r3, 80066ae <_printf_float+0x1aa>
 80066a8:	6822      	ldr	r2, [r4, #0]
 80066aa:	07d2      	lsls	r2, r2, #31
 80066ac:	d501      	bpl.n	80066b2 <_printf_float+0x1ae>
 80066ae:	3302      	adds	r3, #2
 80066b0:	e7f4      	b.n	800669c <_printf_float+0x198>
 80066b2:	2301      	movs	r3, #1
 80066b4:	e7f2      	b.n	800669c <_printf_float+0x198>
 80066b6:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80066ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80066bc:	4299      	cmp	r1, r3
 80066be:	db05      	blt.n	80066cc <_printf_float+0x1c8>
 80066c0:	6823      	ldr	r3, [r4, #0]
 80066c2:	6121      	str	r1, [r4, #16]
 80066c4:	07d8      	lsls	r0, r3, #31
 80066c6:	d5ea      	bpl.n	800669e <_printf_float+0x19a>
 80066c8:	1c4b      	adds	r3, r1, #1
 80066ca:	e7e7      	b.n	800669c <_printf_float+0x198>
 80066cc:	2900      	cmp	r1, #0
 80066ce:	bfcc      	ite	gt
 80066d0:	2201      	movgt	r2, #1
 80066d2:	f1c1 0202 	rsble	r2, r1, #2
 80066d6:	4413      	add	r3, r2
 80066d8:	e7e0      	b.n	800669c <_printf_float+0x198>
 80066da:	6823      	ldr	r3, [r4, #0]
 80066dc:	055a      	lsls	r2, r3, #21
 80066de:	d407      	bmi.n	80066f0 <_printf_float+0x1ec>
 80066e0:	6923      	ldr	r3, [r4, #16]
 80066e2:	4642      	mov	r2, r8
 80066e4:	4631      	mov	r1, r6
 80066e6:	4628      	mov	r0, r5
 80066e8:	47b8      	blx	r7
 80066ea:	3001      	adds	r0, #1
 80066ec:	d12b      	bne.n	8006746 <_printf_float+0x242>
 80066ee:	e764      	b.n	80065ba <_printf_float+0xb6>
 80066f0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80066f4:	f240 80dc 	bls.w	80068b0 <_printf_float+0x3ac>
 80066f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80066fc:	2200      	movs	r2, #0
 80066fe:	2300      	movs	r3, #0
 8006700:	f7fa f952 	bl	80009a8 <__aeabi_dcmpeq>
 8006704:	2800      	cmp	r0, #0
 8006706:	d033      	beq.n	8006770 <_printf_float+0x26c>
 8006708:	2301      	movs	r3, #1
 800670a:	4631      	mov	r1, r6
 800670c:	4628      	mov	r0, r5
 800670e:	4a35      	ldr	r2, [pc, #212]	@ (80067e4 <_printf_float+0x2e0>)
 8006710:	47b8      	blx	r7
 8006712:	3001      	adds	r0, #1
 8006714:	f43f af51 	beq.w	80065ba <_printf_float+0xb6>
 8006718:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800671c:	4543      	cmp	r3, r8
 800671e:	db02      	blt.n	8006726 <_printf_float+0x222>
 8006720:	6823      	ldr	r3, [r4, #0]
 8006722:	07d8      	lsls	r0, r3, #31
 8006724:	d50f      	bpl.n	8006746 <_printf_float+0x242>
 8006726:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800672a:	4631      	mov	r1, r6
 800672c:	4628      	mov	r0, r5
 800672e:	47b8      	blx	r7
 8006730:	3001      	adds	r0, #1
 8006732:	f43f af42 	beq.w	80065ba <_printf_float+0xb6>
 8006736:	f04f 0900 	mov.w	r9, #0
 800673a:	f108 38ff 	add.w	r8, r8, #4294967295
 800673e:	f104 0a1a 	add.w	sl, r4, #26
 8006742:	45c8      	cmp	r8, r9
 8006744:	dc09      	bgt.n	800675a <_printf_float+0x256>
 8006746:	6823      	ldr	r3, [r4, #0]
 8006748:	079b      	lsls	r3, r3, #30
 800674a:	f100 8102 	bmi.w	8006952 <_printf_float+0x44e>
 800674e:	68e0      	ldr	r0, [r4, #12]
 8006750:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006752:	4298      	cmp	r0, r3
 8006754:	bfb8      	it	lt
 8006756:	4618      	movlt	r0, r3
 8006758:	e731      	b.n	80065be <_printf_float+0xba>
 800675a:	2301      	movs	r3, #1
 800675c:	4652      	mov	r2, sl
 800675e:	4631      	mov	r1, r6
 8006760:	4628      	mov	r0, r5
 8006762:	47b8      	blx	r7
 8006764:	3001      	adds	r0, #1
 8006766:	f43f af28 	beq.w	80065ba <_printf_float+0xb6>
 800676a:	f109 0901 	add.w	r9, r9, #1
 800676e:	e7e8      	b.n	8006742 <_printf_float+0x23e>
 8006770:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006772:	2b00      	cmp	r3, #0
 8006774:	dc38      	bgt.n	80067e8 <_printf_float+0x2e4>
 8006776:	2301      	movs	r3, #1
 8006778:	4631      	mov	r1, r6
 800677a:	4628      	mov	r0, r5
 800677c:	4a19      	ldr	r2, [pc, #100]	@ (80067e4 <_printf_float+0x2e0>)
 800677e:	47b8      	blx	r7
 8006780:	3001      	adds	r0, #1
 8006782:	f43f af1a 	beq.w	80065ba <_printf_float+0xb6>
 8006786:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800678a:	ea59 0303 	orrs.w	r3, r9, r3
 800678e:	d102      	bne.n	8006796 <_printf_float+0x292>
 8006790:	6823      	ldr	r3, [r4, #0]
 8006792:	07d9      	lsls	r1, r3, #31
 8006794:	d5d7      	bpl.n	8006746 <_printf_float+0x242>
 8006796:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800679a:	4631      	mov	r1, r6
 800679c:	4628      	mov	r0, r5
 800679e:	47b8      	blx	r7
 80067a0:	3001      	adds	r0, #1
 80067a2:	f43f af0a 	beq.w	80065ba <_printf_float+0xb6>
 80067a6:	f04f 0a00 	mov.w	sl, #0
 80067aa:	f104 0b1a 	add.w	fp, r4, #26
 80067ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80067b0:	425b      	negs	r3, r3
 80067b2:	4553      	cmp	r3, sl
 80067b4:	dc01      	bgt.n	80067ba <_printf_float+0x2b6>
 80067b6:	464b      	mov	r3, r9
 80067b8:	e793      	b.n	80066e2 <_printf_float+0x1de>
 80067ba:	2301      	movs	r3, #1
 80067bc:	465a      	mov	r2, fp
 80067be:	4631      	mov	r1, r6
 80067c0:	4628      	mov	r0, r5
 80067c2:	47b8      	blx	r7
 80067c4:	3001      	adds	r0, #1
 80067c6:	f43f aef8 	beq.w	80065ba <_printf_float+0xb6>
 80067ca:	f10a 0a01 	add.w	sl, sl, #1
 80067ce:	e7ee      	b.n	80067ae <_printf_float+0x2aa>
 80067d0:	7fefffff 	.word	0x7fefffff
 80067d4:	0800bf5e 	.word	0x0800bf5e
 80067d8:	0800bf62 	.word	0x0800bf62
 80067dc:	0800bf66 	.word	0x0800bf66
 80067e0:	0800bf6a 	.word	0x0800bf6a
 80067e4:	0800bf6e 	.word	0x0800bf6e
 80067e8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80067ea:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80067ee:	4553      	cmp	r3, sl
 80067f0:	bfa8      	it	ge
 80067f2:	4653      	movge	r3, sl
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	4699      	mov	r9, r3
 80067f8:	dc36      	bgt.n	8006868 <_printf_float+0x364>
 80067fa:	f04f 0b00 	mov.w	fp, #0
 80067fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006802:	f104 021a 	add.w	r2, r4, #26
 8006806:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006808:	930a      	str	r3, [sp, #40]	@ 0x28
 800680a:	eba3 0309 	sub.w	r3, r3, r9
 800680e:	455b      	cmp	r3, fp
 8006810:	dc31      	bgt.n	8006876 <_printf_float+0x372>
 8006812:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006814:	459a      	cmp	sl, r3
 8006816:	dc3a      	bgt.n	800688e <_printf_float+0x38a>
 8006818:	6823      	ldr	r3, [r4, #0]
 800681a:	07da      	lsls	r2, r3, #31
 800681c:	d437      	bmi.n	800688e <_printf_float+0x38a>
 800681e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006820:	ebaa 0903 	sub.w	r9, sl, r3
 8006824:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006826:	ebaa 0303 	sub.w	r3, sl, r3
 800682a:	4599      	cmp	r9, r3
 800682c:	bfa8      	it	ge
 800682e:	4699      	movge	r9, r3
 8006830:	f1b9 0f00 	cmp.w	r9, #0
 8006834:	dc33      	bgt.n	800689e <_printf_float+0x39a>
 8006836:	f04f 0800 	mov.w	r8, #0
 800683a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800683e:	f104 0b1a 	add.w	fp, r4, #26
 8006842:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006844:	ebaa 0303 	sub.w	r3, sl, r3
 8006848:	eba3 0309 	sub.w	r3, r3, r9
 800684c:	4543      	cmp	r3, r8
 800684e:	f77f af7a 	ble.w	8006746 <_printf_float+0x242>
 8006852:	2301      	movs	r3, #1
 8006854:	465a      	mov	r2, fp
 8006856:	4631      	mov	r1, r6
 8006858:	4628      	mov	r0, r5
 800685a:	47b8      	blx	r7
 800685c:	3001      	adds	r0, #1
 800685e:	f43f aeac 	beq.w	80065ba <_printf_float+0xb6>
 8006862:	f108 0801 	add.w	r8, r8, #1
 8006866:	e7ec      	b.n	8006842 <_printf_float+0x33e>
 8006868:	4642      	mov	r2, r8
 800686a:	4631      	mov	r1, r6
 800686c:	4628      	mov	r0, r5
 800686e:	47b8      	blx	r7
 8006870:	3001      	adds	r0, #1
 8006872:	d1c2      	bne.n	80067fa <_printf_float+0x2f6>
 8006874:	e6a1      	b.n	80065ba <_printf_float+0xb6>
 8006876:	2301      	movs	r3, #1
 8006878:	4631      	mov	r1, r6
 800687a:	4628      	mov	r0, r5
 800687c:	920a      	str	r2, [sp, #40]	@ 0x28
 800687e:	47b8      	blx	r7
 8006880:	3001      	adds	r0, #1
 8006882:	f43f ae9a 	beq.w	80065ba <_printf_float+0xb6>
 8006886:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006888:	f10b 0b01 	add.w	fp, fp, #1
 800688c:	e7bb      	b.n	8006806 <_printf_float+0x302>
 800688e:	4631      	mov	r1, r6
 8006890:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006894:	4628      	mov	r0, r5
 8006896:	47b8      	blx	r7
 8006898:	3001      	adds	r0, #1
 800689a:	d1c0      	bne.n	800681e <_printf_float+0x31a>
 800689c:	e68d      	b.n	80065ba <_printf_float+0xb6>
 800689e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80068a0:	464b      	mov	r3, r9
 80068a2:	4631      	mov	r1, r6
 80068a4:	4628      	mov	r0, r5
 80068a6:	4442      	add	r2, r8
 80068a8:	47b8      	blx	r7
 80068aa:	3001      	adds	r0, #1
 80068ac:	d1c3      	bne.n	8006836 <_printf_float+0x332>
 80068ae:	e684      	b.n	80065ba <_printf_float+0xb6>
 80068b0:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80068b4:	f1ba 0f01 	cmp.w	sl, #1
 80068b8:	dc01      	bgt.n	80068be <_printf_float+0x3ba>
 80068ba:	07db      	lsls	r3, r3, #31
 80068bc:	d536      	bpl.n	800692c <_printf_float+0x428>
 80068be:	2301      	movs	r3, #1
 80068c0:	4642      	mov	r2, r8
 80068c2:	4631      	mov	r1, r6
 80068c4:	4628      	mov	r0, r5
 80068c6:	47b8      	blx	r7
 80068c8:	3001      	adds	r0, #1
 80068ca:	f43f ae76 	beq.w	80065ba <_printf_float+0xb6>
 80068ce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80068d2:	4631      	mov	r1, r6
 80068d4:	4628      	mov	r0, r5
 80068d6:	47b8      	blx	r7
 80068d8:	3001      	adds	r0, #1
 80068da:	f43f ae6e 	beq.w	80065ba <_printf_float+0xb6>
 80068de:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80068e2:	2200      	movs	r2, #0
 80068e4:	2300      	movs	r3, #0
 80068e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80068ea:	f7fa f85d 	bl	80009a8 <__aeabi_dcmpeq>
 80068ee:	b9c0      	cbnz	r0, 8006922 <_printf_float+0x41e>
 80068f0:	4653      	mov	r3, sl
 80068f2:	f108 0201 	add.w	r2, r8, #1
 80068f6:	4631      	mov	r1, r6
 80068f8:	4628      	mov	r0, r5
 80068fa:	47b8      	blx	r7
 80068fc:	3001      	adds	r0, #1
 80068fe:	d10c      	bne.n	800691a <_printf_float+0x416>
 8006900:	e65b      	b.n	80065ba <_printf_float+0xb6>
 8006902:	2301      	movs	r3, #1
 8006904:	465a      	mov	r2, fp
 8006906:	4631      	mov	r1, r6
 8006908:	4628      	mov	r0, r5
 800690a:	47b8      	blx	r7
 800690c:	3001      	adds	r0, #1
 800690e:	f43f ae54 	beq.w	80065ba <_printf_float+0xb6>
 8006912:	f108 0801 	add.w	r8, r8, #1
 8006916:	45d0      	cmp	r8, sl
 8006918:	dbf3      	blt.n	8006902 <_printf_float+0x3fe>
 800691a:	464b      	mov	r3, r9
 800691c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006920:	e6e0      	b.n	80066e4 <_printf_float+0x1e0>
 8006922:	f04f 0800 	mov.w	r8, #0
 8006926:	f104 0b1a 	add.w	fp, r4, #26
 800692a:	e7f4      	b.n	8006916 <_printf_float+0x412>
 800692c:	2301      	movs	r3, #1
 800692e:	4642      	mov	r2, r8
 8006930:	e7e1      	b.n	80068f6 <_printf_float+0x3f2>
 8006932:	2301      	movs	r3, #1
 8006934:	464a      	mov	r2, r9
 8006936:	4631      	mov	r1, r6
 8006938:	4628      	mov	r0, r5
 800693a:	47b8      	blx	r7
 800693c:	3001      	adds	r0, #1
 800693e:	f43f ae3c 	beq.w	80065ba <_printf_float+0xb6>
 8006942:	f108 0801 	add.w	r8, r8, #1
 8006946:	68e3      	ldr	r3, [r4, #12]
 8006948:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800694a:	1a5b      	subs	r3, r3, r1
 800694c:	4543      	cmp	r3, r8
 800694e:	dcf0      	bgt.n	8006932 <_printf_float+0x42e>
 8006950:	e6fd      	b.n	800674e <_printf_float+0x24a>
 8006952:	f04f 0800 	mov.w	r8, #0
 8006956:	f104 0919 	add.w	r9, r4, #25
 800695a:	e7f4      	b.n	8006946 <_printf_float+0x442>

0800695c <_printf_common>:
 800695c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006960:	4616      	mov	r6, r2
 8006962:	4698      	mov	r8, r3
 8006964:	688a      	ldr	r2, [r1, #8]
 8006966:	690b      	ldr	r3, [r1, #16]
 8006968:	4607      	mov	r7, r0
 800696a:	4293      	cmp	r3, r2
 800696c:	bfb8      	it	lt
 800696e:	4613      	movlt	r3, r2
 8006970:	6033      	str	r3, [r6, #0]
 8006972:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006976:	460c      	mov	r4, r1
 8006978:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800697c:	b10a      	cbz	r2, 8006982 <_printf_common+0x26>
 800697e:	3301      	adds	r3, #1
 8006980:	6033      	str	r3, [r6, #0]
 8006982:	6823      	ldr	r3, [r4, #0]
 8006984:	0699      	lsls	r1, r3, #26
 8006986:	bf42      	ittt	mi
 8006988:	6833      	ldrmi	r3, [r6, #0]
 800698a:	3302      	addmi	r3, #2
 800698c:	6033      	strmi	r3, [r6, #0]
 800698e:	6825      	ldr	r5, [r4, #0]
 8006990:	f015 0506 	ands.w	r5, r5, #6
 8006994:	d106      	bne.n	80069a4 <_printf_common+0x48>
 8006996:	f104 0a19 	add.w	sl, r4, #25
 800699a:	68e3      	ldr	r3, [r4, #12]
 800699c:	6832      	ldr	r2, [r6, #0]
 800699e:	1a9b      	subs	r3, r3, r2
 80069a0:	42ab      	cmp	r3, r5
 80069a2:	dc2b      	bgt.n	80069fc <_printf_common+0xa0>
 80069a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80069a8:	6822      	ldr	r2, [r4, #0]
 80069aa:	3b00      	subs	r3, #0
 80069ac:	bf18      	it	ne
 80069ae:	2301      	movne	r3, #1
 80069b0:	0692      	lsls	r2, r2, #26
 80069b2:	d430      	bmi.n	8006a16 <_printf_common+0xba>
 80069b4:	4641      	mov	r1, r8
 80069b6:	4638      	mov	r0, r7
 80069b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80069bc:	47c8      	blx	r9
 80069be:	3001      	adds	r0, #1
 80069c0:	d023      	beq.n	8006a0a <_printf_common+0xae>
 80069c2:	6823      	ldr	r3, [r4, #0]
 80069c4:	6922      	ldr	r2, [r4, #16]
 80069c6:	f003 0306 	and.w	r3, r3, #6
 80069ca:	2b04      	cmp	r3, #4
 80069cc:	bf14      	ite	ne
 80069ce:	2500      	movne	r5, #0
 80069d0:	6833      	ldreq	r3, [r6, #0]
 80069d2:	f04f 0600 	mov.w	r6, #0
 80069d6:	bf08      	it	eq
 80069d8:	68e5      	ldreq	r5, [r4, #12]
 80069da:	f104 041a 	add.w	r4, r4, #26
 80069de:	bf08      	it	eq
 80069e0:	1aed      	subeq	r5, r5, r3
 80069e2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80069e6:	bf08      	it	eq
 80069e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80069ec:	4293      	cmp	r3, r2
 80069ee:	bfc4      	itt	gt
 80069f0:	1a9b      	subgt	r3, r3, r2
 80069f2:	18ed      	addgt	r5, r5, r3
 80069f4:	42b5      	cmp	r5, r6
 80069f6:	d11a      	bne.n	8006a2e <_printf_common+0xd2>
 80069f8:	2000      	movs	r0, #0
 80069fa:	e008      	b.n	8006a0e <_printf_common+0xb2>
 80069fc:	2301      	movs	r3, #1
 80069fe:	4652      	mov	r2, sl
 8006a00:	4641      	mov	r1, r8
 8006a02:	4638      	mov	r0, r7
 8006a04:	47c8      	blx	r9
 8006a06:	3001      	adds	r0, #1
 8006a08:	d103      	bne.n	8006a12 <_printf_common+0xb6>
 8006a0a:	f04f 30ff 	mov.w	r0, #4294967295
 8006a0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a12:	3501      	adds	r5, #1
 8006a14:	e7c1      	b.n	800699a <_printf_common+0x3e>
 8006a16:	2030      	movs	r0, #48	@ 0x30
 8006a18:	18e1      	adds	r1, r4, r3
 8006a1a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006a1e:	1c5a      	adds	r2, r3, #1
 8006a20:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006a24:	4422      	add	r2, r4
 8006a26:	3302      	adds	r3, #2
 8006a28:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006a2c:	e7c2      	b.n	80069b4 <_printf_common+0x58>
 8006a2e:	2301      	movs	r3, #1
 8006a30:	4622      	mov	r2, r4
 8006a32:	4641      	mov	r1, r8
 8006a34:	4638      	mov	r0, r7
 8006a36:	47c8      	blx	r9
 8006a38:	3001      	adds	r0, #1
 8006a3a:	d0e6      	beq.n	8006a0a <_printf_common+0xae>
 8006a3c:	3601      	adds	r6, #1
 8006a3e:	e7d9      	b.n	80069f4 <_printf_common+0x98>

08006a40 <_printf_i>:
 8006a40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a44:	7e0f      	ldrb	r7, [r1, #24]
 8006a46:	4691      	mov	r9, r2
 8006a48:	2f78      	cmp	r7, #120	@ 0x78
 8006a4a:	4680      	mov	r8, r0
 8006a4c:	460c      	mov	r4, r1
 8006a4e:	469a      	mov	sl, r3
 8006a50:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006a52:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006a56:	d807      	bhi.n	8006a68 <_printf_i+0x28>
 8006a58:	2f62      	cmp	r7, #98	@ 0x62
 8006a5a:	d80a      	bhi.n	8006a72 <_printf_i+0x32>
 8006a5c:	2f00      	cmp	r7, #0
 8006a5e:	f000 80d3 	beq.w	8006c08 <_printf_i+0x1c8>
 8006a62:	2f58      	cmp	r7, #88	@ 0x58
 8006a64:	f000 80ba 	beq.w	8006bdc <_printf_i+0x19c>
 8006a68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006a6c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006a70:	e03a      	b.n	8006ae8 <_printf_i+0xa8>
 8006a72:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006a76:	2b15      	cmp	r3, #21
 8006a78:	d8f6      	bhi.n	8006a68 <_printf_i+0x28>
 8006a7a:	a101      	add	r1, pc, #4	@ (adr r1, 8006a80 <_printf_i+0x40>)
 8006a7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006a80:	08006ad9 	.word	0x08006ad9
 8006a84:	08006aed 	.word	0x08006aed
 8006a88:	08006a69 	.word	0x08006a69
 8006a8c:	08006a69 	.word	0x08006a69
 8006a90:	08006a69 	.word	0x08006a69
 8006a94:	08006a69 	.word	0x08006a69
 8006a98:	08006aed 	.word	0x08006aed
 8006a9c:	08006a69 	.word	0x08006a69
 8006aa0:	08006a69 	.word	0x08006a69
 8006aa4:	08006a69 	.word	0x08006a69
 8006aa8:	08006a69 	.word	0x08006a69
 8006aac:	08006bef 	.word	0x08006bef
 8006ab0:	08006b17 	.word	0x08006b17
 8006ab4:	08006ba9 	.word	0x08006ba9
 8006ab8:	08006a69 	.word	0x08006a69
 8006abc:	08006a69 	.word	0x08006a69
 8006ac0:	08006c11 	.word	0x08006c11
 8006ac4:	08006a69 	.word	0x08006a69
 8006ac8:	08006b17 	.word	0x08006b17
 8006acc:	08006a69 	.word	0x08006a69
 8006ad0:	08006a69 	.word	0x08006a69
 8006ad4:	08006bb1 	.word	0x08006bb1
 8006ad8:	6833      	ldr	r3, [r6, #0]
 8006ada:	1d1a      	adds	r2, r3, #4
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	6032      	str	r2, [r6, #0]
 8006ae0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006ae4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e09e      	b.n	8006c2a <_printf_i+0x1ea>
 8006aec:	6833      	ldr	r3, [r6, #0]
 8006aee:	6820      	ldr	r0, [r4, #0]
 8006af0:	1d19      	adds	r1, r3, #4
 8006af2:	6031      	str	r1, [r6, #0]
 8006af4:	0606      	lsls	r6, r0, #24
 8006af6:	d501      	bpl.n	8006afc <_printf_i+0xbc>
 8006af8:	681d      	ldr	r5, [r3, #0]
 8006afa:	e003      	b.n	8006b04 <_printf_i+0xc4>
 8006afc:	0645      	lsls	r5, r0, #25
 8006afe:	d5fb      	bpl.n	8006af8 <_printf_i+0xb8>
 8006b00:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006b04:	2d00      	cmp	r5, #0
 8006b06:	da03      	bge.n	8006b10 <_printf_i+0xd0>
 8006b08:	232d      	movs	r3, #45	@ 0x2d
 8006b0a:	426d      	negs	r5, r5
 8006b0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b10:	230a      	movs	r3, #10
 8006b12:	4859      	ldr	r0, [pc, #356]	@ (8006c78 <_printf_i+0x238>)
 8006b14:	e011      	b.n	8006b3a <_printf_i+0xfa>
 8006b16:	6821      	ldr	r1, [r4, #0]
 8006b18:	6833      	ldr	r3, [r6, #0]
 8006b1a:	0608      	lsls	r0, r1, #24
 8006b1c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006b20:	d402      	bmi.n	8006b28 <_printf_i+0xe8>
 8006b22:	0649      	lsls	r1, r1, #25
 8006b24:	bf48      	it	mi
 8006b26:	b2ad      	uxthmi	r5, r5
 8006b28:	2f6f      	cmp	r7, #111	@ 0x6f
 8006b2a:	6033      	str	r3, [r6, #0]
 8006b2c:	bf14      	ite	ne
 8006b2e:	230a      	movne	r3, #10
 8006b30:	2308      	moveq	r3, #8
 8006b32:	4851      	ldr	r0, [pc, #324]	@ (8006c78 <_printf_i+0x238>)
 8006b34:	2100      	movs	r1, #0
 8006b36:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006b3a:	6866      	ldr	r6, [r4, #4]
 8006b3c:	2e00      	cmp	r6, #0
 8006b3e:	bfa8      	it	ge
 8006b40:	6821      	ldrge	r1, [r4, #0]
 8006b42:	60a6      	str	r6, [r4, #8]
 8006b44:	bfa4      	itt	ge
 8006b46:	f021 0104 	bicge.w	r1, r1, #4
 8006b4a:	6021      	strge	r1, [r4, #0]
 8006b4c:	b90d      	cbnz	r5, 8006b52 <_printf_i+0x112>
 8006b4e:	2e00      	cmp	r6, #0
 8006b50:	d04b      	beq.n	8006bea <_printf_i+0x1aa>
 8006b52:	4616      	mov	r6, r2
 8006b54:	fbb5 f1f3 	udiv	r1, r5, r3
 8006b58:	fb03 5711 	mls	r7, r3, r1, r5
 8006b5c:	5dc7      	ldrb	r7, [r0, r7]
 8006b5e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006b62:	462f      	mov	r7, r5
 8006b64:	42bb      	cmp	r3, r7
 8006b66:	460d      	mov	r5, r1
 8006b68:	d9f4      	bls.n	8006b54 <_printf_i+0x114>
 8006b6a:	2b08      	cmp	r3, #8
 8006b6c:	d10b      	bne.n	8006b86 <_printf_i+0x146>
 8006b6e:	6823      	ldr	r3, [r4, #0]
 8006b70:	07df      	lsls	r7, r3, #31
 8006b72:	d508      	bpl.n	8006b86 <_printf_i+0x146>
 8006b74:	6923      	ldr	r3, [r4, #16]
 8006b76:	6861      	ldr	r1, [r4, #4]
 8006b78:	4299      	cmp	r1, r3
 8006b7a:	bfde      	ittt	le
 8006b7c:	2330      	movle	r3, #48	@ 0x30
 8006b7e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006b82:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006b86:	1b92      	subs	r2, r2, r6
 8006b88:	6122      	str	r2, [r4, #16]
 8006b8a:	464b      	mov	r3, r9
 8006b8c:	4621      	mov	r1, r4
 8006b8e:	4640      	mov	r0, r8
 8006b90:	f8cd a000 	str.w	sl, [sp]
 8006b94:	aa03      	add	r2, sp, #12
 8006b96:	f7ff fee1 	bl	800695c <_printf_common>
 8006b9a:	3001      	adds	r0, #1
 8006b9c:	d14a      	bne.n	8006c34 <_printf_i+0x1f4>
 8006b9e:	f04f 30ff 	mov.w	r0, #4294967295
 8006ba2:	b004      	add	sp, #16
 8006ba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ba8:	6823      	ldr	r3, [r4, #0]
 8006baa:	f043 0320 	orr.w	r3, r3, #32
 8006bae:	6023      	str	r3, [r4, #0]
 8006bb0:	2778      	movs	r7, #120	@ 0x78
 8006bb2:	4832      	ldr	r0, [pc, #200]	@ (8006c7c <_printf_i+0x23c>)
 8006bb4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006bb8:	6823      	ldr	r3, [r4, #0]
 8006bba:	6831      	ldr	r1, [r6, #0]
 8006bbc:	061f      	lsls	r7, r3, #24
 8006bbe:	f851 5b04 	ldr.w	r5, [r1], #4
 8006bc2:	d402      	bmi.n	8006bca <_printf_i+0x18a>
 8006bc4:	065f      	lsls	r7, r3, #25
 8006bc6:	bf48      	it	mi
 8006bc8:	b2ad      	uxthmi	r5, r5
 8006bca:	6031      	str	r1, [r6, #0]
 8006bcc:	07d9      	lsls	r1, r3, #31
 8006bce:	bf44      	itt	mi
 8006bd0:	f043 0320 	orrmi.w	r3, r3, #32
 8006bd4:	6023      	strmi	r3, [r4, #0]
 8006bd6:	b11d      	cbz	r5, 8006be0 <_printf_i+0x1a0>
 8006bd8:	2310      	movs	r3, #16
 8006bda:	e7ab      	b.n	8006b34 <_printf_i+0xf4>
 8006bdc:	4826      	ldr	r0, [pc, #152]	@ (8006c78 <_printf_i+0x238>)
 8006bde:	e7e9      	b.n	8006bb4 <_printf_i+0x174>
 8006be0:	6823      	ldr	r3, [r4, #0]
 8006be2:	f023 0320 	bic.w	r3, r3, #32
 8006be6:	6023      	str	r3, [r4, #0]
 8006be8:	e7f6      	b.n	8006bd8 <_printf_i+0x198>
 8006bea:	4616      	mov	r6, r2
 8006bec:	e7bd      	b.n	8006b6a <_printf_i+0x12a>
 8006bee:	6833      	ldr	r3, [r6, #0]
 8006bf0:	6825      	ldr	r5, [r4, #0]
 8006bf2:	1d18      	adds	r0, r3, #4
 8006bf4:	6961      	ldr	r1, [r4, #20]
 8006bf6:	6030      	str	r0, [r6, #0]
 8006bf8:	062e      	lsls	r6, r5, #24
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	d501      	bpl.n	8006c02 <_printf_i+0x1c2>
 8006bfe:	6019      	str	r1, [r3, #0]
 8006c00:	e002      	b.n	8006c08 <_printf_i+0x1c8>
 8006c02:	0668      	lsls	r0, r5, #25
 8006c04:	d5fb      	bpl.n	8006bfe <_printf_i+0x1be>
 8006c06:	8019      	strh	r1, [r3, #0]
 8006c08:	2300      	movs	r3, #0
 8006c0a:	4616      	mov	r6, r2
 8006c0c:	6123      	str	r3, [r4, #16]
 8006c0e:	e7bc      	b.n	8006b8a <_printf_i+0x14a>
 8006c10:	6833      	ldr	r3, [r6, #0]
 8006c12:	2100      	movs	r1, #0
 8006c14:	1d1a      	adds	r2, r3, #4
 8006c16:	6032      	str	r2, [r6, #0]
 8006c18:	681e      	ldr	r6, [r3, #0]
 8006c1a:	6862      	ldr	r2, [r4, #4]
 8006c1c:	4630      	mov	r0, r6
 8006c1e:	f000 fc3a 	bl	8007496 <memchr>
 8006c22:	b108      	cbz	r0, 8006c28 <_printf_i+0x1e8>
 8006c24:	1b80      	subs	r0, r0, r6
 8006c26:	6060      	str	r0, [r4, #4]
 8006c28:	6863      	ldr	r3, [r4, #4]
 8006c2a:	6123      	str	r3, [r4, #16]
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c32:	e7aa      	b.n	8006b8a <_printf_i+0x14a>
 8006c34:	4632      	mov	r2, r6
 8006c36:	4649      	mov	r1, r9
 8006c38:	4640      	mov	r0, r8
 8006c3a:	6923      	ldr	r3, [r4, #16]
 8006c3c:	47d0      	blx	sl
 8006c3e:	3001      	adds	r0, #1
 8006c40:	d0ad      	beq.n	8006b9e <_printf_i+0x15e>
 8006c42:	6823      	ldr	r3, [r4, #0]
 8006c44:	079b      	lsls	r3, r3, #30
 8006c46:	d413      	bmi.n	8006c70 <_printf_i+0x230>
 8006c48:	68e0      	ldr	r0, [r4, #12]
 8006c4a:	9b03      	ldr	r3, [sp, #12]
 8006c4c:	4298      	cmp	r0, r3
 8006c4e:	bfb8      	it	lt
 8006c50:	4618      	movlt	r0, r3
 8006c52:	e7a6      	b.n	8006ba2 <_printf_i+0x162>
 8006c54:	2301      	movs	r3, #1
 8006c56:	4632      	mov	r2, r6
 8006c58:	4649      	mov	r1, r9
 8006c5a:	4640      	mov	r0, r8
 8006c5c:	47d0      	blx	sl
 8006c5e:	3001      	adds	r0, #1
 8006c60:	d09d      	beq.n	8006b9e <_printf_i+0x15e>
 8006c62:	3501      	adds	r5, #1
 8006c64:	68e3      	ldr	r3, [r4, #12]
 8006c66:	9903      	ldr	r1, [sp, #12]
 8006c68:	1a5b      	subs	r3, r3, r1
 8006c6a:	42ab      	cmp	r3, r5
 8006c6c:	dcf2      	bgt.n	8006c54 <_printf_i+0x214>
 8006c6e:	e7eb      	b.n	8006c48 <_printf_i+0x208>
 8006c70:	2500      	movs	r5, #0
 8006c72:	f104 0619 	add.w	r6, r4, #25
 8006c76:	e7f5      	b.n	8006c64 <_printf_i+0x224>
 8006c78:	0800bf70 	.word	0x0800bf70
 8006c7c:	0800bf81 	.word	0x0800bf81

08006c80 <_scanf_float>:
 8006c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c84:	b087      	sub	sp, #28
 8006c86:	9303      	str	r3, [sp, #12]
 8006c88:	688b      	ldr	r3, [r1, #8]
 8006c8a:	4617      	mov	r7, r2
 8006c8c:	1e5a      	subs	r2, r3, #1
 8006c8e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006c92:	bf82      	ittt	hi
 8006c94:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006c98:	eb03 0b05 	addhi.w	fp, r3, r5
 8006c9c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006ca0:	460a      	mov	r2, r1
 8006ca2:	f04f 0500 	mov.w	r5, #0
 8006ca6:	bf88      	it	hi
 8006ca8:	608b      	strhi	r3, [r1, #8]
 8006caa:	680b      	ldr	r3, [r1, #0]
 8006cac:	4680      	mov	r8, r0
 8006cae:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8006cb2:	f842 3b1c 	str.w	r3, [r2], #28
 8006cb6:	460c      	mov	r4, r1
 8006cb8:	bf98      	it	ls
 8006cba:	f04f 0b00 	movls.w	fp, #0
 8006cbe:	4616      	mov	r6, r2
 8006cc0:	46aa      	mov	sl, r5
 8006cc2:	46a9      	mov	r9, r5
 8006cc4:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006cc8:	9201      	str	r2, [sp, #4]
 8006cca:	9502      	str	r5, [sp, #8]
 8006ccc:	68a2      	ldr	r2, [r4, #8]
 8006cce:	b152      	cbz	r2, 8006ce6 <_scanf_float+0x66>
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	781b      	ldrb	r3, [r3, #0]
 8006cd4:	2b4e      	cmp	r3, #78	@ 0x4e
 8006cd6:	d865      	bhi.n	8006da4 <_scanf_float+0x124>
 8006cd8:	2b40      	cmp	r3, #64	@ 0x40
 8006cda:	d83d      	bhi.n	8006d58 <_scanf_float+0xd8>
 8006cdc:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006ce0:	b2c8      	uxtb	r0, r1
 8006ce2:	280e      	cmp	r0, #14
 8006ce4:	d93b      	bls.n	8006d5e <_scanf_float+0xde>
 8006ce6:	f1b9 0f00 	cmp.w	r9, #0
 8006cea:	d003      	beq.n	8006cf4 <_scanf_float+0x74>
 8006cec:	6823      	ldr	r3, [r4, #0]
 8006cee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006cf2:	6023      	str	r3, [r4, #0]
 8006cf4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006cf8:	f1ba 0f01 	cmp.w	sl, #1
 8006cfc:	f200 8118 	bhi.w	8006f30 <_scanf_float+0x2b0>
 8006d00:	9b01      	ldr	r3, [sp, #4]
 8006d02:	429e      	cmp	r6, r3
 8006d04:	f200 8109 	bhi.w	8006f1a <_scanf_float+0x29a>
 8006d08:	2001      	movs	r0, #1
 8006d0a:	b007      	add	sp, #28
 8006d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d10:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8006d14:	2a0d      	cmp	r2, #13
 8006d16:	d8e6      	bhi.n	8006ce6 <_scanf_float+0x66>
 8006d18:	a101      	add	r1, pc, #4	@ (adr r1, 8006d20 <_scanf_float+0xa0>)
 8006d1a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006d1e:	bf00      	nop
 8006d20:	08006e67 	.word	0x08006e67
 8006d24:	08006ce7 	.word	0x08006ce7
 8006d28:	08006ce7 	.word	0x08006ce7
 8006d2c:	08006ce7 	.word	0x08006ce7
 8006d30:	08006ec7 	.word	0x08006ec7
 8006d34:	08006e9f 	.word	0x08006e9f
 8006d38:	08006ce7 	.word	0x08006ce7
 8006d3c:	08006ce7 	.word	0x08006ce7
 8006d40:	08006e75 	.word	0x08006e75
 8006d44:	08006ce7 	.word	0x08006ce7
 8006d48:	08006ce7 	.word	0x08006ce7
 8006d4c:	08006ce7 	.word	0x08006ce7
 8006d50:	08006ce7 	.word	0x08006ce7
 8006d54:	08006e2d 	.word	0x08006e2d
 8006d58:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8006d5c:	e7da      	b.n	8006d14 <_scanf_float+0x94>
 8006d5e:	290e      	cmp	r1, #14
 8006d60:	d8c1      	bhi.n	8006ce6 <_scanf_float+0x66>
 8006d62:	a001      	add	r0, pc, #4	@ (adr r0, 8006d68 <_scanf_float+0xe8>)
 8006d64:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006d68:	08006e1d 	.word	0x08006e1d
 8006d6c:	08006ce7 	.word	0x08006ce7
 8006d70:	08006e1d 	.word	0x08006e1d
 8006d74:	08006eb3 	.word	0x08006eb3
 8006d78:	08006ce7 	.word	0x08006ce7
 8006d7c:	08006dc5 	.word	0x08006dc5
 8006d80:	08006e03 	.word	0x08006e03
 8006d84:	08006e03 	.word	0x08006e03
 8006d88:	08006e03 	.word	0x08006e03
 8006d8c:	08006e03 	.word	0x08006e03
 8006d90:	08006e03 	.word	0x08006e03
 8006d94:	08006e03 	.word	0x08006e03
 8006d98:	08006e03 	.word	0x08006e03
 8006d9c:	08006e03 	.word	0x08006e03
 8006da0:	08006e03 	.word	0x08006e03
 8006da4:	2b6e      	cmp	r3, #110	@ 0x6e
 8006da6:	d809      	bhi.n	8006dbc <_scanf_float+0x13c>
 8006da8:	2b60      	cmp	r3, #96	@ 0x60
 8006daa:	d8b1      	bhi.n	8006d10 <_scanf_float+0x90>
 8006dac:	2b54      	cmp	r3, #84	@ 0x54
 8006dae:	d07b      	beq.n	8006ea8 <_scanf_float+0x228>
 8006db0:	2b59      	cmp	r3, #89	@ 0x59
 8006db2:	d198      	bne.n	8006ce6 <_scanf_float+0x66>
 8006db4:	2d07      	cmp	r5, #7
 8006db6:	d196      	bne.n	8006ce6 <_scanf_float+0x66>
 8006db8:	2508      	movs	r5, #8
 8006dba:	e02c      	b.n	8006e16 <_scanf_float+0x196>
 8006dbc:	2b74      	cmp	r3, #116	@ 0x74
 8006dbe:	d073      	beq.n	8006ea8 <_scanf_float+0x228>
 8006dc0:	2b79      	cmp	r3, #121	@ 0x79
 8006dc2:	e7f6      	b.n	8006db2 <_scanf_float+0x132>
 8006dc4:	6821      	ldr	r1, [r4, #0]
 8006dc6:	05c8      	lsls	r0, r1, #23
 8006dc8:	d51b      	bpl.n	8006e02 <_scanf_float+0x182>
 8006dca:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8006dce:	6021      	str	r1, [r4, #0]
 8006dd0:	f109 0901 	add.w	r9, r9, #1
 8006dd4:	f1bb 0f00 	cmp.w	fp, #0
 8006dd8:	d003      	beq.n	8006de2 <_scanf_float+0x162>
 8006dda:	3201      	adds	r2, #1
 8006ddc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006de0:	60a2      	str	r2, [r4, #8]
 8006de2:	68a3      	ldr	r3, [r4, #8]
 8006de4:	3b01      	subs	r3, #1
 8006de6:	60a3      	str	r3, [r4, #8]
 8006de8:	6923      	ldr	r3, [r4, #16]
 8006dea:	3301      	adds	r3, #1
 8006dec:	6123      	str	r3, [r4, #16]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	3b01      	subs	r3, #1
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	607b      	str	r3, [r7, #4]
 8006df6:	f340 8087 	ble.w	8006f08 <_scanf_float+0x288>
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	3301      	adds	r3, #1
 8006dfe:	603b      	str	r3, [r7, #0]
 8006e00:	e764      	b.n	8006ccc <_scanf_float+0x4c>
 8006e02:	eb1a 0105 	adds.w	r1, sl, r5
 8006e06:	f47f af6e 	bne.w	8006ce6 <_scanf_float+0x66>
 8006e0a:	460d      	mov	r5, r1
 8006e0c:	468a      	mov	sl, r1
 8006e0e:	6822      	ldr	r2, [r4, #0]
 8006e10:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006e14:	6022      	str	r2, [r4, #0]
 8006e16:	f806 3b01 	strb.w	r3, [r6], #1
 8006e1a:	e7e2      	b.n	8006de2 <_scanf_float+0x162>
 8006e1c:	6822      	ldr	r2, [r4, #0]
 8006e1e:	0610      	lsls	r0, r2, #24
 8006e20:	f57f af61 	bpl.w	8006ce6 <_scanf_float+0x66>
 8006e24:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006e28:	6022      	str	r2, [r4, #0]
 8006e2a:	e7f4      	b.n	8006e16 <_scanf_float+0x196>
 8006e2c:	f1ba 0f00 	cmp.w	sl, #0
 8006e30:	d10e      	bne.n	8006e50 <_scanf_float+0x1d0>
 8006e32:	f1b9 0f00 	cmp.w	r9, #0
 8006e36:	d10e      	bne.n	8006e56 <_scanf_float+0x1d6>
 8006e38:	6822      	ldr	r2, [r4, #0]
 8006e3a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006e3e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006e42:	d108      	bne.n	8006e56 <_scanf_float+0x1d6>
 8006e44:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006e48:	f04f 0a01 	mov.w	sl, #1
 8006e4c:	6022      	str	r2, [r4, #0]
 8006e4e:	e7e2      	b.n	8006e16 <_scanf_float+0x196>
 8006e50:	f1ba 0f02 	cmp.w	sl, #2
 8006e54:	d055      	beq.n	8006f02 <_scanf_float+0x282>
 8006e56:	2d01      	cmp	r5, #1
 8006e58:	d002      	beq.n	8006e60 <_scanf_float+0x1e0>
 8006e5a:	2d04      	cmp	r5, #4
 8006e5c:	f47f af43 	bne.w	8006ce6 <_scanf_float+0x66>
 8006e60:	3501      	adds	r5, #1
 8006e62:	b2ed      	uxtb	r5, r5
 8006e64:	e7d7      	b.n	8006e16 <_scanf_float+0x196>
 8006e66:	f1ba 0f01 	cmp.w	sl, #1
 8006e6a:	f47f af3c 	bne.w	8006ce6 <_scanf_float+0x66>
 8006e6e:	f04f 0a02 	mov.w	sl, #2
 8006e72:	e7d0      	b.n	8006e16 <_scanf_float+0x196>
 8006e74:	b97d      	cbnz	r5, 8006e96 <_scanf_float+0x216>
 8006e76:	f1b9 0f00 	cmp.w	r9, #0
 8006e7a:	f47f af37 	bne.w	8006cec <_scanf_float+0x6c>
 8006e7e:	6822      	ldr	r2, [r4, #0]
 8006e80:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006e84:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006e88:	f040 8103 	bne.w	8007092 <_scanf_float+0x412>
 8006e8c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006e90:	2501      	movs	r5, #1
 8006e92:	6022      	str	r2, [r4, #0]
 8006e94:	e7bf      	b.n	8006e16 <_scanf_float+0x196>
 8006e96:	2d03      	cmp	r5, #3
 8006e98:	d0e2      	beq.n	8006e60 <_scanf_float+0x1e0>
 8006e9a:	2d05      	cmp	r5, #5
 8006e9c:	e7de      	b.n	8006e5c <_scanf_float+0x1dc>
 8006e9e:	2d02      	cmp	r5, #2
 8006ea0:	f47f af21 	bne.w	8006ce6 <_scanf_float+0x66>
 8006ea4:	2503      	movs	r5, #3
 8006ea6:	e7b6      	b.n	8006e16 <_scanf_float+0x196>
 8006ea8:	2d06      	cmp	r5, #6
 8006eaa:	f47f af1c 	bne.w	8006ce6 <_scanf_float+0x66>
 8006eae:	2507      	movs	r5, #7
 8006eb0:	e7b1      	b.n	8006e16 <_scanf_float+0x196>
 8006eb2:	6822      	ldr	r2, [r4, #0]
 8006eb4:	0591      	lsls	r1, r2, #22
 8006eb6:	f57f af16 	bpl.w	8006ce6 <_scanf_float+0x66>
 8006eba:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8006ebe:	6022      	str	r2, [r4, #0]
 8006ec0:	f8cd 9008 	str.w	r9, [sp, #8]
 8006ec4:	e7a7      	b.n	8006e16 <_scanf_float+0x196>
 8006ec6:	6822      	ldr	r2, [r4, #0]
 8006ec8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8006ecc:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006ed0:	d006      	beq.n	8006ee0 <_scanf_float+0x260>
 8006ed2:	0550      	lsls	r0, r2, #21
 8006ed4:	f57f af07 	bpl.w	8006ce6 <_scanf_float+0x66>
 8006ed8:	f1b9 0f00 	cmp.w	r9, #0
 8006edc:	f000 80d9 	beq.w	8007092 <_scanf_float+0x412>
 8006ee0:	0591      	lsls	r1, r2, #22
 8006ee2:	bf58      	it	pl
 8006ee4:	9902      	ldrpl	r1, [sp, #8]
 8006ee6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006eea:	bf58      	it	pl
 8006eec:	eba9 0101 	subpl.w	r1, r9, r1
 8006ef0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8006ef4:	f04f 0900 	mov.w	r9, #0
 8006ef8:	bf58      	it	pl
 8006efa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006efe:	6022      	str	r2, [r4, #0]
 8006f00:	e789      	b.n	8006e16 <_scanf_float+0x196>
 8006f02:	f04f 0a03 	mov.w	sl, #3
 8006f06:	e786      	b.n	8006e16 <_scanf_float+0x196>
 8006f08:	4639      	mov	r1, r7
 8006f0a:	4640      	mov	r0, r8
 8006f0c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006f10:	4798      	blx	r3
 8006f12:	2800      	cmp	r0, #0
 8006f14:	f43f aeda 	beq.w	8006ccc <_scanf_float+0x4c>
 8006f18:	e6e5      	b.n	8006ce6 <_scanf_float+0x66>
 8006f1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006f1e:	463a      	mov	r2, r7
 8006f20:	4640      	mov	r0, r8
 8006f22:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006f26:	4798      	blx	r3
 8006f28:	6923      	ldr	r3, [r4, #16]
 8006f2a:	3b01      	subs	r3, #1
 8006f2c:	6123      	str	r3, [r4, #16]
 8006f2e:	e6e7      	b.n	8006d00 <_scanf_float+0x80>
 8006f30:	1e6b      	subs	r3, r5, #1
 8006f32:	2b06      	cmp	r3, #6
 8006f34:	d824      	bhi.n	8006f80 <_scanf_float+0x300>
 8006f36:	2d02      	cmp	r5, #2
 8006f38:	d836      	bhi.n	8006fa8 <_scanf_float+0x328>
 8006f3a:	9b01      	ldr	r3, [sp, #4]
 8006f3c:	429e      	cmp	r6, r3
 8006f3e:	f67f aee3 	bls.w	8006d08 <_scanf_float+0x88>
 8006f42:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006f46:	463a      	mov	r2, r7
 8006f48:	4640      	mov	r0, r8
 8006f4a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006f4e:	4798      	blx	r3
 8006f50:	6923      	ldr	r3, [r4, #16]
 8006f52:	3b01      	subs	r3, #1
 8006f54:	6123      	str	r3, [r4, #16]
 8006f56:	e7f0      	b.n	8006f3a <_scanf_float+0x2ba>
 8006f58:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006f5c:	463a      	mov	r2, r7
 8006f5e:	4640      	mov	r0, r8
 8006f60:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006f64:	4798      	blx	r3
 8006f66:	6923      	ldr	r3, [r4, #16]
 8006f68:	3b01      	subs	r3, #1
 8006f6a:	6123      	str	r3, [r4, #16]
 8006f6c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006f70:	fa5f fa8a 	uxtb.w	sl, sl
 8006f74:	f1ba 0f02 	cmp.w	sl, #2
 8006f78:	d1ee      	bne.n	8006f58 <_scanf_float+0x2d8>
 8006f7a:	3d03      	subs	r5, #3
 8006f7c:	b2ed      	uxtb	r5, r5
 8006f7e:	1b76      	subs	r6, r6, r5
 8006f80:	6823      	ldr	r3, [r4, #0]
 8006f82:	05da      	lsls	r2, r3, #23
 8006f84:	d530      	bpl.n	8006fe8 <_scanf_float+0x368>
 8006f86:	055b      	lsls	r3, r3, #21
 8006f88:	d511      	bpl.n	8006fae <_scanf_float+0x32e>
 8006f8a:	9b01      	ldr	r3, [sp, #4]
 8006f8c:	429e      	cmp	r6, r3
 8006f8e:	f67f aebb 	bls.w	8006d08 <_scanf_float+0x88>
 8006f92:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006f96:	463a      	mov	r2, r7
 8006f98:	4640      	mov	r0, r8
 8006f9a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006f9e:	4798      	blx	r3
 8006fa0:	6923      	ldr	r3, [r4, #16]
 8006fa2:	3b01      	subs	r3, #1
 8006fa4:	6123      	str	r3, [r4, #16]
 8006fa6:	e7f0      	b.n	8006f8a <_scanf_float+0x30a>
 8006fa8:	46aa      	mov	sl, r5
 8006faa:	46b3      	mov	fp, r6
 8006fac:	e7de      	b.n	8006f6c <_scanf_float+0x2ec>
 8006fae:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006fb2:	6923      	ldr	r3, [r4, #16]
 8006fb4:	2965      	cmp	r1, #101	@ 0x65
 8006fb6:	f103 33ff 	add.w	r3, r3, #4294967295
 8006fba:	f106 35ff 	add.w	r5, r6, #4294967295
 8006fbe:	6123      	str	r3, [r4, #16]
 8006fc0:	d00c      	beq.n	8006fdc <_scanf_float+0x35c>
 8006fc2:	2945      	cmp	r1, #69	@ 0x45
 8006fc4:	d00a      	beq.n	8006fdc <_scanf_float+0x35c>
 8006fc6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006fca:	463a      	mov	r2, r7
 8006fcc:	4640      	mov	r0, r8
 8006fce:	4798      	blx	r3
 8006fd0:	6923      	ldr	r3, [r4, #16]
 8006fd2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006fd6:	3b01      	subs	r3, #1
 8006fd8:	1eb5      	subs	r5, r6, #2
 8006fda:	6123      	str	r3, [r4, #16]
 8006fdc:	463a      	mov	r2, r7
 8006fde:	4640      	mov	r0, r8
 8006fe0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006fe4:	4798      	blx	r3
 8006fe6:	462e      	mov	r6, r5
 8006fe8:	6822      	ldr	r2, [r4, #0]
 8006fea:	f012 0210 	ands.w	r2, r2, #16
 8006fee:	d001      	beq.n	8006ff4 <_scanf_float+0x374>
 8006ff0:	2000      	movs	r0, #0
 8006ff2:	e68a      	b.n	8006d0a <_scanf_float+0x8a>
 8006ff4:	7032      	strb	r2, [r6, #0]
 8006ff6:	6823      	ldr	r3, [r4, #0]
 8006ff8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006ffc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007000:	d11c      	bne.n	800703c <_scanf_float+0x3bc>
 8007002:	9b02      	ldr	r3, [sp, #8]
 8007004:	454b      	cmp	r3, r9
 8007006:	eba3 0209 	sub.w	r2, r3, r9
 800700a:	d123      	bne.n	8007054 <_scanf_float+0x3d4>
 800700c:	2200      	movs	r2, #0
 800700e:	4640      	mov	r0, r8
 8007010:	9901      	ldr	r1, [sp, #4]
 8007012:	f002 fc51 	bl	80098b8 <_strtod_r>
 8007016:	9b03      	ldr	r3, [sp, #12]
 8007018:	6825      	ldr	r5, [r4, #0]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f015 0f02 	tst.w	r5, #2
 8007020:	4606      	mov	r6, r0
 8007022:	460f      	mov	r7, r1
 8007024:	f103 0204 	add.w	r2, r3, #4
 8007028:	d01f      	beq.n	800706a <_scanf_float+0x3ea>
 800702a:	9903      	ldr	r1, [sp, #12]
 800702c:	600a      	str	r2, [r1, #0]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	e9c3 6700 	strd	r6, r7, [r3]
 8007034:	68e3      	ldr	r3, [r4, #12]
 8007036:	3301      	adds	r3, #1
 8007038:	60e3      	str	r3, [r4, #12]
 800703a:	e7d9      	b.n	8006ff0 <_scanf_float+0x370>
 800703c:	9b04      	ldr	r3, [sp, #16]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d0e4      	beq.n	800700c <_scanf_float+0x38c>
 8007042:	9905      	ldr	r1, [sp, #20]
 8007044:	230a      	movs	r3, #10
 8007046:	4640      	mov	r0, r8
 8007048:	3101      	adds	r1, #1
 800704a:	f002 fcb5 	bl	80099b8 <_strtol_r>
 800704e:	9b04      	ldr	r3, [sp, #16]
 8007050:	9e05      	ldr	r6, [sp, #20]
 8007052:	1ac2      	subs	r2, r0, r3
 8007054:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007058:	429e      	cmp	r6, r3
 800705a:	bf28      	it	cs
 800705c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007060:	4630      	mov	r0, r6
 8007062:	490d      	ldr	r1, [pc, #52]	@ (8007098 <_scanf_float+0x418>)
 8007064:	f000 f8de 	bl	8007224 <siprintf>
 8007068:	e7d0      	b.n	800700c <_scanf_float+0x38c>
 800706a:	076d      	lsls	r5, r5, #29
 800706c:	d4dd      	bmi.n	800702a <_scanf_float+0x3aa>
 800706e:	9d03      	ldr	r5, [sp, #12]
 8007070:	602a      	str	r2, [r5, #0]
 8007072:	681d      	ldr	r5, [r3, #0]
 8007074:	4602      	mov	r2, r0
 8007076:	460b      	mov	r3, r1
 8007078:	f7f9 fcc8 	bl	8000a0c <__aeabi_dcmpun>
 800707c:	b120      	cbz	r0, 8007088 <_scanf_float+0x408>
 800707e:	4807      	ldr	r0, [pc, #28]	@ (800709c <_scanf_float+0x41c>)
 8007080:	f000 fa26 	bl	80074d0 <nanf>
 8007084:	6028      	str	r0, [r5, #0]
 8007086:	e7d5      	b.n	8007034 <_scanf_float+0x3b4>
 8007088:	4630      	mov	r0, r6
 800708a:	4639      	mov	r1, r7
 800708c:	f7f9 fd1c 	bl	8000ac8 <__aeabi_d2f>
 8007090:	e7f8      	b.n	8007084 <_scanf_float+0x404>
 8007092:	f04f 0900 	mov.w	r9, #0
 8007096:	e62d      	b.n	8006cf4 <_scanf_float+0x74>
 8007098:	0800bf92 	.word	0x0800bf92
 800709c:	0800c32d 	.word	0x0800c32d

080070a0 <std>:
 80070a0:	2300      	movs	r3, #0
 80070a2:	b510      	push	{r4, lr}
 80070a4:	4604      	mov	r4, r0
 80070a6:	e9c0 3300 	strd	r3, r3, [r0]
 80070aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80070ae:	6083      	str	r3, [r0, #8]
 80070b0:	8181      	strh	r1, [r0, #12]
 80070b2:	6643      	str	r3, [r0, #100]	@ 0x64
 80070b4:	81c2      	strh	r2, [r0, #14]
 80070b6:	6183      	str	r3, [r0, #24]
 80070b8:	4619      	mov	r1, r3
 80070ba:	2208      	movs	r2, #8
 80070bc:	305c      	adds	r0, #92	@ 0x5c
 80070be:	f000 f914 	bl	80072ea <memset>
 80070c2:	4b0d      	ldr	r3, [pc, #52]	@ (80070f8 <std+0x58>)
 80070c4:	6224      	str	r4, [r4, #32]
 80070c6:	6263      	str	r3, [r4, #36]	@ 0x24
 80070c8:	4b0c      	ldr	r3, [pc, #48]	@ (80070fc <std+0x5c>)
 80070ca:	62a3      	str	r3, [r4, #40]	@ 0x28
 80070cc:	4b0c      	ldr	r3, [pc, #48]	@ (8007100 <std+0x60>)
 80070ce:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80070d0:	4b0c      	ldr	r3, [pc, #48]	@ (8007104 <std+0x64>)
 80070d2:	6323      	str	r3, [r4, #48]	@ 0x30
 80070d4:	4b0c      	ldr	r3, [pc, #48]	@ (8007108 <std+0x68>)
 80070d6:	429c      	cmp	r4, r3
 80070d8:	d006      	beq.n	80070e8 <std+0x48>
 80070da:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80070de:	4294      	cmp	r4, r2
 80070e0:	d002      	beq.n	80070e8 <std+0x48>
 80070e2:	33d0      	adds	r3, #208	@ 0xd0
 80070e4:	429c      	cmp	r4, r3
 80070e6:	d105      	bne.n	80070f4 <std+0x54>
 80070e8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80070ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070f0:	f000 b9ce 	b.w	8007490 <__retarget_lock_init_recursive>
 80070f4:	bd10      	pop	{r4, pc}
 80070f6:	bf00      	nop
 80070f8:	08007265 	.word	0x08007265
 80070fc:	08007287 	.word	0x08007287
 8007100:	080072bf 	.word	0x080072bf
 8007104:	080072e3 	.word	0x080072e3
 8007108:	20001548 	.word	0x20001548

0800710c <stdio_exit_handler>:
 800710c:	4a02      	ldr	r2, [pc, #8]	@ (8007118 <stdio_exit_handler+0xc>)
 800710e:	4903      	ldr	r1, [pc, #12]	@ (800711c <stdio_exit_handler+0x10>)
 8007110:	4803      	ldr	r0, [pc, #12]	@ (8007120 <stdio_exit_handler+0x14>)
 8007112:	f000 b869 	b.w	80071e8 <_fwalk_sglue>
 8007116:	bf00      	nop
 8007118:	20000010 	.word	0x20000010
 800711c:	08009d6d 	.word	0x08009d6d
 8007120:	20000020 	.word	0x20000020

08007124 <cleanup_stdio>:
 8007124:	6841      	ldr	r1, [r0, #4]
 8007126:	4b0c      	ldr	r3, [pc, #48]	@ (8007158 <cleanup_stdio+0x34>)
 8007128:	b510      	push	{r4, lr}
 800712a:	4299      	cmp	r1, r3
 800712c:	4604      	mov	r4, r0
 800712e:	d001      	beq.n	8007134 <cleanup_stdio+0x10>
 8007130:	f002 fe1c 	bl	8009d6c <_fflush_r>
 8007134:	68a1      	ldr	r1, [r4, #8]
 8007136:	4b09      	ldr	r3, [pc, #36]	@ (800715c <cleanup_stdio+0x38>)
 8007138:	4299      	cmp	r1, r3
 800713a:	d002      	beq.n	8007142 <cleanup_stdio+0x1e>
 800713c:	4620      	mov	r0, r4
 800713e:	f002 fe15 	bl	8009d6c <_fflush_r>
 8007142:	68e1      	ldr	r1, [r4, #12]
 8007144:	4b06      	ldr	r3, [pc, #24]	@ (8007160 <cleanup_stdio+0x3c>)
 8007146:	4299      	cmp	r1, r3
 8007148:	d004      	beq.n	8007154 <cleanup_stdio+0x30>
 800714a:	4620      	mov	r0, r4
 800714c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007150:	f002 be0c 	b.w	8009d6c <_fflush_r>
 8007154:	bd10      	pop	{r4, pc}
 8007156:	bf00      	nop
 8007158:	20001548 	.word	0x20001548
 800715c:	200015b0 	.word	0x200015b0
 8007160:	20001618 	.word	0x20001618

08007164 <global_stdio_init.part.0>:
 8007164:	b510      	push	{r4, lr}
 8007166:	4b0b      	ldr	r3, [pc, #44]	@ (8007194 <global_stdio_init.part.0+0x30>)
 8007168:	4c0b      	ldr	r4, [pc, #44]	@ (8007198 <global_stdio_init.part.0+0x34>)
 800716a:	4a0c      	ldr	r2, [pc, #48]	@ (800719c <global_stdio_init.part.0+0x38>)
 800716c:	4620      	mov	r0, r4
 800716e:	601a      	str	r2, [r3, #0]
 8007170:	2104      	movs	r1, #4
 8007172:	2200      	movs	r2, #0
 8007174:	f7ff ff94 	bl	80070a0 <std>
 8007178:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800717c:	2201      	movs	r2, #1
 800717e:	2109      	movs	r1, #9
 8007180:	f7ff ff8e 	bl	80070a0 <std>
 8007184:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007188:	2202      	movs	r2, #2
 800718a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800718e:	2112      	movs	r1, #18
 8007190:	f7ff bf86 	b.w	80070a0 <std>
 8007194:	20001680 	.word	0x20001680
 8007198:	20001548 	.word	0x20001548
 800719c:	0800710d 	.word	0x0800710d

080071a0 <__sfp_lock_acquire>:
 80071a0:	4801      	ldr	r0, [pc, #4]	@ (80071a8 <__sfp_lock_acquire+0x8>)
 80071a2:	f000 b976 	b.w	8007492 <__retarget_lock_acquire_recursive>
 80071a6:	bf00      	nop
 80071a8:	20001689 	.word	0x20001689

080071ac <__sfp_lock_release>:
 80071ac:	4801      	ldr	r0, [pc, #4]	@ (80071b4 <__sfp_lock_release+0x8>)
 80071ae:	f000 b971 	b.w	8007494 <__retarget_lock_release_recursive>
 80071b2:	bf00      	nop
 80071b4:	20001689 	.word	0x20001689

080071b8 <__sinit>:
 80071b8:	b510      	push	{r4, lr}
 80071ba:	4604      	mov	r4, r0
 80071bc:	f7ff fff0 	bl	80071a0 <__sfp_lock_acquire>
 80071c0:	6a23      	ldr	r3, [r4, #32]
 80071c2:	b11b      	cbz	r3, 80071cc <__sinit+0x14>
 80071c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071c8:	f7ff bff0 	b.w	80071ac <__sfp_lock_release>
 80071cc:	4b04      	ldr	r3, [pc, #16]	@ (80071e0 <__sinit+0x28>)
 80071ce:	6223      	str	r3, [r4, #32]
 80071d0:	4b04      	ldr	r3, [pc, #16]	@ (80071e4 <__sinit+0x2c>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d1f5      	bne.n	80071c4 <__sinit+0xc>
 80071d8:	f7ff ffc4 	bl	8007164 <global_stdio_init.part.0>
 80071dc:	e7f2      	b.n	80071c4 <__sinit+0xc>
 80071de:	bf00      	nop
 80071e0:	08007125 	.word	0x08007125
 80071e4:	20001680 	.word	0x20001680

080071e8 <_fwalk_sglue>:
 80071e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071ec:	4607      	mov	r7, r0
 80071ee:	4688      	mov	r8, r1
 80071f0:	4614      	mov	r4, r2
 80071f2:	2600      	movs	r6, #0
 80071f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80071f8:	f1b9 0901 	subs.w	r9, r9, #1
 80071fc:	d505      	bpl.n	800720a <_fwalk_sglue+0x22>
 80071fe:	6824      	ldr	r4, [r4, #0]
 8007200:	2c00      	cmp	r4, #0
 8007202:	d1f7      	bne.n	80071f4 <_fwalk_sglue+0xc>
 8007204:	4630      	mov	r0, r6
 8007206:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800720a:	89ab      	ldrh	r3, [r5, #12]
 800720c:	2b01      	cmp	r3, #1
 800720e:	d907      	bls.n	8007220 <_fwalk_sglue+0x38>
 8007210:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007214:	3301      	adds	r3, #1
 8007216:	d003      	beq.n	8007220 <_fwalk_sglue+0x38>
 8007218:	4629      	mov	r1, r5
 800721a:	4638      	mov	r0, r7
 800721c:	47c0      	blx	r8
 800721e:	4306      	orrs	r6, r0
 8007220:	3568      	adds	r5, #104	@ 0x68
 8007222:	e7e9      	b.n	80071f8 <_fwalk_sglue+0x10>

08007224 <siprintf>:
 8007224:	b40e      	push	{r1, r2, r3}
 8007226:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800722a:	b500      	push	{lr}
 800722c:	b09c      	sub	sp, #112	@ 0x70
 800722e:	ab1d      	add	r3, sp, #116	@ 0x74
 8007230:	9002      	str	r0, [sp, #8]
 8007232:	9006      	str	r0, [sp, #24]
 8007234:	9107      	str	r1, [sp, #28]
 8007236:	9104      	str	r1, [sp, #16]
 8007238:	4808      	ldr	r0, [pc, #32]	@ (800725c <siprintf+0x38>)
 800723a:	4909      	ldr	r1, [pc, #36]	@ (8007260 <siprintf+0x3c>)
 800723c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007240:	9105      	str	r1, [sp, #20]
 8007242:	6800      	ldr	r0, [r0, #0]
 8007244:	a902      	add	r1, sp, #8
 8007246:	9301      	str	r3, [sp, #4]
 8007248:	f002 fc14 	bl	8009a74 <_svfiprintf_r>
 800724c:	2200      	movs	r2, #0
 800724e:	9b02      	ldr	r3, [sp, #8]
 8007250:	701a      	strb	r2, [r3, #0]
 8007252:	b01c      	add	sp, #112	@ 0x70
 8007254:	f85d eb04 	ldr.w	lr, [sp], #4
 8007258:	b003      	add	sp, #12
 800725a:	4770      	bx	lr
 800725c:	2000001c 	.word	0x2000001c
 8007260:	ffff0208 	.word	0xffff0208

08007264 <__sread>:
 8007264:	b510      	push	{r4, lr}
 8007266:	460c      	mov	r4, r1
 8007268:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800726c:	f000 f8c2 	bl	80073f4 <_read_r>
 8007270:	2800      	cmp	r0, #0
 8007272:	bfab      	itete	ge
 8007274:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007276:	89a3      	ldrhlt	r3, [r4, #12]
 8007278:	181b      	addge	r3, r3, r0
 800727a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800727e:	bfac      	ite	ge
 8007280:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007282:	81a3      	strhlt	r3, [r4, #12]
 8007284:	bd10      	pop	{r4, pc}

08007286 <__swrite>:
 8007286:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800728a:	461f      	mov	r7, r3
 800728c:	898b      	ldrh	r3, [r1, #12]
 800728e:	4605      	mov	r5, r0
 8007290:	05db      	lsls	r3, r3, #23
 8007292:	460c      	mov	r4, r1
 8007294:	4616      	mov	r6, r2
 8007296:	d505      	bpl.n	80072a4 <__swrite+0x1e>
 8007298:	2302      	movs	r3, #2
 800729a:	2200      	movs	r2, #0
 800729c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072a0:	f000 f896 	bl	80073d0 <_lseek_r>
 80072a4:	89a3      	ldrh	r3, [r4, #12]
 80072a6:	4632      	mov	r2, r6
 80072a8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80072ac:	81a3      	strh	r3, [r4, #12]
 80072ae:	4628      	mov	r0, r5
 80072b0:	463b      	mov	r3, r7
 80072b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80072b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80072ba:	f000 b8ad 	b.w	8007418 <_write_r>

080072be <__sseek>:
 80072be:	b510      	push	{r4, lr}
 80072c0:	460c      	mov	r4, r1
 80072c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072c6:	f000 f883 	bl	80073d0 <_lseek_r>
 80072ca:	1c43      	adds	r3, r0, #1
 80072cc:	89a3      	ldrh	r3, [r4, #12]
 80072ce:	bf15      	itete	ne
 80072d0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80072d2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80072d6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80072da:	81a3      	strheq	r3, [r4, #12]
 80072dc:	bf18      	it	ne
 80072de:	81a3      	strhne	r3, [r4, #12]
 80072e0:	bd10      	pop	{r4, pc}

080072e2 <__sclose>:
 80072e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072e6:	f000 b80d 	b.w	8007304 <_close_r>

080072ea <memset>:
 80072ea:	4603      	mov	r3, r0
 80072ec:	4402      	add	r2, r0
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d100      	bne.n	80072f4 <memset+0xa>
 80072f2:	4770      	bx	lr
 80072f4:	f803 1b01 	strb.w	r1, [r3], #1
 80072f8:	e7f9      	b.n	80072ee <memset+0x4>
	...

080072fc <_localeconv_r>:
 80072fc:	4800      	ldr	r0, [pc, #0]	@ (8007300 <_localeconv_r+0x4>)
 80072fe:	4770      	bx	lr
 8007300:	2000015c 	.word	0x2000015c

08007304 <_close_r>:
 8007304:	b538      	push	{r3, r4, r5, lr}
 8007306:	2300      	movs	r3, #0
 8007308:	4d05      	ldr	r5, [pc, #20]	@ (8007320 <_close_r+0x1c>)
 800730a:	4604      	mov	r4, r0
 800730c:	4608      	mov	r0, r1
 800730e:	602b      	str	r3, [r5, #0]
 8007310:	f7fa fe27 	bl	8001f62 <_close>
 8007314:	1c43      	adds	r3, r0, #1
 8007316:	d102      	bne.n	800731e <_close_r+0x1a>
 8007318:	682b      	ldr	r3, [r5, #0]
 800731a:	b103      	cbz	r3, 800731e <_close_r+0x1a>
 800731c:	6023      	str	r3, [r4, #0]
 800731e:	bd38      	pop	{r3, r4, r5, pc}
 8007320:	20001684 	.word	0x20001684

08007324 <_reclaim_reent>:
 8007324:	4b29      	ldr	r3, [pc, #164]	@ (80073cc <_reclaim_reent+0xa8>)
 8007326:	b570      	push	{r4, r5, r6, lr}
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4604      	mov	r4, r0
 800732c:	4283      	cmp	r3, r0
 800732e:	d04b      	beq.n	80073c8 <_reclaim_reent+0xa4>
 8007330:	69c3      	ldr	r3, [r0, #28]
 8007332:	b1ab      	cbz	r3, 8007360 <_reclaim_reent+0x3c>
 8007334:	68db      	ldr	r3, [r3, #12]
 8007336:	b16b      	cbz	r3, 8007354 <_reclaim_reent+0x30>
 8007338:	2500      	movs	r5, #0
 800733a:	69e3      	ldr	r3, [r4, #28]
 800733c:	68db      	ldr	r3, [r3, #12]
 800733e:	5959      	ldr	r1, [r3, r5]
 8007340:	2900      	cmp	r1, #0
 8007342:	d13b      	bne.n	80073bc <_reclaim_reent+0x98>
 8007344:	3504      	adds	r5, #4
 8007346:	2d80      	cmp	r5, #128	@ 0x80
 8007348:	d1f7      	bne.n	800733a <_reclaim_reent+0x16>
 800734a:	69e3      	ldr	r3, [r4, #28]
 800734c:	4620      	mov	r0, r4
 800734e:	68d9      	ldr	r1, [r3, #12]
 8007350:	f000 ff12 	bl	8008178 <_free_r>
 8007354:	69e3      	ldr	r3, [r4, #28]
 8007356:	6819      	ldr	r1, [r3, #0]
 8007358:	b111      	cbz	r1, 8007360 <_reclaim_reent+0x3c>
 800735a:	4620      	mov	r0, r4
 800735c:	f000 ff0c 	bl	8008178 <_free_r>
 8007360:	6961      	ldr	r1, [r4, #20]
 8007362:	b111      	cbz	r1, 800736a <_reclaim_reent+0x46>
 8007364:	4620      	mov	r0, r4
 8007366:	f000 ff07 	bl	8008178 <_free_r>
 800736a:	69e1      	ldr	r1, [r4, #28]
 800736c:	b111      	cbz	r1, 8007374 <_reclaim_reent+0x50>
 800736e:	4620      	mov	r0, r4
 8007370:	f000 ff02 	bl	8008178 <_free_r>
 8007374:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007376:	b111      	cbz	r1, 800737e <_reclaim_reent+0x5a>
 8007378:	4620      	mov	r0, r4
 800737a:	f000 fefd 	bl	8008178 <_free_r>
 800737e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007380:	b111      	cbz	r1, 8007388 <_reclaim_reent+0x64>
 8007382:	4620      	mov	r0, r4
 8007384:	f000 fef8 	bl	8008178 <_free_r>
 8007388:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800738a:	b111      	cbz	r1, 8007392 <_reclaim_reent+0x6e>
 800738c:	4620      	mov	r0, r4
 800738e:	f000 fef3 	bl	8008178 <_free_r>
 8007392:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007394:	b111      	cbz	r1, 800739c <_reclaim_reent+0x78>
 8007396:	4620      	mov	r0, r4
 8007398:	f000 feee 	bl	8008178 <_free_r>
 800739c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800739e:	b111      	cbz	r1, 80073a6 <_reclaim_reent+0x82>
 80073a0:	4620      	mov	r0, r4
 80073a2:	f000 fee9 	bl	8008178 <_free_r>
 80073a6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80073a8:	b111      	cbz	r1, 80073b0 <_reclaim_reent+0x8c>
 80073aa:	4620      	mov	r0, r4
 80073ac:	f000 fee4 	bl	8008178 <_free_r>
 80073b0:	6a23      	ldr	r3, [r4, #32]
 80073b2:	b14b      	cbz	r3, 80073c8 <_reclaim_reent+0xa4>
 80073b4:	4620      	mov	r0, r4
 80073b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80073ba:	4718      	bx	r3
 80073bc:	680e      	ldr	r6, [r1, #0]
 80073be:	4620      	mov	r0, r4
 80073c0:	f000 feda 	bl	8008178 <_free_r>
 80073c4:	4631      	mov	r1, r6
 80073c6:	e7bb      	b.n	8007340 <_reclaim_reent+0x1c>
 80073c8:	bd70      	pop	{r4, r5, r6, pc}
 80073ca:	bf00      	nop
 80073cc:	2000001c 	.word	0x2000001c

080073d0 <_lseek_r>:
 80073d0:	b538      	push	{r3, r4, r5, lr}
 80073d2:	4604      	mov	r4, r0
 80073d4:	4608      	mov	r0, r1
 80073d6:	4611      	mov	r1, r2
 80073d8:	2200      	movs	r2, #0
 80073da:	4d05      	ldr	r5, [pc, #20]	@ (80073f0 <_lseek_r+0x20>)
 80073dc:	602a      	str	r2, [r5, #0]
 80073de:	461a      	mov	r2, r3
 80073e0:	f7fa fde3 	bl	8001faa <_lseek>
 80073e4:	1c43      	adds	r3, r0, #1
 80073e6:	d102      	bne.n	80073ee <_lseek_r+0x1e>
 80073e8:	682b      	ldr	r3, [r5, #0]
 80073ea:	b103      	cbz	r3, 80073ee <_lseek_r+0x1e>
 80073ec:	6023      	str	r3, [r4, #0]
 80073ee:	bd38      	pop	{r3, r4, r5, pc}
 80073f0:	20001684 	.word	0x20001684

080073f4 <_read_r>:
 80073f4:	b538      	push	{r3, r4, r5, lr}
 80073f6:	4604      	mov	r4, r0
 80073f8:	4608      	mov	r0, r1
 80073fa:	4611      	mov	r1, r2
 80073fc:	2200      	movs	r2, #0
 80073fe:	4d05      	ldr	r5, [pc, #20]	@ (8007414 <_read_r+0x20>)
 8007400:	602a      	str	r2, [r5, #0]
 8007402:	461a      	mov	r2, r3
 8007404:	f7fa fd74 	bl	8001ef0 <_read>
 8007408:	1c43      	adds	r3, r0, #1
 800740a:	d102      	bne.n	8007412 <_read_r+0x1e>
 800740c:	682b      	ldr	r3, [r5, #0]
 800740e:	b103      	cbz	r3, 8007412 <_read_r+0x1e>
 8007410:	6023      	str	r3, [r4, #0]
 8007412:	bd38      	pop	{r3, r4, r5, pc}
 8007414:	20001684 	.word	0x20001684

08007418 <_write_r>:
 8007418:	b538      	push	{r3, r4, r5, lr}
 800741a:	4604      	mov	r4, r0
 800741c:	4608      	mov	r0, r1
 800741e:	4611      	mov	r1, r2
 8007420:	2200      	movs	r2, #0
 8007422:	4d05      	ldr	r5, [pc, #20]	@ (8007438 <_write_r+0x20>)
 8007424:	602a      	str	r2, [r5, #0]
 8007426:	461a      	mov	r2, r3
 8007428:	f7fa fd7f 	bl	8001f2a <_write>
 800742c:	1c43      	adds	r3, r0, #1
 800742e:	d102      	bne.n	8007436 <_write_r+0x1e>
 8007430:	682b      	ldr	r3, [r5, #0]
 8007432:	b103      	cbz	r3, 8007436 <_write_r+0x1e>
 8007434:	6023      	str	r3, [r4, #0]
 8007436:	bd38      	pop	{r3, r4, r5, pc}
 8007438:	20001684 	.word	0x20001684

0800743c <__errno>:
 800743c:	4b01      	ldr	r3, [pc, #4]	@ (8007444 <__errno+0x8>)
 800743e:	6818      	ldr	r0, [r3, #0]
 8007440:	4770      	bx	lr
 8007442:	bf00      	nop
 8007444:	2000001c 	.word	0x2000001c

08007448 <__libc_init_array>:
 8007448:	b570      	push	{r4, r5, r6, lr}
 800744a:	2600      	movs	r6, #0
 800744c:	4d0c      	ldr	r5, [pc, #48]	@ (8007480 <__libc_init_array+0x38>)
 800744e:	4c0d      	ldr	r4, [pc, #52]	@ (8007484 <__libc_init_array+0x3c>)
 8007450:	1b64      	subs	r4, r4, r5
 8007452:	10a4      	asrs	r4, r4, #2
 8007454:	42a6      	cmp	r6, r4
 8007456:	d109      	bne.n	800746c <__libc_init_array+0x24>
 8007458:	f004 fd00 	bl	800be5c <_init>
 800745c:	2600      	movs	r6, #0
 800745e:	4d0a      	ldr	r5, [pc, #40]	@ (8007488 <__libc_init_array+0x40>)
 8007460:	4c0a      	ldr	r4, [pc, #40]	@ (800748c <__libc_init_array+0x44>)
 8007462:	1b64      	subs	r4, r4, r5
 8007464:	10a4      	asrs	r4, r4, #2
 8007466:	42a6      	cmp	r6, r4
 8007468:	d105      	bne.n	8007476 <__libc_init_array+0x2e>
 800746a:	bd70      	pop	{r4, r5, r6, pc}
 800746c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007470:	4798      	blx	r3
 8007472:	3601      	adds	r6, #1
 8007474:	e7ee      	b.n	8007454 <__libc_init_array+0xc>
 8007476:	f855 3b04 	ldr.w	r3, [r5], #4
 800747a:	4798      	blx	r3
 800747c:	3601      	adds	r6, #1
 800747e:	e7f2      	b.n	8007466 <__libc_init_array+0x1e>
 8007480:	0800c438 	.word	0x0800c438
 8007484:	0800c438 	.word	0x0800c438
 8007488:	0800c438 	.word	0x0800c438
 800748c:	0800c43c 	.word	0x0800c43c

08007490 <__retarget_lock_init_recursive>:
 8007490:	4770      	bx	lr

08007492 <__retarget_lock_acquire_recursive>:
 8007492:	4770      	bx	lr

08007494 <__retarget_lock_release_recursive>:
 8007494:	4770      	bx	lr

08007496 <memchr>:
 8007496:	4603      	mov	r3, r0
 8007498:	b510      	push	{r4, lr}
 800749a:	b2c9      	uxtb	r1, r1
 800749c:	4402      	add	r2, r0
 800749e:	4293      	cmp	r3, r2
 80074a0:	4618      	mov	r0, r3
 80074a2:	d101      	bne.n	80074a8 <memchr+0x12>
 80074a4:	2000      	movs	r0, #0
 80074a6:	e003      	b.n	80074b0 <memchr+0x1a>
 80074a8:	7804      	ldrb	r4, [r0, #0]
 80074aa:	3301      	adds	r3, #1
 80074ac:	428c      	cmp	r4, r1
 80074ae:	d1f6      	bne.n	800749e <memchr+0x8>
 80074b0:	bd10      	pop	{r4, pc}

080074b2 <memcpy>:
 80074b2:	440a      	add	r2, r1
 80074b4:	4291      	cmp	r1, r2
 80074b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80074ba:	d100      	bne.n	80074be <memcpy+0xc>
 80074bc:	4770      	bx	lr
 80074be:	b510      	push	{r4, lr}
 80074c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80074c4:	4291      	cmp	r1, r2
 80074c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80074ca:	d1f9      	bne.n	80074c0 <memcpy+0xe>
 80074cc:	bd10      	pop	{r4, pc}
	...

080074d0 <nanf>:
 80074d0:	4800      	ldr	r0, [pc, #0]	@ (80074d4 <nanf+0x4>)
 80074d2:	4770      	bx	lr
 80074d4:	7fc00000 	.word	0x7fc00000

080074d8 <quorem>:
 80074d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074dc:	6903      	ldr	r3, [r0, #16]
 80074de:	690c      	ldr	r4, [r1, #16]
 80074e0:	4607      	mov	r7, r0
 80074e2:	42a3      	cmp	r3, r4
 80074e4:	db7e      	blt.n	80075e4 <quorem+0x10c>
 80074e6:	3c01      	subs	r4, #1
 80074e8:	00a3      	lsls	r3, r4, #2
 80074ea:	f100 0514 	add.w	r5, r0, #20
 80074ee:	f101 0814 	add.w	r8, r1, #20
 80074f2:	9300      	str	r3, [sp, #0]
 80074f4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80074f8:	9301      	str	r3, [sp, #4]
 80074fa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80074fe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007502:	3301      	adds	r3, #1
 8007504:	429a      	cmp	r2, r3
 8007506:	fbb2 f6f3 	udiv	r6, r2, r3
 800750a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800750e:	d32e      	bcc.n	800756e <quorem+0x96>
 8007510:	f04f 0a00 	mov.w	sl, #0
 8007514:	46c4      	mov	ip, r8
 8007516:	46ae      	mov	lr, r5
 8007518:	46d3      	mov	fp, sl
 800751a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800751e:	b298      	uxth	r0, r3
 8007520:	fb06 a000 	mla	r0, r6, r0, sl
 8007524:	0c1b      	lsrs	r3, r3, #16
 8007526:	0c02      	lsrs	r2, r0, #16
 8007528:	fb06 2303 	mla	r3, r6, r3, r2
 800752c:	f8de 2000 	ldr.w	r2, [lr]
 8007530:	b280      	uxth	r0, r0
 8007532:	b292      	uxth	r2, r2
 8007534:	1a12      	subs	r2, r2, r0
 8007536:	445a      	add	r2, fp
 8007538:	f8de 0000 	ldr.w	r0, [lr]
 800753c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007540:	b29b      	uxth	r3, r3
 8007542:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007546:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800754a:	b292      	uxth	r2, r2
 800754c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007550:	45e1      	cmp	r9, ip
 8007552:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007556:	f84e 2b04 	str.w	r2, [lr], #4
 800755a:	d2de      	bcs.n	800751a <quorem+0x42>
 800755c:	9b00      	ldr	r3, [sp, #0]
 800755e:	58eb      	ldr	r3, [r5, r3]
 8007560:	b92b      	cbnz	r3, 800756e <quorem+0x96>
 8007562:	9b01      	ldr	r3, [sp, #4]
 8007564:	3b04      	subs	r3, #4
 8007566:	429d      	cmp	r5, r3
 8007568:	461a      	mov	r2, r3
 800756a:	d32f      	bcc.n	80075cc <quorem+0xf4>
 800756c:	613c      	str	r4, [r7, #16]
 800756e:	4638      	mov	r0, r7
 8007570:	f001 f9c2 	bl	80088f8 <__mcmp>
 8007574:	2800      	cmp	r0, #0
 8007576:	db25      	blt.n	80075c4 <quorem+0xec>
 8007578:	4629      	mov	r1, r5
 800757a:	2000      	movs	r0, #0
 800757c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007580:	f8d1 c000 	ldr.w	ip, [r1]
 8007584:	fa1f fe82 	uxth.w	lr, r2
 8007588:	fa1f f38c 	uxth.w	r3, ip
 800758c:	eba3 030e 	sub.w	r3, r3, lr
 8007590:	4403      	add	r3, r0
 8007592:	0c12      	lsrs	r2, r2, #16
 8007594:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007598:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800759c:	b29b      	uxth	r3, r3
 800759e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80075a2:	45c1      	cmp	r9, r8
 80075a4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80075a8:	f841 3b04 	str.w	r3, [r1], #4
 80075ac:	d2e6      	bcs.n	800757c <quorem+0xa4>
 80075ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80075b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80075b6:	b922      	cbnz	r2, 80075c2 <quorem+0xea>
 80075b8:	3b04      	subs	r3, #4
 80075ba:	429d      	cmp	r5, r3
 80075bc:	461a      	mov	r2, r3
 80075be:	d30b      	bcc.n	80075d8 <quorem+0x100>
 80075c0:	613c      	str	r4, [r7, #16]
 80075c2:	3601      	adds	r6, #1
 80075c4:	4630      	mov	r0, r6
 80075c6:	b003      	add	sp, #12
 80075c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075cc:	6812      	ldr	r2, [r2, #0]
 80075ce:	3b04      	subs	r3, #4
 80075d0:	2a00      	cmp	r2, #0
 80075d2:	d1cb      	bne.n	800756c <quorem+0x94>
 80075d4:	3c01      	subs	r4, #1
 80075d6:	e7c6      	b.n	8007566 <quorem+0x8e>
 80075d8:	6812      	ldr	r2, [r2, #0]
 80075da:	3b04      	subs	r3, #4
 80075dc:	2a00      	cmp	r2, #0
 80075de:	d1ef      	bne.n	80075c0 <quorem+0xe8>
 80075e0:	3c01      	subs	r4, #1
 80075e2:	e7ea      	b.n	80075ba <quorem+0xe2>
 80075e4:	2000      	movs	r0, #0
 80075e6:	e7ee      	b.n	80075c6 <quorem+0xee>

080075e8 <_dtoa_r>:
 80075e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075ec:	4614      	mov	r4, r2
 80075ee:	461d      	mov	r5, r3
 80075f0:	69c7      	ldr	r7, [r0, #28]
 80075f2:	b097      	sub	sp, #92	@ 0x5c
 80075f4:	4683      	mov	fp, r0
 80075f6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80075fa:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80075fc:	b97f      	cbnz	r7, 800761e <_dtoa_r+0x36>
 80075fe:	2010      	movs	r0, #16
 8007600:	f000 fe02 	bl	8008208 <malloc>
 8007604:	4602      	mov	r2, r0
 8007606:	f8cb 001c 	str.w	r0, [fp, #28]
 800760a:	b920      	cbnz	r0, 8007616 <_dtoa_r+0x2e>
 800760c:	21ef      	movs	r1, #239	@ 0xef
 800760e:	4ba8      	ldr	r3, [pc, #672]	@ (80078b0 <_dtoa_r+0x2c8>)
 8007610:	48a8      	ldr	r0, [pc, #672]	@ (80078b4 <_dtoa_r+0x2cc>)
 8007612:	f002 fc15 	bl	8009e40 <__assert_func>
 8007616:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800761a:	6007      	str	r7, [r0, #0]
 800761c:	60c7      	str	r7, [r0, #12]
 800761e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007622:	6819      	ldr	r1, [r3, #0]
 8007624:	b159      	cbz	r1, 800763e <_dtoa_r+0x56>
 8007626:	685a      	ldr	r2, [r3, #4]
 8007628:	2301      	movs	r3, #1
 800762a:	4093      	lsls	r3, r2
 800762c:	604a      	str	r2, [r1, #4]
 800762e:	608b      	str	r3, [r1, #8]
 8007630:	4658      	mov	r0, fp
 8007632:	f000 fedf 	bl	80083f4 <_Bfree>
 8007636:	2200      	movs	r2, #0
 8007638:	f8db 301c 	ldr.w	r3, [fp, #28]
 800763c:	601a      	str	r2, [r3, #0]
 800763e:	1e2b      	subs	r3, r5, #0
 8007640:	bfaf      	iteee	ge
 8007642:	2300      	movge	r3, #0
 8007644:	2201      	movlt	r2, #1
 8007646:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800764a:	9303      	strlt	r3, [sp, #12]
 800764c:	bfa8      	it	ge
 800764e:	6033      	strge	r3, [r6, #0]
 8007650:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007654:	4b98      	ldr	r3, [pc, #608]	@ (80078b8 <_dtoa_r+0x2d0>)
 8007656:	bfb8      	it	lt
 8007658:	6032      	strlt	r2, [r6, #0]
 800765a:	ea33 0308 	bics.w	r3, r3, r8
 800765e:	d112      	bne.n	8007686 <_dtoa_r+0x9e>
 8007660:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007664:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007666:	6013      	str	r3, [r2, #0]
 8007668:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800766c:	4323      	orrs	r3, r4
 800766e:	f000 8550 	beq.w	8008112 <_dtoa_r+0xb2a>
 8007672:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007674:	f8df a244 	ldr.w	sl, [pc, #580]	@ 80078bc <_dtoa_r+0x2d4>
 8007678:	2b00      	cmp	r3, #0
 800767a:	f000 8552 	beq.w	8008122 <_dtoa_r+0xb3a>
 800767e:	f10a 0303 	add.w	r3, sl, #3
 8007682:	f000 bd4c 	b.w	800811e <_dtoa_r+0xb36>
 8007686:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800768a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800768e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007692:	2200      	movs	r2, #0
 8007694:	2300      	movs	r3, #0
 8007696:	f7f9 f987 	bl	80009a8 <__aeabi_dcmpeq>
 800769a:	4607      	mov	r7, r0
 800769c:	b158      	cbz	r0, 80076b6 <_dtoa_r+0xce>
 800769e:	2301      	movs	r3, #1
 80076a0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80076a2:	6013      	str	r3, [r2, #0]
 80076a4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80076a6:	b113      	cbz	r3, 80076ae <_dtoa_r+0xc6>
 80076a8:	4b85      	ldr	r3, [pc, #532]	@ (80078c0 <_dtoa_r+0x2d8>)
 80076aa:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80076ac:	6013      	str	r3, [r2, #0]
 80076ae:	f8df a214 	ldr.w	sl, [pc, #532]	@ 80078c4 <_dtoa_r+0x2dc>
 80076b2:	f000 bd36 	b.w	8008122 <_dtoa_r+0xb3a>
 80076b6:	ab14      	add	r3, sp, #80	@ 0x50
 80076b8:	9301      	str	r3, [sp, #4]
 80076ba:	ab15      	add	r3, sp, #84	@ 0x54
 80076bc:	9300      	str	r3, [sp, #0]
 80076be:	4658      	mov	r0, fp
 80076c0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80076c4:	f001 fa30 	bl	8008b28 <__d2b>
 80076c8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80076cc:	4681      	mov	r9, r0
 80076ce:	2e00      	cmp	r6, #0
 80076d0:	d077      	beq.n	80077c2 <_dtoa_r+0x1da>
 80076d2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80076d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80076d8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80076dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80076e0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80076e4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80076e8:	9712      	str	r7, [sp, #72]	@ 0x48
 80076ea:	4619      	mov	r1, r3
 80076ec:	2200      	movs	r2, #0
 80076ee:	4b76      	ldr	r3, [pc, #472]	@ (80078c8 <_dtoa_r+0x2e0>)
 80076f0:	f7f8 fd3a 	bl	8000168 <__aeabi_dsub>
 80076f4:	a368      	add	r3, pc, #416	@ (adr r3, 8007898 <_dtoa_r+0x2b0>)
 80076f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076fa:	f7f8 feed 	bl	80004d8 <__aeabi_dmul>
 80076fe:	a368      	add	r3, pc, #416	@ (adr r3, 80078a0 <_dtoa_r+0x2b8>)
 8007700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007704:	f7f8 fd32 	bl	800016c <__adddf3>
 8007708:	4604      	mov	r4, r0
 800770a:	4630      	mov	r0, r6
 800770c:	460d      	mov	r5, r1
 800770e:	f7f8 fe79 	bl	8000404 <__aeabi_i2d>
 8007712:	a365      	add	r3, pc, #404	@ (adr r3, 80078a8 <_dtoa_r+0x2c0>)
 8007714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007718:	f7f8 fede 	bl	80004d8 <__aeabi_dmul>
 800771c:	4602      	mov	r2, r0
 800771e:	460b      	mov	r3, r1
 8007720:	4620      	mov	r0, r4
 8007722:	4629      	mov	r1, r5
 8007724:	f7f8 fd22 	bl	800016c <__adddf3>
 8007728:	4604      	mov	r4, r0
 800772a:	460d      	mov	r5, r1
 800772c:	f7f9 f984 	bl	8000a38 <__aeabi_d2iz>
 8007730:	2200      	movs	r2, #0
 8007732:	4607      	mov	r7, r0
 8007734:	2300      	movs	r3, #0
 8007736:	4620      	mov	r0, r4
 8007738:	4629      	mov	r1, r5
 800773a:	f7f9 f93f 	bl	80009bc <__aeabi_dcmplt>
 800773e:	b140      	cbz	r0, 8007752 <_dtoa_r+0x16a>
 8007740:	4638      	mov	r0, r7
 8007742:	f7f8 fe5f 	bl	8000404 <__aeabi_i2d>
 8007746:	4622      	mov	r2, r4
 8007748:	462b      	mov	r3, r5
 800774a:	f7f9 f92d 	bl	80009a8 <__aeabi_dcmpeq>
 800774e:	b900      	cbnz	r0, 8007752 <_dtoa_r+0x16a>
 8007750:	3f01      	subs	r7, #1
 8007752:	2f16      	cmp	r7, #22
 8007754:	d853      	bhi.n	80077fe <_dtoa_r+0x216>
 8007756:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800775a:	4b5c      	ldr	r3, [pc, #368]	@ (80078cc <_dtoa_r+0x2e4>)
 800775c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007764:	f7f9 f92a 	bl	80009bc <__aeabi_dcmplt>
 8007768:	2800      	cmp	r0, #0
 800776a:	d04a      	beq.n	8007802 <_dtoa_r+0x21a>
 800776c:	2300      	movs	r3, #0
 800776e:	3f01      	subs	r7, #1
 8007770:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007772:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007774:	1b9b      	subs	r3, r3, r6
 8007776:	1e5a      	subs	r2, r3, #1
 8007778:	bf46      	itte	mi
 800777a:	f1c3 0801 	rsbmi	r8, r3, #1
 800777e:	2300      	movmi	r3, #0
 8007780:	f04f 0800 	movpl.w	r8, #0
 8007784:	9209      	str	r2, [sp, #36]	@ 0x24
 8007786:	bf48      	it	mi
 8007788:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800778a:	2f00      	cmp	r7, #0
 800778c:	db3b      	blt.n	8007806 <_dtoa_r+0x21e>
 800778e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007790:	970e      	str	r7, [sp, #56]	@ 0x38
 8007792:	443b      	add	r3, r7
 8007794:	9309      	str	r3, [sp, #36]	@ 0x24
 8007796:	2300      	movs	r3, #0
 8007798:	930a      	str	r3, [sp, #40]	@ 0x28
 800779a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800779c:	2b09      	cmp	r3, #9
 800779e:	d866      	bhi.n	800786e <_dtoa_r+0x286>
 80077a0:	2b05      	cmp	r3, #5
 80077a2:	bfc4      	itt	gt
 80077a4:	3b04      	subgt	r3, #4
 80077a6:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80077a8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80077aa:	bfc8      	it	gt
 80077ac:	2400      	movgt	r4, #0
 80077ae:	f1a3 0302 	sub.w	r3, r3, #2
 80077b2:	bfd8      	it	le
 80077b4:	2401      	movle	r4, #1
 80077b6:	2b03      	cmp	r3, #3
 80077b8:	d864      	bhi.n	8007884 <_dtoa_r+0x29c>
 80077ba:	e8df f003 	tbb	[pc, r3]
 80077be:	382b      	.short	0x382b
 80077c0:	5636      	.short	0x5636
 80077c2:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80077c6:	441e      	add	r6, r3
 80077c8:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80077cc:	2b20      	cmp	r3, #32
 80077ce:	bfc1      	itttt	gt
 80077d0:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80077d4:	fa08 f803 	lslgt.w	r8, r8, r3
 80077d8:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80077dc:	fa24 f303 	lsrgt.w	r3, r4, r3
 80077e0:	bfd6      	itet	le
 80077e2:	f1c3 0320 	rsble	r3, r3, #32
 80077e6:	ea48 0003 	orrgt.w	r0, r8, r3
 80077ea:	fa04 f003 	lslle.w	r0, r4, r3
 80077ee:	f7f8 fdf9 	bl	80003e4 <__aeabi_ui2d>
 80077f2:	2201      	movs	r2, #1
 80077f4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80077f8:	3e01      	subs	r6, #1
 80077fa:	9212      	str	r2, [sp, #72]	@ 0x48
 80077fc:	e775      	b.n	80076ea <_dtoa_r+0x102>
 80077fe:	2301      	movs	r3, #1
 8007800:	e7b6      	b.n	8007770 <_dtoa_r+0x188>
 8007802:	900f      	str	r0, [sp, #60]	@ 0x3c
 8007804:	e7b5      	b.n	8007772 <_dtoa_r+0x18a>
 8007806:	427b      	negs	r3, r7
 8007808:	930a      	str	r3, [sp, #40]	@ 0x28
 800780a:	2300      	movs	r3, #0
 800780c:	eba8 0807 	sub.w	r8, r8, r7
 8007810:	930e      	str	r3, [sp, #56]	@ 0x38
 8007812:	e7c2      	b.n	800779a <_dtoa_r+0x1b2>
 8007814:	2300      	movs	r3, #0
 8007816:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007818:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800781a:	2b00      	cmp	r3, #0
 800781c:	dc35      	bgt.n	800788a <_dtoa_r+0x2a2>
 800781e:	2301      	movs	r3, #1
 8007820:	461a      	mov	r2, r3
 8007822:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007826:	9221      	str	r2, [sp, #132]	@ 0x84
 8007828:	e00b      	b.n	8007842 <_dtoa_r+0x25a>
 800782a:	2301      	movs	r3, #1
 800782c:	e7f3      	b.n	8007816 <_dtoa_r+0x22e>
 800782e:	2300      	movs	r3, #0
 8007830:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007832:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007834:	18fb      	adds	r3, r7, r3
 8007836:	9308      	str	r3, [sp, #32]
 8007838:	3301      	adds	r3, #1
 800783a:	2b01      	cmp	r3, #1
 800783c:	9307      	str	r3, [sp, #28]
 800783e:	bfb8      	it	lt
 8007840:	2301      	movlt	r3, #1
 8007842:	2100      	movs	r1, #0
 8007844:	2204      	movs	r2, #4
 8007846:	f8db 001c 	ldr.w	r0, [fp, #28]
 800784a:	f102 0514 	add.w	r5, r2, #20
 800784e:	429d      	cmp	r5, r3
 8007850:	d91f      	bls.n	8007892 <_dtoa_r+0x2aa>
 8007852:	6041      	str	r1, [r0, #4]
 8007854:	4658      	mov	r0, fp
 8007856:	f000 fd8d 	bl	8008374 <_Balloc>
 800785a:	4682      	mov	sl, r0
 800785c:	2800      	cmp	r0, #0
 800785e:	d139      	bne.n	80078d4 <_dtoa_r+0x2ec>
 8007860:	4602      	mov	r2, r0
 8007862:	f240 11af 	movw	r1, #431	@ 0x1af
 8007866:	4b1a      	ldr	r3, [pc, #104]	@ (80078d0 <_dtoa_r+0x2e8>)
 8007868:	e6d2      	b.n	8007610 <_dtoa_r+0x28>
 800786a:	2301      	movs	r3, #1
 800786c:	e7e0      	b.n	8007830 <_dtoa_r+0x248>
 800786e:	2401      	movs	r4, #1
 8007870:	2300      	movs	r3, #0
 8007872:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007874:	9320      	str	r3, [sp, #128]	@ 0x80
 8007876:	f04f 33ff 	mov.w	r3, #4294967295
 800787a:	2200      	movs	r2, #0
 800787c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007880:	2312      	movs	r3, #18
 8007882:	e7d0      	b.n	8007826 <_dtoa_r+0x23e>
 8007884:	2301      	movs	r3, #1
 8007886:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007888:	e7f5      	b.n	8007876 <_dtoa_r+0x28e>
 800788a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800788c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007890:	e7d7      	b.n	8007842 <_dtoa_r+0x25a>
 8007892:	3101      	adds	r1, #1
 8007894:	0052      	lsls	r2, r2, #1
 8007896:	e7d8      	b.n	800784a <_dtoa_r+0x262>
 8007898:	636f4361 	.word	0x636f4361
 800789c:	3fd287a7 	.word	0x3fd287a7
 80078a0:	8b60c8b3 	.word	0x8b60c8b3
 80078a4:	3fc68a28 	.word	0x3fc68a28
 80078a8:	509f79fb 	.word	0x509f79fb
 80078ac:	3fd34413 	.word	0x3fd34413
 80078b0:	0800bfa4 	.word	0x0800bfa4
 80078b4:	0800bfbb 	.word	0x0800bfbb
 80078b8:	7ff00000 	.word	0x7ff00000
 80078bc:	0800bfa0 	.word	0x0800bfa0
 80078c0:	0800bf6f 	.word	0x0800bf6f
 80078c4:	0800bf6e 	.word	0x0800bf6e
 80078c8:	3ff80000 	.word	0x3ff80000
 80078cc:	0800c0b8 	.word	0x0800c0b8
 80078d0:	0800c013 	.word	0x0800c013
 80078d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80078d8:	6018      	str	r0, [r3, #0]
 80078da:	9b07      	ldr	r3, [sp, #28]
 80078dc:	2b0e      	cmp	r3, #14
 80078de:	f200 80a4 	bhi.w	8007a2a <_dtoa_r+0x442>
 80078e2:	2c00      	cmp	r4, #0
 80078e4:	f000 80a1 	beq.w	8007a2a <_dtoa_r+0x442>
 80078e8:	2f00      	cmp	r7, #0
 80078ea:	dd33      	ble.n	8007954 <_dtoa_r+0x36c>
 80078ec:	4b86      	ldr	r3, [pc, #536]	@ (8007b08 <_dtoa_r+0x520>)
 80078ee:	f007 020f 	and.w	r2, r7, #15
 80078f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80078f6:	05f8      	lsls	r0, r7, #23
 80078f8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80078fc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007900:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007904:	d516      	bpl.n	8007934 <_dtoa_r+0x34c>
 8007906:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800790a:	4b80      	ldr	r3, [pc, #512]	@ (8007b0c <_dtoa_r+0x524>)
 800790c:	2603      	movs	r6, #3
 800790e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007912:	f7f8 ff0b 	bl	800072c <__aeabi_ddiv>
 8007916:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800791a:	f004 040f 	and.w	r4, r4, #15
 800791e:	4d7b      	ldr	r5, [pc, #492]	@ (8007b0c <_dtoa_r+0x524>)
 8007920:	b954      	cbnz	r4, 8007938 <_dtoa_r+0x350>
 8007922:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007926:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800792a:	f7f8 feff 	bl	800072c <__aeabi_ddiv>
 800792e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007932:	e028      	b.n	8007986 <_dtoa_r+0x39e>
 8007934:	2602      	movs	r6, #2
 8007936:	e7f2      	b.n	800791e <_dtoa_r+0x336>
 8007938:	07e1      	lsls	r1, r4, #31
 800793a:	d508      	bpl.n	800794e <_dtoa_r+0x366>
 800793c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007940:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007944:	f7f8 fdc8 	bl	80004d8 <__aeabi_dmul>
 8007948:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800794c:	3601      	adds	r6, #1
 800794e:	1064      	asrs	r4, r4, #1
 8007950:	3508      	adds	r5, #8
 8007952:	e7e5      	b.n	8007920 <_dtoa_r+0x338>
 8007954:	f000 80d2 	beq.w	8007afc <_dtoa_r+0x514>
 8007958:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800795c:	427c      	negs	r4, r7
 800795e:	4b6a      	ldr	r3, [pc, #424]	@ (8007b08 <_dtoa_r+0x520>)
 8007960:	f004 020f 	and.w	r2, r4, #15
 8007964:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800796c:	f7f8 fdb4 	bl	80004d8 <__aeabi_dmul>
 8007970:	2602      	movs	r6, #2
 8007972:	2300      	movs	r3, #0
 8007974:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007978:	4d64      	ldr	r5, [pc, #400]	@ (8007b0c <_dtoa_r+0x524>)
 800797a:	1124      	asrs	r4, r4, #4
 800797c:	2c00      	cmp	r4, #0
 800797e:	f040 80b2 	bne.w	8007ae6 <_dtoa_r+0x4fe>
 8007982:	2b00      	cmp	r3, #0
 8007984:	d1d3      	bne.n	800792e <_dtoa_r+0x346>
 8007986:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800798a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800798c:	2b00      	cmp	r3, #0
 800798e:	f000 80b7 	beq.w	8007b00 <_dtoa_r+0x518>
 8007992:	2200      	movs	r2, #0
 8007994:	4620      	mov	r0, r4
 8007996:	4629      	mov	r1, r5
 8007998:	4b5d      	ldr	r3, [pc, #372]	@ (8007b10 <_dtoa_r+0x528>)
 800799a:	f7f9 f80f 	bl	80009bc <__aeabi_dcmplt>
 800799e:	2800      	cmp	r0, #0
 80079a0:	f000 80ae 	beq.w	8007b00 <_dtoa_r+0x518>
 80079a4:	9b07      	ldr	r3, [sp, #28]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	f000 80aa 	beq.w	8007b00 <_dtoa_r+0x518>
 80079ac:	9b08      	ldr	r3, [sp, #32]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	dd37      	ble.n	8007a22 <_dtoa_r+0x43a>
 80079b2:	1e7b      	subs	r3, r7, #1
 80079b4:	4620      	mov	r0, r4
 80079b6:	9304      	str	r3, [sp, #16]
 80079b8:	2200      	movs	r2, #0
 80079ba:	4629      	mov	r1, r5
 80079bc:	4b55      	ldr	r3, [pc, #340]	@ (8007b14 <_dtoa_r+0x52c>)
 80079be:	f7f8 fd8b 	bl	80004d8 <__aeabi_dmul>
 80079c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80079c6:	9c08      	ldr	r4, [sp, #32]
 80079c8:	3601      	adds	r6, #1
 80079ca:	4630      	mov	r0, r6
 80079cc:	f7f8 fd1a 	bl	8000404 <__aeabi_i2d>
 80079d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80079d4:	f7f8 fd80 	bl	80004d8 <__aeabi_dmul>
 80079d8:	2200      	movs	r2, #0
 80079da:	4b4f      	ldr	r3, [pc, #316]	@ (8007b18 <_dtoa_r+0x530>)
 80079dc:	f7f8 fbc6 	bl	800016c <__adddf3>
 80079e0:	4605      	mov	r5, r0
 80079e2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80079e6:	2c00      	cmp	r4, #0
 80079e8:	f040 809a 	bne.w	8007b20 <_dtoa_r+0x538>
 80079ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80079f0:	2200      	movs	r2, #0
 80079f2:	4b4a      	ldr	r3, [pc, #296]	@ (8007b1c <_dtoa_r+0x534>)
 80079f4:	f7f8 fbb8 	bl	8000168 <__aeabi_dsub>
 80079f8:	4602      	mov	r2, r0
 80079fa:	460b      	mov	r3, r1
 80079fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007a00:	462a      	mov	r2, r5
 8007a02:	4633      	mov	r3, r6
 8007a04:	f7f8 fff8 	bl	80009f8 <__aeabi_dcmpgt>
 8007a08:	2800      	cmp	r0, #0
 8007a0a:	f040 828e 	bne.w	8007f2a <_dtoa_r+0x942>
 8007a0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a12:	462a      	mov	r2, r5
 8007a14:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007a18:	f7f8 ffd0 	bl	80009bc <__aeabi_dcmplt>
 8007a1c:	2800      	cmp	r0, #0
 8007a1e:	f040 8127 	bne.w	8007c70 <_dtoa_r+0x688>
 8007a22:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007a26:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007a2a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	f2c0 8163 	blt.w	8007cf8 <_dtoa_r+0x710>
 8007a32:	2f0e      	cmp	r7, #14
 8007a34:	f300 8160 	bgt.w	8007cf8 <_dtoa_r+0x710>
 8007a38:	4b33      	ldr	r3, [pc, #204]	@ (8007b08 <_dtoa_r+0x520>)
 8007a3a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007a3e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007a42:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007a46:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	da03      	bge.n	8007a54 <_dtoa_r+0x46c>
 8007a4c:	9b07      	ldr	r3, [sp, #28]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	f340 8100 	ble.w	8007c54 <_dtoa_r+0x66c>
 8007a54:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007a58:	4656      	mov	r6, sl
 8007a5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a5e:	4620      	mov	r0, r4
 8007a60:	4629      	mov	r1, r5
 8007a62:	f7f8 fe63 	bl	800072c <__aeabi_ddiv>
 8007a66:	f7f8 ffe7 	bl	8000a38 <__aeabi_d2iz>
 8007a6a:	4680      	mov	r8, r0
 8007a6c:	f7f8 fcca 	bl	8000404 <__aeabi_i2d>
 8007a70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a74:	f7f8 fd30 	bl	80004d8 <__aeabi_dmul>
 8007a78:	4602      	mov	r2, r0
 8007a7a:	460b      	mov	r3, r1
 8007a7c:	4620      	mov	r0, r4
 8007a7e:	4629      	mov	r1, r5
 8007a80:	f7f8 fb72 	bl	8000168 <__aeabi_dsub>
 8007a84:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007a88:	9d07      	ldr	r5, [sp, #28]
 8007a8a:	f806 4b01 	strb.w	r4, [r6], #1
 8007a8e:	eba6 040a 	sub.w	r4, r6, sl
 8007a92:	42a5      	cmp	r5, r4
 8007a94:	4602      	mov	r2, r0
 8007a96:	460b      	mov	r3, r1
 8007a98:	f040 8116 	bne.w	8007cc8 <_dtoa_r+0x6e0>
 8007a9c:	f7f8 fb66 	bl	800016c <__adddf3>
 8007aa0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007aa4:	4604      	mov	r4, r0
 8007aa6:	460d      	mov	r5, r1
 8007aa8:	f7f8 ffa6 	bl	80009f8 <__aeabi_dcmpgt>
 8007aac:	2800      	cmp	r0, #0
 8007aae:	f040 80f8 	bne.w	8007ca2 <_dtoa_r+0x6ba>
 8007ab2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ab6:	4620      	mov	r0, r4
 8007ab8:	4629      	mov	r1, r5
 8007aba:	f7f8 ff75 	bl	80009a8 <__aeabi_dcmpeq>
 8007abe:	b118      	cbz	r0, 8007ac8 <_dtoa_r+0x4e0>
 8007ac0:	f018 0f01 	tst.w	r8, #1
 8007ac4:	f040 80ed 	bne.w	8007ca2 <_dtoa_r+0x6ba>
 8007ac8:	4649      	mov	r1, r9
 8007aca:	4658      	mov	r0, fp
 8007acc:	f000 fc92 	bl	80083f4 <_Bfree>
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	7033      	strb	r3, [r6, #0]
 8007ad4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007ad6:	3701      	adds	r7, #1
 8007ad8:	601f      	str	r7, [r3, #0]
 8007ada:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	f000 8320 	beq.w	8008122 <_dtoa_r+0xb3a>
 8007ae2:	601e      	str	r6, [r3, #0]
 8007ae4:	e31d      	b.n	8008122 <_dtoa_r+0xb3a>
 8007ae6:	07e2      	lsls	r2, r4, #31
 8007ae8:	d505      	bpl.n	8007af6 <_dtoa_r+0x50e>
 8007aea:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007aee:	f7f8 fcf3 	bl	80004d8 <__aeabi_dmul>
 8007af2:	2301      	movs	r3, #1
 8007af4:	3601      	adds	r6, #1
 8007af6:	1064      	asrs	r4, r4, #1
 8007af8:	3508      	adds	r5, #8
 8007afa:	e73f      	b.n	800797c <_dtoa_r+0x394>
 8007afc:	2602      	movs	r6, #2
 8007afe:	e742      	b.n	8007986 <_dtoa_r+0x39e>
 8007b00:	9c07      	ldr	r4, [sp, #28]
 8007b02:	9704      	str	r7, [sp, #16]
 8007b04:	e761      	b.n	80079ca <_dtoa_r+0x3e2>
 8007b06:	bf00      	nop
 8007b08:	0800c0b8 	.word	0x0800c0b8
 8007b0c:	0800c090 	.word	0x0800c090
 8007b10:	3ff00000 	.word	0x3ff00000
 8007b14:	40240000 	.word	0x40240000
 8007b18:	401c0000 	.word	0x401c0000
 8007b1c:	40140000 	.word	0x40140000
 8007b20:	4b70      	ldr	r3, [pc, #448]	@ (8007ce4 <_dtoa_r+0x6fc>)
 8007b22:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007b24:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007b28:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007b2c:	4454      	add	r4, sl
 8007b2e:	2900      	cmp	r1, #0
 8007b30:	d045      	beq.n	8007bbe <_dtoa_r+0x5d6>
 8007b32:	2000      	movs	r0, #0
 8007b34:	496c      	ldr	r1, [pc, #432]	@ (8007ce8 <_dtoa_r+0x700>)
 8007b36:	f7f8 fdf9 	bl	800072c <__aeabi_ddiv>
 8007b3a:	4633      	mov	r3, r6
 8007b3c:	462a      	mov	r2, r5
 8007b3e:	f7f8 fb13 	bl	8000168 <__aeabi_dsub>
 8007b42:	4656      	mov	r6, sl
 8007b44:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007b48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b4c:	f7f8 ff74 	bl	8000a38 <__aeabi_d2iz>
 8007b50:	4605      	mov	r5, r0
 8007b52:	f7f8 fc57 	bl	8000404 <__aeabi_i2d>
 8007b56:	4602      	mov	r2, r0
 8007b58:	460b      	mov	r3, r1
 8007b5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b5e:	f7f8 fb03 	bl	8000168 <__aeabi_dsub>
 8007b62:	4602      	mov	r2, r0
 8007b64:	460b      	mov	r3, r1
 8007b66:	3530      	adds	r5, #48	@ 0x30
 8007b68:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007b6c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007b70:	f806 5b01 	strb.w	r5, [r6], #1
 8007b74:	f7f8 ff22 	bl	80009bc <__aeabi_dcmplt>
 8007b78:	2800      	cmp	r0, #0
 8007b7a:	d163      	bne.n	8007c44 <_dtoa_r+0x65c>
 8007b7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b80:	2000      	movs	r0, #0
 8007b82:	495a      	ldr	r1, [pc, #360]	@ (8007cec <_dtoa_r+0x704>)
 8007b84:	f7f8 faf0 	bl	8000168 <__aeabi_dsub>
 8007b88:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007b8c:	f7f8 ff16 	bl	80009bc <__aeabi_dcmplt>
 8007b90:	2800      	cmp	r0, #0
 8007b92:	f040 8087 	bne.w	8007ca4 <_dtoa_r+0x6bc>
 8007b96:	42a6      	cmp	r6, r4
 8007b98:	f43f af43 	beq.w	8007a22 <_dtoa_r+0x43a>
 8007b9c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	4b53      	ldr	r3, [pc, #332]	@ (8007cf0 <_dtoa_r+0x708>)
 8007ba4:	f7f8 fc98 	bl	80004d8 <__aeabi_dmul>
 8007ba8:	2200      	movs	r2, #0
 8007baa:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007bae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007bb2:	4b4f      	ldr	r3, [pc, #316]	@ (8007cf0 <_dtoa_r+0x708>)
 8007bb4:	f7f8 fc90 	bl	80004d8 <__aeabi_dmul>
 8007bb8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007bbc:	e7c4      	b.n	8007b48 <_dtoa_r+0x560>
 8007bbe:	4631      	mov	r1, r6
 8007bc0:	4628      	mov	r0, r5
 8007bc2:	f7f8 fc89 	bl	80004d8 <__aeabi_dmul>
 8007bc6:	4656      	mov	r6, sl
 8007bc8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007bcc:	9413      	str	r4, [sp, #76]	@ 0x4c
 8007bce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007bd2:	f7f8 ff31 	bl	8000a38 <__aeabi_d2iz>
 8007bd6:	4605      	mov	r5, r0
 8007bd8:	f7f8 fc14 	bl	8000404 <__aeabi_i2d>
 8007bdc:	4602      	mov	r2, r0
 8007bde:	460b      	mov	r3, r1
 8007be0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007be4:	f7f8 fac0 	bl	8000168 <__aeabi_dsub>
 8007be8:	4602      	mov	r2, r0
 8007bea:	460b      	mov	r3, r1
 8007bec:	3530      	adds	r5, #48	@ 0x30
 8007bee:	f806 5b01 	strb.w	r5, [r6], #1
 8007bf2:	42a6      	cmp	r6, r4
 8007bf4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007bf8:	f04f 0200 	mov.w	r2, #0
 8007bfc:	d124      	bne.n	8007c48 <_dtoa_r+0x660>
 8007bfe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007c02:	4b39      	ldr	r3, [pc, #228]	@ (8007ce8 <_dtoa_r+0x700>)
 8007c04:	f7f8 fab2 	bl	800016c <__adddf3>
 8007c08:	4602      	mov	r2, r0
 8007c0a:	460b      	mov	r3, r1
 8007c0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c10:	f7f8 fef2 	bl	80009f8 <__aeabi_dcmpgt>
 8007c14:	2800      	cmp	r0, #0
 8007c16:	d145      	bne.n	8007ca4 <_dtoa_r+0x6bc>
 8007c18:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007c1c:	2000      	movs	r0, #0
 8007c1e:	4932      	ldr	r1, [pc, #200]	@ (8007ce8 <_dtoa_r+0x700>)
 8007c20:	f7f8 faa2 	bl	8000168 <__aeabi_dsub>
 8007c24:	4602      	mov	r2, r0
 8007c26:	460b      	mov	r3, r1
 8007c28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c2c:	f7f8 fec6 	bl	80009bc <__aeabi_dcmplt>
 8007c30:	2800      	cmp	r0, #0
 8007c32:	f43f aef6 	beq.w	8007a22 <_dtoa_r+0x43a>
 8007c36:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007c38:	1e73      	subs	r3, r6, #1
 8007c3a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007c3c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007c40:	2b30      	cmp	r3, #48	@ 0x30
 8007c42:	d0f8      	beq.n	8007c36 <_dtoa_r+0x64e>
 8007c44:	9f04      	ldr	r7, [sp, #16]
 8007c46:	e73f      	b.n	8007ac8 <_dtoa_r+0x4e0>
 8007c48:	4b29      	ldr	r3, [pc, #164]	@ (8007cf0 <_dtoa_r+0x708>)
 8007c4a:	f7f8 fc45 	bl	80004d8 <__aeabi_dmul>
 8007c4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c52:	e7bc      	b.n	8007bce <_dtoa_r+0x5e6>
 8007c54:	d10c      	bne.n	8007c70 <_dtoa_r+0x688>
 8007c56:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	4b25      	ldr	r3, [pc, #148]	@ (8007cf4 <_dtoa_r+0x70c>)
 8007c5e:	f7f8 fc3b 	bl	80004d8 <__aeabi_dmul>
 8007c62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c66:	f7f8 febd 	bl	80009e4 <__aeabi_dcmpge>
 8007c6a:	2800      	cmp	r0, #0
 8007c6c:	f000 815b 	beq.w	8007f26 <_dtoa_r+0x93e>
 8007c70:	2400      	movs	r4, #0
 8007c72:	4625      	mov	r5, r4
 8007c74:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007c76:	4656      	mov	r6, sl
 8007c78:	43db      	mvns	r3, r3
 8007c7a:	9304      	str	r3, [sp, #16]
 8007c7c:	2700      	movs	r7, #0
 8007c7e:	4621      	mov	r1, r4
 8007c80:	4658      	mov	r0, fp
 8007c82:	f000 fbb7 	bl	80083f4 <_Bfree>
 8007c86:	2d00      	cmp	r5, #0
 8007c88:	d0dc      	beq.n	8007c44 <_dtoa_r+0x65c>
 8007c8a:	b12f      	cbz	r7, 8007c98 <_dtoa_r+0x6b0>
 8007c8c:	42af      	cmp	r7, r5
 8007c8e:	d003      	beq.n	8007c98 <_dtoa_r+0x6b0>
 8007c90:	4639      	mov	r1, r7
 8007c92:	4658      	mov	r0, fp
 8007c94:	f000 fbae 	bl	80083f4 <_Bfree>
 8007c98:	4629      	mov	r1, r5
 8007c9a:	4658      	mov	r0, fp
 8007c9c:	f000 fbaa 	bl	80083f4 <_Bfree>
 8007ca0:	e7d0      	b.n	8007c44 <_dtoa_r+0x65c>
 8007ca2:	9704      	str	r7, [sp, #16]
 8007ca4:	4633      	mov	r3, r6
 8007ca6:	461e      	mov	r6, r3
 8007ca8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007cac:	2a39      	cmp	r2, #57	@ 0x39
 8007cae:	d107      	bne.n	8007cc0 <_dtoa_r+0x6d8>
 8007cb0:	459a      	cmp	sl, r3
 8007cb2:	d1f8      	bne.n	8007ca6 <_dtoa_r+0x6be>
 8007cb4:	9a04      	ldr	r2, [sp, #16]
 8007cb6:	3201      	adds	r2, #1
 8007cb8:	9204      	str	r2, [sp, #16]
 8007cba:	2230      	movs	r2, #48	@ 0x30
 8007cbc:	f88a 2000 	strb.w	r2, [sl]
 8007cc0:	781a      	ldrb	r2, [r3, #0]
 8007cc2:	3201      	adds	r2, #1
 8007cc4:	701a      	strb	r2, [r3, #0]
 8007cc6:	e7bd      	b.n	8007c44 <_dtoa_r+0x65c>
 8007cc8:	2200      	movs	r2, #0
 8007cca:	4b09      	ldr	r3, [pc, #36]	@ (8007cf0 <_dtoa_r+0x708>)
 8007ccc:	f7f8 fc04 	bl	80004d8 <__aeabi_dmul>
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	4604      	mov	r4, r0
 8007cd6:	460d      	mov	r5, r1
 8007cd8:	f7f8 fe66 	bl	80009a8 <__aeabi_dcmpeq>
 8007cdc:	2800      	cmp	r0, #0
 8007cde:	f43f aebc 	beq.w	8007a5a <_dtoa_r+0x472>
 8007ce2:	e6f1      	b.n	8007ac8 <_dtoa_r+0x4e0>
 8007ce4:	0800c0b8 	.word	0x0800c0b8
 8007ce8:	3fe00000 	.word	0x3fe00000
 8007cec:	3ff00000 	.word	0x3ff00000
 8007cf0:	40240000 	.word	0x40240000
 8007cf4:	40140000 	.word	0x40140000
 8007cf8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007cfa:	2a00      	cmp	r2, #0
 8007cfc:	f000 80db 	beq.w	8007eb6 <_dtoa_r+0x8ce>
 8007d00:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007d02:	2a01      	cmp	r2, #1
 8007d04:	f300 80bf 	bgt.w	8007e86 <_dtoa_r+0x89e>
 8007d08:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007d0a:	2a00      	cmp	r2, #0
 8007d0c:	f000 80b7 	beq.w	8007e7e <_dtoa_r+0x896>
 8007d10:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007d14:	4646      	mov	r6, r8
 8007d16:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007d18:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007d1a:	2101      	movs	r1, #1
 8007d1c:	441a      	add	r2, r3
 8007d1e:	4658      	mov	r0, fp
 8007d20:	4498      	add	r8, r3
 8007d22:	9209      	str	r2, [sp, #36]	@ 0x24
 8007d24:	f000 fc64 	bl	80085f0 <__i2b>
 8007d28:	4605      	mov	r5, r0
 8007d2a:	b15e      	cbz	r6, 8007d44 <_dtoa_r+0x75c>
 8007d2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	dd08      	ble.n	8007d44 <_dtoa_r+0x75c>
 8007d32:	42b3      	cmp	r3, r6
 8007d34:	bfa8      	it	ge
 8007d36:	4633      	movge	r3, r6
 8007d38:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007d3a:	eba8 0803 	sub.w	r8, r8, r3
 8007d3e:	1af6      	subs	r6, r6, r3
 8007d40:	1ad3      	subs	r3, r2, r3
 8007d42:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007d46:	b1f3      	cbz	r3, 8007d86 <_dtoa_r+0x79e>
 8007d48:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	f000 80b7 	beq.w	8007ebe <_dtoa_r+0x8d6>
 8007d50:	b18c      	cbz	r4, 8007d76 <_dtoa_r+0x78e>
 8007d52:	4629      	mov	r1, r5
 8007d54:	4622      	mov	r2, r4
 8007d56:	4658      	mov	r0, fp
 8007d58:	f000 fd08 	bl	800876c <__pow5mult>
 8007d5c:	464a      	mov	r2, r9
 8007d5e:	4601      	mov	r1, r0
 8007d60:	4605      	mov	r5, r0
 8007d62:	4658      	mov	r0, fp
 8007d64:	f000 fc5a 	bl	800861c <__multiply>
 8007d68:	4649      	mov	r1, r9
 8007d6a:	9004      	str	r0, [sp, #16]
 8007d6c:	4658      	mov	r0, fp
 8007d6e:	f000 fb41 	bl	80083f4 <_Bfree>
 8007d72:	9b04      	ldr	r3, [sp, #16]
 8007d74:	4699      	mov	r9, r3
 8007d76:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007d78:	1b1a      	subs	r2, r3, r4
 8007d7a:	d004      	beq.n	8007d86 <_dtoa_r+0x79e>
 8007d7c:	4649      	mov	r1, r9
 8007d7e:	4658      	mov	r0, fp
 8007d80:	f000 fcf4 	bl	800876c <__pow5mult>
 8007d84:	4681      	mov	r9, r0
 8007d86:	2101      	movs	r1, #1
 8007d88:	4658      	mov	r0, fp
 8007d8a:	f000 fc31 	bl	80085f0 <__i2b>
 8007d8e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007d90:	4604      	mov	r4, r0
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	f000 81c9 	beq.w	800812a <_dtoa_r+0xb42>
 8007d98:	461a      	mov	r2, r3
 8007d9a:	4601      	mov	r1, r0
 8007d9c:	4658      	mov	r0, fp
 8007d9e:	f000 fce5 	bl	800876c <__pow5mult>
 8007da2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007da4:	4604      	mov	r4, r0
 8007da6:	2b01      	cmp	r3, #1
 8007da8:	f300 808f 	bgt.w	8007eca <_dtoa_r+0x8e2>
 8007dac:	9b02      	ldr	r3, [sp, #8]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	f040 8087 	bne.w	8007ec2 <_dtoa_r+0x8da>
 8007db4:	9b03      	ldr	r3, [sp, #12]
 8007db6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	f040 8083 	bne.w	8007ec6 <_dtoa_r+0x8de>
 8007dc0:	9b03      	ldr	r3, [sp, #12]
 8007dc2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007dc6:	0d1b      	lsrs	r3, r3, #20
 8007dc8:	051b      	lsls	r3, r3, #20
 8007dca:	b12b      	cbz	r3, 8007dd8 <_dtoa_r+0x7f0>
 8007dcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007dce:	f108 0801 	add.w	r8, r8, #1
 8007dd2:	3301      	adds	r3, #1
 8007dd4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	930a      	str	r3, [sp, #40]	@ 0x28
 8007dda:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	f000 81aa 	beq.w	8008136 <_dtoa_r+0xb4e>
 8007de2:	6923      	ldr	r3, [r4, #16]
 8007de4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007de8:	6918      	ldr	r0, [r3, #16]
 8007dea:	f000 fbb5 	bl	8008558 <__hi0bits>
 8007dee:	f1c0 0020 	rsb	r0, r0, #32
 8007df2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007df4:	4418      	add	r0, r3
 8007df6:	f010 001f 	ands.w	r0, r0, #31
 8007dfa:	d071      	beq.n	8007ee0 <_dtoa_r+0x8f8>
 8007dfc:	f1c0 0320 	rsb	r3, r0, #32
 8007e00:	2b04      	cmp	r3, #4
 8007e02:	dd65      	ble.n	8007ed0 <_dtoa_r+0x8e8>
 8007e04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e06:	f1c0 001c 	rsb	r0, r0, #28
 8007e0a:	4403      	add	r3, r0
 8007e0c:	4480      	add	r8, r0
 8007e0e:	4406      	add	r6, r0
 8007e10:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e12:	f1b8 0f00 	cmp.w	r8, #0
 8007e16:	dd05      	ble.n	8007e24 <_dtoa_r+0x83c>
 8007e18:	4649      	mov	r1, r9
 8007e1a:	4642      	mov	r2, r8
 8007e1c:	4658      	mov	r0, fp
 8007e1e:	f000 fcff 	bl	8008820 <__lshift>
 8007e22:	4681      	mov	r9, r0
 8007e24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	dd05      	ble.n	8007e36 <_dtoa_r+0x84e>
 8007e2a:	4621      	mov	r1, r4
 8007e2c:	461a      	mov	r2, r3
 8007e2e:	4658      	mov	r0, fp
 8007e30:	f000 fcf6 	bl	8008820 <__lshift>
 8007e34:	4604      	mov	r4, r0
 8007e36:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d053      	beq.n	8007ee4 <_dtoa_r+0x8fc>
 8007e3c:	4621      	mov	r1, r4
 8007e3e:	4648      	mov	r0, r9
 8007e40:	f000 fd5a 	bl	80088f8 <__mcmp>
 8007e44:	2800      	cmp	r0, #0
 8007e46:	da4d      	bge.n	8007ee4 <_dtoa_r+0x8fc>
 8007e48:	1e7b      	subs	r3, r7, #1
 8007e4a:	4649      	mov	r1, r9
 8007e4c:	9304      	str	r3, [sp, #16]
 8007e4e:	220a      	movs	r2, #10
 8007e50:	2300      	movs	r3, #0
 8007e52:	4658      	mov	r0, fp
 8007e54:	f000 faf0 	bl	8008438 <__multadd>
 8007e58:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007e5a:	4681      	mov	r9, r0
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	f000 816c 	beq.w	800813a <_dtoa_r+0xb52>
 8007e62:	2300      	movs	r3, #0
 8007e64:	4629      	mov	r1, r5
 8007e66:	220a      	movs	r2, #10
 8007e68:	4658      	mov	r0, fp
 8007e6a:	f000 fae5 	bl	8008438 <__multadd>
 8007e6e:	9b08      	ldr	r3, [sp, #32]
 8007e70:	4605      	mov	r5, r0
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	dc61      	bgt.n	8007f3a <_dtoa_r+0x952>
 8007e76:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007e78:	2b02      	cmp	r3, #2
 8007e7a:	dc3b      	bgt.n	8007ef4 <_dtoa_r+0x90c>
 8007e7c:	e05d      	b.n	8007f3a <_dtoa_r+0x952>
 8007e7e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007e80:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007e84:	e746      	b.n	8007d14 <_dtoa_r+0x72c>
 8007e86:	9b07      	ldr	r3, [sp, #28]
 8007e88:	1e5c      	subs	r4, r3, #1
 8007e8a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007e8c:	42a3      	cmp	r3, r4
 8007e8e:	bfbf      	itttt	lt
 8007e90:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007e92:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8007e94:	1ae3      	sublt	r3, r4, r3
 8007e96:	18d2      	addlt	r2, r2, r3
 8007e98:	bfa8      	it	ge
 8007e9a:	1b1c      	subge	r4, r3, r4
 8007e9c:	9b07      	ldr	r3, [sp, #28]
 8007e9e:	bfbe      	ittt	lt
 8007ea0:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007ea2:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8007ea4:	2400      	movlt	r4, #0
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	bfb5      	itete	lt
 8007eaa:	eba8 0603 	sublt.w	r6, r8, r3
 8007eae:	4646      	movge	r6, r8
 8007eb0:	2300      	movlt	r3, #0
 8007eb2:	9b07      	ldrge	r3, [sp, #28]
 8007eb4:	e730      	b.n	8007d18 <_dtoa_r+0x730>
 8007eb6:	4646      	mov	r6, r8
 8007eb8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007eba:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007ebc:	e735      	b.n	8007d2a <_dtoa_r+0x742>
 8007ebe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007ec0:	e75c      	b.n	8007d7c <_dtoa_r+0x794>
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	e788      	b.n	8007dd8 <_dtoa_r+0x7f0>
 8007ec6:	9b02      	ldr	r3, [sp, #8]
 8007ec8:	e786      	b.n	8007dd8 <_dtoa_r+0x7f0>
 8007eca:	2300      	movs	r3, #0
 8007ecc:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ece:	e788      	b.n	8007de2 <_dtoa_r+0x7fa>
 8007ed0:	d09f      	beq.n	8007e12 <_dtoa_r+0x82a>
 8007ed2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ed4:	331c      	adds	r3, #28
 8007ed6:	441a      	add	r2, r3
 8007ed8:	4498      	add	r8, r3
 8007eda:	441e      	add	r6, r3
 8007edc:	9209      	str	r2, [sp, #36]	@ 0x24
 8007ede:	e798      	b.n	8007e12 <_dtoa_r+0x82a>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	e7f6      	b.n	8007ed2 <_dtoa_r+0x8ea>
 8007ee4:	9b07      	ldr	r3, [sp, #28]
 8007ee6:	9704      	str	r7, [sp, #16]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	dc20      	bgt.n	8007f2e <_dtoa_r+0x946>
 8007eec:	9308      	str	r3, [sp, #32]
 8007eee:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007ef0:	2b02      	cmp	r3, #2
 8007ef2:	dd1e      	ble.n	8007f32 <_dtoa_r+0x94a>
 8007ef4:	9b08      	ldr	r3, [sp, #32]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	f47f aebc 	bne.w	8007c74 <_dtoa_r+0x68c>
 8007efc:	4621      	mov	r1, r4
 8007efe:	2205      	movs	r2, #5
 8007f00:	4658      	mov	r0, fp
 8007f02:	f000 fa99 	bl	8008438 <__multadd>
 8007f06:	4601      	mov	r1, r0
 8007f08:	4604      	mov	r4, r0
 8007f0a:	4648      	mov	r0, r9
 8007f0c:	f000 fcf4 	bl	80088f8 <__mcmp>
 8007f10:	2800      	cmp	r0, #0
 8007f12:	f77f aeaf 	ble.w	8007c74 <_dtoa_r+0x68c>
 8007f16:	2331      	movs	r3, #49	@ 0x31
 8007f18:	4656      	mov	r6, sl
 8007f1a:	f806 3b01 	strb.w	r3, [r6], #1
 8007f1e:	9b04      	ldr	r3, [sp, #16]
 8007f20:	3301      	adds	r3, #1
 8007f22:	9304      	str	r3, [sp, #16]
 8007f24:	e6aa      	b.n	8007c7c <_dtoa_r+0x694>
 8007f26:	9c07      	ldr	r4, [sp, #28]
 8007f28:	9704      	str	r7, [sp, #16]
 8007f2a:	4625      	mov	r5, r4
 8007f2c:	e7f3      	b.n	8007f16 <_dtoa_r+0x92e>
 8007f2e:	9b07      	ldr	r3, [sp, #28]
 8007f30:	9308      	str	r3, [sp, #32]
 8007f32:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	f000 8104 	beq.w	8008142 <_dtoa_r+0xb5a>
 8007f3a:	2e00      	cmp	r6, #0
 8007f3c:	dd05      	ble.n	8007f4a <_dtoa_r+0x962>
 8007f3e:	4629      	mov	r1, r5
 8007f40:	4632      	mov	r2, r6
 8007f42:	4658      	mov	r0, fp
 8007f44:	f000 fc6c 	bl	8008820 <__lshift>
 8007f48:	4605      	mov	r5, r0
 8007f4a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d05a      	beq.n	8008006 <_dtoa_r+0xa1e>
 8007f50:	4658      	mov	r0, fp
 8007f52:	6869      	ldr	r1, [r5, #4]
 8007f54:	f000 fa0e 	bl	8008374 <_Balloc>
 8007f58:	4606      	mov	r6, r0
 8007f5a:	b928      	cbnz	r0, 8007f68 <_dtoa_r+0x980>
 8007f5c:	4602      	mov	r2, r0
 8007f5e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007f62:	4b83      	ldr	r3, [pc, #524]	@ (8008170 <_dtoa_r+0xb88>)
 8007f64:	f7ff bb54 	b.w	8007610 <_dtoa_r+0x28>
 8007f68:	692a      	ldr	r2, [r5, #16]
 8007f6a:	f105 010c 	add.w	r1, r5, #12
 8007f6e:	3202      	adds	r2, #2
 8007f70:	0092      	lsls	r2, r2, #2
 8007f72:	300c      	adds	r0, #12
 8007f74:	f7ff fa9d 	bl	80074b2 <memcpy>
 8007f78:	2201      	movs	r2, #1
 8007f7a:	4631      	mov	r1, r6
 8007f7c:	4658      	mov	r0, fp
 8007f7e:	f000 fc4f 	bl	8008820 <__lshift>
 8007f82:	462f      	mov	r7, r5
 8007f84:	4605      	mov	r5, r0
 8007f86:	f10a 0301 	add.w	r3, sl, #1
 8007f8a:	9307      	str	r3, [sp, #28]
 8007f8c:	9b08      	ldr	r3, [sp, #32]
 8007f8e:	4453      	add	r3, sl
 8007f90:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007f92:	9b02      	ldr	r3, [sp, #8]
 8007f94:	f003 0301 	and.w	r3, r3, #1
 8007f98:	930a      	str	r3, [sp, #40]	@ 0x28
 8007f9a:	9b07      	ldr	r3, [sp, #28]
 8007f9c:	4621      	mov	r1, r4
 8007f9e:	3b01      	subs	r3, #1
 8007fa0:	4648      	mov	r0, r9
 8007fa2:	9302      	str	r3, [sp, #8]
 8007fa4:	f7ff fa98 	bl	80074d8 <quorem>
 8007fa8:	4639      	mov	r1, r7
 8007faa:	9008      	str	r0, [sp, #32]
 8007fac:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007fb0:	4648      	mov	r0, r9
 8007fb2:	f000 fca1 	bl	80088f8 <__mcmp>
 8007fb6:	462a      	mov	r2, r5
 8007fb8:	9009      	str	r0, [sp, #36]	@ 0x24
 8007fba:	4621      	mov	r1, r4
 8007fbc:	4658      	mov	r0, fp
 8007fbe:	f000 fcb7 	bl	8008930 <__mdiff>
 8007fc2:	68c2      	ldr	r2, [r0, #12]
 8007fc4:	4606      	mov	r6, r0
 8007fc6:	bb02      	cbnz	r2, 800800a <_dtoa_r+0xa22>
 8007fc8:	4601      	mov	r1, r0
 8007fca:	4648      	mov	r0, r9
 8007fcc:	f000 fc94 	bl	80088f8 <__mcmp>
 8007fd0:	4602      	mov	r2, r0
 8007fd2:	4631      	mov	r1, r6
 8007fd4:	4658      	mov	r0, fp
 8007fd6:	920c      	str	r2, [sp, #48]	@ 0x30
 8007fd8:	f000 fa0c 	bl	80083f4 <_Bfree>
 8007fdc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007fde:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007fe0:	9e07      	ldr	r6, [sp, #28]
 8007fe2:	ea43 0102 	orr.w	r1, r3, r2
 8007fe6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007fe8:	4319      	orrs	r1, r3
 8007fea:	d110      	bne.n	800800e <_dtoa_r+0xa26>
 8007fec:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007ff0:	d029      	beq.n	8008046 <_dtoa_r+0xa5e>
 8007ff2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	dd02      	ble.n	8007ffe <_dtoa_r+0xa16>
 8007ff8:	9b08      	ldr	r3, [sp, #32]
 8007ffa:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007ffe:	9b02      	ldr	r3, [sp, #8]
 8008000:	f883 8000 	strb.w	r8, [r3]
 8008004:	e63b      	b.n	8007c7e <_dtoa_r+0x696>
 8008006:	4628      	mov	r0, r5
 8008008:	e7bb      	b.n	8007f82 <_dtoa_r+0x99a>
 800800a:	2201      	movs	r2, #1
 800800c:	e7e1      	b.n	8007fd2 <_dtoa_r+0x9ea>
 800800e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008010:	2b00      	cmp	r3, #0
 8008012:	db04      	blt.n	800801e <_dtoa_r+0xa36>
 8008014:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8008016:	430b      	orrs	r3, r1
 8008018:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800801a:	430b      	orrs	r3, r1
 800801c:	d120      	bne.n	8008060 <_dtoa_r+0xa78>
 800801e:	2a00      	cmp	r2, #0
 8008020:	dded      	ble.n	8007ffe <_dtoa_r+0xa16>
 8008022:	4649      	mov	r1, r9
 8008024:	2201      	movs	r2, #1
 8008026:	4658      	mov	r0, fp
 8008028:	f000 fbfa 	bl	8008820 <__lshift>
 800802c:	4621      	mov	r1, r4
 800802e:	4681      	mov	r9, r0
 8008030:	f000 fc62 	bl	80088f8 <__mcmp>
 8008034:	2800      	cmp	r0, #0
 8008036:	dc03      	bgt.n	8008040 <_dtoa_r+0xa58>
 8008038:	d1e1      	bne.n	8007ffe <_dtoa_r+0xa16>
 800803a:	f018 0f01 	tst.w	r8, #1
 800803e:	d0de      	beq.n	8007ffe <_dtoa_r+0xa16>
 8008040:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008044:	d1d8      	bne.n	8007ff8 <_dtoa_r+0xa10>
 8008046:	2339      	movs	r3, #57	@ 0x39
 8008048:	9a02      	ldr	r2, [sp, #8]
 800804a:	7013      	strb	r3, [r2, #0]
 800804c:	4633      	mov	r3, r6
 800804e:	461e      	mov	r6, r3
 8008050:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008054:	3b01      	subs	r3, #1
 8008056:	2a39      	cmp	r2, #57	@ 0x39
 8008058:	d052      	beq.n	8008100 <_dtoa_r+0xb18>
 800805a:	3201      	adds	r2, #1
 800805c:	701a      	strb	r2, [r3, #0]
 800805e:	e60e      	b.n	8007c7e <_dtoa_r+0x696>
 8008060:	2a00      	cmp	r2, #0
 8008062:	dd07      	ble.n	8008074 <_dtoa_r+0xa8c>
 8008064:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008068:	d0ed      	beq.n	8008046 <_dtoa_r+0xa5e>
 800806a:	9a02      	ldr	r2, [sp, #8]
 800806c:	f108 0301 	add.w	r3, r8, #1
 8008070:	7013      	strb	r3, [r2, #0]
 8008072:	e604      	b.n	8007c7e <_dtoa_r+0x696>
 8008074:	9b07      	ldr	r3, [sp, #28]
 8008076:	9a07      	ldr	r2, [sp, #28]
 8008078:	f803 8c01 	strb.w	r8, [r3, #-1]
 800807c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800807e:	4293      	cmp	r3, r2
 8008080:	d028      	beq.n	80080d4 <_dtoa_r+0xaec>
 8008082:	4649      	mov	r1, r9
 8008084:	2300      	movs	r3, #0
 8008086:	220a      	movs	r2, #10
 8008088:	4658      	mov	r0, fp
 800808a:	f000 f9d5 	bl	8008438 <__multadd>
 800808e:	42af      	cmp	r7, r5
 8008090:	4681      	mov	r9, r0
 8008092:	f04f 0300 	mov.w	r3, #0
 8008096:	f04f 020a 	mov.w	r2, #10
 800809a:	4639      	mov	r1, r7
 800809c:	4658      	mov	r0, fp
 800809e:	d107      	bne.n	80080b0 <_dtoa_r+0xac8>
 80080a0:	f000 f9ca 	bl	8008438 <__multadd>
 80080a4:	4607      	mov	r7, r0
 80080a6:	4605      	mov	r5, r0
 80080a8:	9b07      	ldr	r3, [sp, #28]
 80080aa:	3301      	adds	r3, #1
 80080ac:	9307      	str	r3, [sp, #28]
 80080ae:	e774      	b.n	8007f9a <_dtoa_r+0x9b2>
 80080b0:	f000 f9c2 	bl	8008438 <__multadd>
 80080b4:	4629      	mov	r1, r5
 80080b6:	4607      	mov	r7, r0
 80080b8:	2300      	movs	r3, #0
 80080ba:	220a      	movs	r2, #10
 80080bc:	4658      	mov	r0, fp
 80080be:	f000 f9bb 	bl	8008438 <__multadd>
 80080c2:	4605      	mov	r5, r0
 80080c4:	e7f0      	b.n	80080a8 <_dtoa_r+0xac0>
 80080c6:	9b08      	ldr	r3, [sp, #32]
 80080c8:	2700      	movs	r7, #0
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	bfcc      	ite	gt
 80080ce:	461e      	movgt	r6, r3
 80080d0:	2601      	movle	r6, #1
 80080d2:	4456      	add	r6, sl
 80080d4:	4649      	mov	r1, r9
 80080d6:	2201      	movs	r2, #1
 80080d8:	4658      	mov	r0, fp
 80080da:	f000 fba1 	bl	8008820 <__lshift>
 80080de:	4621      	mov	r1, r4
 80080e0:	4681      	mov	r9, r0
 80080e2:	f000 fc09 	bl	80088f8 <__mcmp>
 80080e6:	2800      	cmp	r0, #0
 80080e8:	dcb0      	bgt.n	800804c <_dtoa_r+0xa64>
 80080ea:	d102      	bne.n	80080f2 <_dtoa_r+0xb0a>
 80080ec:	f018 0f01 	tst.w	r8, #1
 80080f0:	d1ac      	bne.n	800804c <_dtoa_r+0xa64>
 80080f2:	4633      	mov	r3, r6
 80080f4:	461e      	mov	r6, r3
 80080f6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80080fa:	2a30      	cmp	r2, #48	@ 0x30
 80080fc:	d0fa      	beq.n	80080f4 <_dtoa_r+0xb0c>
 80080fe:	e5be      	b.n	8007c7e <_dtoa_r+0x696>
 8008100:	459a      	cmp	sl, r3
 8008102:	d1a4      	bne.n	800804e <_dtoa_r+0xa66>
 8008104:	9b04      	ldr	r3, [sp, #16]
 8008106:	3301      	adds	r3, #1
 8008108:	9304      	str	r3, [sp, #16]
 800810a:	2331      	movs	r3, #49	@ 0x31
 800810c:	f88a 3000 	strb.w	r3, [sl]
 8008110:	e5b5      	b.n	8007c7e <_dtoa_r+0x696>
 8008112:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008114:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008174 <_dtoa_r+0xb8c>
 8008118:	b11b      	cbz	r3, 8008122 <_dtoa_r+0xb3a>
 800811a:	f10a 0308 	add.w	r3, sl, #8
 800811e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008120:	6013      	str	r3, [r2, #0]
 8008122:	4650      	mov	r0, sl
 8008124:	b017      	add	sp, #92	@ 0x5c
 8008126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800812a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800812c:	2b01      	cmp	r3, #1
 800812e:	f77f ae3d 	ble.w	8007dac <_dtoa_r+0x7c4>
 8008132:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008134:	930a      	str	r3, [sp, #40]	@ 0x28
 8008136:	2001      	movs	r0, #1
 8008138:	e65b      	b.n	8007df2 <_dtoa_r+0x80a>
 800813a:	9b08      	ldr	r3, [sp, #32]
 800813c:	2b00      	cmp	r3, #0
 800813e:	f77f aed6 	ble.w	8007eee <_dtoa_r+0x906>
 8008142:	4656      	mov	r6, sl
 8008144:	4621      	mov	r1, r4
 8008146:	4648      	mov	r0, r9
 8008148:	f7ff f9c6 	bl	80074d8 <quorem>
 800814c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008150:	9b08      	ldr	r3, [sp, #32]
 8008152:	f806 8b01 	strb.w	r8, [r6], #1
 8008156:	eba6 020a 	sub.w	r2, r6, sl
 800815a:	4293      	cmp	r3, r2
 800815c:	ddb3      	ble.n	80080c6 <_dtoa_r+0xade>
 800815e:	4649      	mov	r1, r9
 8008160:	2300      	movs	r3, #0
 8008162:	220a      	movs	r2, #10
 8008164:	4658      	mov	r0, fp
 8008166:	f000 f967 	bl	8008438 <__multadd>
 800816a:	4681      	mov	r9, r0
 800816c:	e7ea      	b.n	8008144 <_dtoa_r+0xb5c>
 800816e:	bf00      	nop
 8008170:	0800c013 	.word	0x0800c013
 8008174:	0800bf97 	.word	0x0800bf97

08008178 <_free_r>:
 8008178:	b538      	push	{r3, r4, r5, lr}
 800817a:	4605      	mov	r5, r0
 800817c:	2900      	cmp	r1, #0
 800817e:	d040      	beq.n	8008202 <_free_r+0x8a>
 8008180:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008184:	1f0c      	subs	r4, r1, #4
 8008186:	2b00      	cmp	r3, #0
 8008188:	bfb8      	it	lt
 800818a:	18e4      	addlt	r4, r4, r3
 800818c:	f000 f8e6 	bl	800835c <__malloc_lock>
 8008190:	4a1c      	ldr	r2, [pc, #112]	@ (8008204 <_free_r+0x8c>)
 8008192:	6813      	ldr	r3, [r2, #0]
 8008194:	b933      	cbnz	r3, 80081a4 <_free_r+0x2c>
 8008196:	6063      	str	r3, [r4, #4]
 8008198:	6014      	str	r4, [r2, #0]
 800819a:	4628      	mov	r0, r5
 800819c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081a0:	f000 b8e2 	b.w	8008368 <__malloc_unlock>
 80081a4:	42a3      	cmp	r3, r4
 80081a6:	d908      	bls.n	80081ba <_free_r+0x42>
 80081a8:	6820      	ldr	r0, [r4, #0]
 80081aa:	1821      	adds	r1, r4, r0
 80081ac:	428b      	cmp	r3, r1
 80081ae:	bf01      	itttt	eq
 80081b0:	6819      	ldreq	r1, [r3, #0]
 80081b2:	685b      	ldreq	r3, [r3, #4]
 80081b4:	1809      	addeq	r1, r1, r0
 80081b6:	6021      	streq	r1, [r4, #0]
 80081b8:	e7ed      	b.n	8008196 <_free_r+0x1e>
 80081ba:	461a      	mov	r2, r3
 80081bc:	685b      	ldr	r3, [r3, #4]
 80081be:	b10b      	cbz	r3, 80081c4 <_free_r+0x4c>
 80081c0:	42a3      	cmp	r3, r4
 80081c2:	d9fa      	bls.n	80081ba <_free_r+0x42>
 80081c4:	6811      	ldr	r1, [r2, #0]
 80081c6:	1850      	adds	r0, r2, r1
 80081c8:	42a0      	cmp	r0, r4
 80081ca:	d10b      	bne.n	80081e4 <_free_r+0x6c>
 80081cc:	6820      	ldr	r0, [r4, #0]
 80081ce:	4401      	add	r1, r0
 80081d0:	1850      	adds	r0, r2, r1
 80081d2:	4283      	cmp	r3, r0
 80081d4:	6011      	str	r1, [r2, #0]
 80081d6:	d1e0      	bne.n	800819a <_free_r+0x22>
 80081d8:	6818      	ldr	r0, [r3, #0]
 80081da:	685b      	ldr	r3, [r3, #4]
 80081dc:	4408      	add	r0, r1
 80081de:	6010      	str	r0, [r2, #0]
 80081e0:	6053      	str	r3, [r2, #4]
 80081e2:	e7da      	b.n	800819a <_free_r+0x22>
 80081e4:	d902      	bls.n	80081ec <_free_r+0x74>
 80081e6:	230c      	movs	r3, #12
 80081e8:	602b      	str	r3, [r5, #0]
 80081ea:	e7d6      	b.n	800819a <_free_r+0x22>
 80081ec:	6820      	ldr	r0, [r4, #0]
 80081ee:	1821      	adds	r1, r4, r0
 80081f0:	428b      	cmp	r3, r1
 80081f2:	bf01      	itttt	eq
 80081f4:	6819      	ldreq	r1, [r3, #0]
 80081f6:	685b      	ldreq	r3, [r3, #4]
 80081f8:	1809      	addeq	r1, r1, r0
 80081fa:	6021      	streq	r1, [r4, #0]
 80081fc:	6063      	str	r3, [r4, #4]
 80081fe:	6054      	str	r4, [r2, #4]
 8008200:	e7cb      	b.n	800819a <_free_r+0x22>
 8008202:	bd38      	pop	{r3, r4, r5, pc}
 8008204:	20001690 	.word	0x20001690

08008208 <malloc>:
 8008208:	4b02      	ldr	r3, [pc, #8]	@ (8008214 <malloc+0xc>)
 800820a:	4601      	mov	r1, r0
 800820c:	6818      	ldr	r0, [r3, #0]
 800820e:	f000 b825 	b.w	800825c <_malloc_r>
 8008212:	bf00      	nop
 8008214:	2000001c 	.word	0x2000001c

08008218 <sbrk_aligned>:
 8008218:	b570      	push	{r4, r5, r6, lr}
 800821a:	4e0f      	ldr	r6, [pc, #60]	@ (8008258 <sbrk_aligned+0x40>)
 800821c:	460c      	mov	r4, r1
 800821e:	6831      	ldr	r1, [r6, #0]
 8008220:	4605      	mov	r5, r0
 8008222:	b911      	cbnz	r1, 800822a <sbrk_aligned+0x12>
 8008224:	f001 fdf6 	bl	8009e14 <_sbrk_r>
 8008228:	6030      	str	r0, [r6, #0]
 800822a:	4621      	mov	r1, r4
 800822c:	4628      	mov	r0, r5
 800822e:	f001 fdf1 	bl	8009e14 <_sbrk_r>
 8008232:	1c43      	adds	r3, r0, #1
 8008234:	d103      	bne.n	800823e <sbrk_aligned+0x26>
 8008236:	f04f 34ff 	mov.w	r4, #4294967295
 800823a:	4620      	mov	r0, r4
 800823c:	bd70      	pop	{r4, r5, r6, pc}
 800823e:	1cc4      	adds	r4, r0, #3
 8008240:	f024 0403 	bic.w	r4, r4, #3
 8008244:	42a0      	cmp	r0, r4
 8008246:	d0f8      	beq.n	800823a <sbrk_aligned+0x22>
 8008248:	1a21      	subs	r1, r4, r0
 800824a:	4628      	mov	r0, r5
 800824c:	f001 fde2 	bl	8009e14 <_sbrk_r>
 8008250:	3001      	adds	r0, #1
 8008252:	d1f2      	bne.n	800823a <sbrk_aligned+0x22>
 8008254:	e7ef      	b.n	8008236 <sbrk_aligned+0x1e>
 8008256:	bf00      	nop
 8008258:	2000168c 	.word	0x2000168c

0800825c <_malloc_r>:
 800825c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008260:	1ccd      	adds	r5, r1, #3
 8008262:	f025 0503 	bic.w	r5, r5, #3
 8008266:	3508      	adds	r5, #8
 8008268:	2d0c      	cmp	r5, #12
 800826a:	bf38      	it	cc
 800826c:	250c      	movcc	r5, #12
 800826e:	2d00      	cmp	r5, #0
 8008270:	4606      	mov	r6, r0
 8008272:	db01      	blt.n	8008278 <_malloc_r+0x1c>
 8008274:	42a9      	cmp	r1, r5
 8008276:	d904      	bls.n	8008282 <_malloc_r+0x26>
 8008278:	230c      	movs	r3, #12
 800827a:	6033      	str	r3, [r6, #0]
 800827c:	2000      	movs	r0, #0
 800827e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008282:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008358 <_malloc_r+0xfc>
 8008286:	f000 f869 	bl	800835c <__malloc_lock>
 800828a:	f8d8 3000 	ldr.w	r3, [r8]
 800828e:	461c      	mov	r4, r3
 8008290:	bb44      	cbnz	r4, 80082e4 <_malloc_r+0x88>
 8008292:	4629      	mov	r1, r5
 8008294:	4630      	mov	r0, r6
 8008296:	f7ff ffbf 	bl	8008218 <sbrk_aligned>
 800829a:	1c43      	adds	r3, r0, #1
 800829c:	4604      	mov	r4, r0
 800829e:	d158      	bne.n	8008352 <_malloc_r+0xf6>
 80082a0:	f8d8 4000 	ldr.w	r4, [r8]
 80082a4:	4627      	mov	r7, r4
 80082a6:	2f00      	cmp	r7, #0
 80082a8:	d143      	bne.n	8008332 <_malloc_r+0xd6>
 80082aa:	2c00      	cmp	r4, #0
 80082ac:	d04b      	beq.n	8008346 <_malloc_r+0xea>
 80082ae:	6823      	ldr	r3, [r4, #0]
 80082b0:	4639      	mov	r1, r7
 80082b2:	4630      	mov	r0, r6
 80082b4:	eb04 0903 	add.w	r9, r4, r3
 80082b8:	f001 fdac 	bl	8009e14 <_sbrk_r>
 80082bc:	4581      	cmp	r9, r0
 80082be:	d142      	bne.n	8008346 <_malloc_r+0xea>
 80082c0:	6821      	ldr	r1, [r4, #0]
 80082c2:	4630      	mov	r0, r6
 80082c4:	1a6d      	subs	r5, r5, r1
 80082c6:	4629      	mov	r1, r5
 80082c8:	f7ff ffa6 	bl	8008218 <sbrk_aligned>
 80082cc:	3001      	adds	r0, #1
 80082ce:	d03a      	beq.n	8008346 <_malloc_r+0xea>
 80082d0:	6823      	ldr	r3, [r4, #0]
 80082d2:	442b      	add	r3, r5
 80082d4:	6023      	str	r3, [r4, #0]
 80082d6:	f8d8 3000 	ldr.w	r3, [r8]
 80082da:	685a      	ldr	r2, [r3, #4]
 80082dc:	bb62      	cbnz	r2, 8008338 <_malloc_r+0xdc>
 80082de:	f8c8 7000 	str.w	r7, [r8]
 80082e2:	e00f      	b.n	8008304 <_malloc_r+0xa8>
 80082e4:	6822      	ldr	r2, [r4, #0]
 80082e6:	1b52      	subs	r2, r2, r5
 80082e8:	d420      	bmi.n	800832c <_malloc_r+0xd0>
 80082ea:	2a0b      	cmp	r2, #11
 80082ec:	d917      	bls.n	800831e <_malloc_r+0xc2>
 80082ee:	1961      	adds	r1, r4, r5
 80082f0:	42a3      	cmp	r3, r4
 80082f2:	6025      	str	r5, [r4, #0]
 80082f4:	bf18      	it	ne
 80082f6:	6059      	strne	r1, [r3, #4]
 80082f8:	6863      	ldr	r3, [r4, #4]
 80082fa:	bf08      	it	eq
 80082fc:	f8c8 1000 	streq.w	r1, [r8]
 8008300:	5162      	str	r2, [r4, r5]
 8008302:	604b      	str	r3, [r1, #4]
 8008304:	4630      	mov	r0, r6
 8008306:	f000 f82f 	bl	8008368 <__malloc_unlock>
 800830a:	f104 000b 	add.w	r0, r4, #11
 800830e:	1d23      	adds	r3, r4, #4
 8008310:	f020 0007 	bic.w	r0, r0, #7
 8008314:	1ac2      	subs	r2, r0, r3
 8008316:	bf1c      	itt	ne
 8008318:	1a1b      	subne	r3, r3, r0
 800831a:	50a3      	strne	r3, [r4, r2]
 800831c:	e7af      	b.n	800827e <_malloc_r+0x22>
 800831e:	6862      	ldr	r2, [r4, #4]
 8008320:	42a3      	cmp	r3, r4
 8008322:	bf0c      	ite	eq
 8008324:	f8c8 2000 	streq.w	r2, [r8]
 8008328:	605a      	strne	r2, [r3, #4]
 800832a:	e7eb      	b.n	8008304 <_malloc_r+0xa8>
 800832c:	4623      	mov	r3, r4
 800832e:	6864      	ldr	r4, [r4, #4]
 8008330:	e7ae      	b.n	8008290 <_malloc_r+0x34>
 8008332:	463c      	mov	r4, r7
 8008334:	687f      	ldr	r7, [r7, #4]
 8008336:	e7b6      	b.n	80082a6 <_malloc_r+0x4a>
 8008338:	461a      	mov	r2, r3
 800833a:	685b      	ldr	r3, [r3, #4]
 800833c:	42a3      	cmp	r3, r4
 800833e:	d1fb      	bne.n	8008338 <_malloc_r+0xdc>
 8008340:	2300      	movs	r3, #0
 8008342:	6053      	str	r3, [r2, #4]
 8008344:	e7de      	b.n	8008304 <_malloc_r+0xa8>
 8008346:	230c      	movs	r3, #12
 8008348:	4630      	mov	r0, r6
 800834a:	6033      	str	r3, [r6, #0]
 800834c:	f000 f80c 	bl	8008368 <__malloc_unlock>
 8008350:	e794      	b.n	800827c <_malloc_r+0x20>
 8008352:	6005      	str	r5, [r0, #0]
 8008354:	e7d6      	b.n	8008304 <_malloc_r+0xa8>
 8008356:	bf00      	nop
 8008358:	20001690 	.word	0x20001690

0800835c <__malloc_lock>:
 800835c:	4801      	ldr	r0, [pc, #4]	@ (8008364 <__malloc_lock+0x8>)
 800835e:	f7ff b898 	b.w	8007492 <__retarget_lock_acquire_recursive>
 8008362:	bf00      	nop
 8008364:	20001688 	.word	0x20001688

08008368 <__malloc_unlock>:
 8008368:	4801      	ldr	r0, [pc, #4]	@ (8008370 <__malloc_unlock+0x8>)
 800836a:	f7ff b893 	b.w	8007494 <__retarget_lock_release_recursive>
 800836e:	bf00      	nop
 8008370:	20001688 	.word	0x20001688

08008374 <_Balloc>:
 8008374:	b570      	push	{r4, r5, r6, lr}
 8008376:	69c6      	ldr	r6, [r0, #28]
 8008378:	4604      	mov	r4, r0
 800837a:	460d      	mov	r5, r1
 800837c:	b976      	cbnz	r6, 800839c <_Balloc+0x28>
 800837e:	2010      	movs	r0, #16
 8008380:	f7ff ff42 	bl	8008208 <malloc>
 8008384:	4602      	mov	r2, r0
 8008386:	61e0      	str	r0, [r4, #28]
 8008388:	b920      	cbnz	r0, 8008394 <_Balloc+0x20>
 800838a:	216b      	movs	r1, #107	@ 0x6b
 800838c:	4b17      	ldr	r3, [pc, #92]	@ (80083ec <_Balloc+0x78>)
 800838e:	4818      	ldr	r0, [pc, #96]	@ (80083f0 <_Balloc+0x7c>)
 8008390:	f001 fd56 	bl	8009e40 <__assert_func>
 8008394:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008398:	6006      	str	r6, [r0, #0]
 800839a:	60c6      	str	r6, [r0, #12]
 800839c:	69e6      	ldr	r6, [r4, #28]
 800839e:	68f3      	ldr	r3, [r6, #12]
 80083a0:	b183      	cbz	r3, 80083c4 <_Balloc+0x50>
 80083a2:	69e3      	ldr	r3, [r4, #28]
 80083a4:	68db      	ldr	r3, [r3, #12]
 80083a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80083aa:	b9b8      	cbnz	r0, 80083dc <_Balloc+0x68>
 80083ac:	2101      	movs	r1, #1
 80083ae:	fa01 f605 	lsl.w	r6, r1, r5
 80083b2:	1d72      	adds	r2, r6, #5
 80083b4:	4620      	mov	r0, r4
 80083b6:	0092      	lsls	r2, r2, #2
 80083b8:	f001 fd60 	bl	8009e7c <_calloc_r>
 80083bc:	b160      	cbz	r0, 80083d8 <_Balloc+0x64>
 80083be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80083c2:	e00e      	b.n	80083e2 <_Balloc+0x6e>
 80083c4:	2221      	movs	r2, #33	@ 0x21
 80083c6:	2104      	movs	r1, #4
 80083c8:	4620      	mov	r0, r4
 80083ca:	f001 fd57 	bl	8009e7c <_calloc_r>
 80083ce:	69e3      	ldr	r3, [r4, #28]
 80083d0:	60f0      	str	r0, [r6, #12]
 80083d2:	68db      	ldr	r3, [r3, #12]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d1e4      	bne.n	80083a2 <_Balloc+0x2e>
 80083d8:	2000      	movs	r0, #0
 80083da:	bd70      	pop	{r4, r5, r6, pc}
 80083dc:	6802      	ldr	r2, [r0, #0]
 80083de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80083e2:	2300      	movs	r3, #0
 80083e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80083e8:	e7f7      	b.n	80083da <_Balloc+0x66>
 80083ea:	bf00      	nop
 80083ec:	0800bfa4 	.word	0x0800bfa4
 80083f0:	0800c024 	.word	0x0800c024

080083f4 <_Bfree>:
 80083f4:	b570      	push	{r4, r5, r6, lr}
 80083f6:	69c6      	ldr	r6, [r0, #28]
 80083f8:	4605      	mov	r5, r0
 80083fa:	460c      	mov	r4, r1
 80083fc:	b976      	cbnz	r6, 800841c <_Bfree+0x28>
 80083fe:	2010      	movs	r0, #16
 8008400:	f7ff ff02 	bl	8008208 <malloc>
 8008404:	4602      	mov	r2, r0
 8008406:	61e8      	str	r0, [r5, #28]
 8008408:	b920      	cbnz	r0, 8008414 <_Bfree+0x20>
 800840a:	218f      	movs	r1, #143	@ 0x8f
 800840c:	4b08      	ldr	r3, [pc, #32]	@ (8008430 <_Bfree+0x3c>)
 800840e:	4809      	ldr	r0, [pc, #36]	@ (8008434 <_Bfree+0x40>)
 8008410:	f001 fd16 	bl	8009e40 <__assert_func>
 8008414:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008418:	6006      	str	r6, [r0, #0]
 800841a:	60c6      	str	r6, [r0, #12]
 800841c:	b13c      	cbz	r4, 800842e <_Bfree+0x3a>
 800841e:	69eb      	ldr	r3, [r5, #28]
 8008420:	6862      	ldr	r2, [r4, #4]
 8008422:	68db      	ldr	r3, [r3, #12]
 8008424:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008428:	6021      	str	r1, [r4, #0]
 800842a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800842e:	bd70      	pop	{r4, r5, r6, pc}
 8008430:	0800bfa4 	.word	0x0800bfa4
 8008434:	0800c024 	.word	0x0800c024

08008438 <__multadd>:
 8008438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800843c:	4607      	mov	r7, r0
 800843e:	460c      	mov	r4, r1
 8008440:	461e      	mov	r6, r3
 8008442:	2000      	movs	r0, #0
 8008444:	690d      	ldr	r5, [r1, #16]
 8008446:	f101 0c14 	add.w	ip, r1, #20
 800844a:	f8dc 3000 	ldr.w	r3, [ip]
 800844e:	3001      	adds	r0, #1
 8008450:	b299      	uxth	r1, r3
 8008452:	fb02 6101 	mla	r1, r2, r1, r6
 8008456:	0c1e      	lsrs	r6, r3, #16
 8008458:	0c0b      	lsrs	r3, r1, #16
 800845a:	fb02 3306 	mla	r3, r2, r6, r3
 800845e:	b289      	uxth	r1, r1
 8008460:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008464:	4285      	cmp	r5, r0
 8008466:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800846a:	f84c 1b04 	str.w	r1, [ip], #4
 800846e:	dcec      	bgt.n	800844a <__multadd+0x12>
 8008470:	b30e      	cbz	r6, 80084b6 <__multadd+0x7e>
 8008472:	68a3      	ldr	r3, [r4, #8]
 8008474:	42ab      	cmp	r3, r5
 8008476:	dc19      	bgt.n	80084ac <__multadd+0x74>
 8008478:	6861      	ldr	r1, [r4, #4]
 800847a:	4638      	mov	r0, r7
 800847c:	3101      	adds	r1, #1
 800847e:	f7ff ff79 	bl	8008374 <_Balloc>
 8008482:	4680      	mov	r8, r0
 8008484:	b928      	cbnz	r0, 8008492 <__multadd+0x5a>
 8008486:	4602      	mov	r2, r0
 8008488:	21ba      	movs	r1, #186	@ 0xba
 800848a:	4b0c      	ldr	r3, [pc, #48]	@ (80084bc <__multadd+0x84>)
 800848c:	480c      	ldr	r0, [pc, #48]	@ (80084c0 <__multadd+0x88>)
 800848e:	f001 fcd7 	bl	8009e40 <__assert_func>
 8008492:	6922      	ldr	r2, [r4, #16]
 8008494:	f104 010c 	add.w	r1, r4, #12
 8008498:	3202      	adds	r2, #2
 800849a:	0092      	lsls	r2, r2, #2
 800849c:	300c      	adds	r0, #12
 800849e:	f7ff f808 	bl	80074b2 <memcpy>
 80084a2:	4621      	mov	r1, r4
 80084a4:	4638      	mov	r0, r7
 80084a6:	f7ff ffa5 	bl	80083f4 <_Bfree>
 80084aa:	4644      	mov	r4, r8
 80084ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80084b0:	3501      	adds	r5, #1
 80084b2:	615e      	str	r6, [r3, #20]
 80084b4:	6125      	str	r5, [r4, #16]
 80084b6:	4620      	mov	r0, r4
 80084b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084bc:	0800c013 	.word	0x0800c013
 80084c0:	0800c024 	.word	0x0800c024

080084c4 <__s2b>:
 80084c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084c8:	4615      	mov	r5, r2
 80084ca:	2209      	movs	r2, #9
 80084cc:	461f      	mov	r7, r3
 80084ce:	3308      	adds	r3, #8
 80084d0:	460c      	mov	r4, r1
 80084d2:	fb93 f3f2 	sdiv	r3, r3, r2
 80084d6:	4606      	mov	r6, r0
 80084d8:	2201      	movs	r2, #1
 80084da:	2100      	movs	r1, #0
 80084dc:	429a      	cmp	r2, r3
 80084de:	db09      	blt.n	80084f4 <__s2b+0x30>
 80084e0:	4630      	mov	r0, r6
 80084e2:	f7ff ff47 	bl	8008374 <_Balloc>
 80084e6:	b940      	cbnz	r0, 80084fa <__s2b+0x36>
 80084e8:	4602      	mov	r2, r0
 80084ea:	21d3      	movs	r1, #211	@ 0xd3
 80084ec:	4b18      	ldr	r3, [pc, #96]	@ (8008550 <__s2b+0x8c>)
 80084ee:	4819      	ldr	r0, [pc, #100]	@ (8008554 <__s2b+0x90>)
 80084f0:	f001 fca6 	bl	8009e40 <__assert_func>
 80084f4:	0052      	lsls	r2, r2, #1
 80084f6:	3101      	adds	r1, #1
 80084f8:	e7f0      	b.n	80084dc <__s2b+0x18>
 80084fa:	9b08      	ldr	r3, [sp, #32]
 80084fc:	2d09      	cmp	r5, #9
 80084fe:	6143      	str	r3, [r0, #20]
 8008500:	f04f 0301 	mov.w	r3, #1
 8008504:	6103      	str	r3, [r0, #16]
 8008506:	dd16      	ble.n	8008536 <__s2b+0x72>
 8008508:	f104 0909 	add.w	r9, r4, #9
 800850c:	46c8      	mov	r8, r9
 800850e:	442c      	add	r4, r5
 8008510:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008514:	4601      	mov	r1, r0
 8008516:	220a      	movs	r2, #10
 8008518:	4630      	mov	r0, r6
 800851a:	3b30      	subs	r3, #48	@ 0x30
 800851c:	f7ff ff8c 	bl	8008438 <__multadd>
 8008520:	45a0      	cmp	r8, r4
 8008522:	d1f5      	bne.n	8008510 <__s2b+0x4c>
 8008524:	f1a5 0408 	sub.w	r4, r5, #8
 8008528:	444c      	add	r4, r9
 800852a:	1b2d      	subs	r5, r5, r4
 800852c:	1963      	adds	r3, r4, r5
 800852e:	42bb      	cmp	r3, r7
 8008530:	db04      	blt.n	800853c <__s2b+0x78>
 8008532:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008536:	2509      	movs	r5, #9
 8008538:	340a      	adds	r4, #10
 800853a:	e7f6      	b.n	800852a <__s2b+0x66>
 800853c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008540:	4601      	mov	r1, r0
 8008542:	220a      	movs	r2, #10
 8008544:	4630      	mov	r0, r6
 8008546:	3b30      	subs	r3, #48	@ 0x30
 8008548:	f7ff ff76 	bl	8008438 <__multadd>
 800854c:	e7ee      	b.n	800852c <__s2b+0x68>
 800854e:	bf00      	nop
 8008550:	0800c013 	.word	0x0800c013
 8008554:	0800c024 	.word	0x0800c024

08008558 <__hi0bits>:
 8008558:	4603      	mov	r3, r0
 800855a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800855e:	bf3a      	itte	cc
 8008560:	0403      	lslcc	r3, r0, #16
 8008562:	2010      	movcc	r0, #16
 8008564:	2000      	movcs	r0, #0
 8008566:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800856a:	bf3c      	itt	cc
 800856c:	021b      	lslcc	r3, r3, #8
 800856e:	3008      	addcc	r0, #8
 8008570:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008574:	bf3c      	itt	cc
 8008576:	011b      	lslcc	r3, r3, #4
 8008578:	3004      	addcc	r0, #4
 800857a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800857e:	bf3c      	itt	cc
 8008580:	009b      	lslcc	r3, r3, #2
 8008582:	3002      	addcc	r0, #2
 8008584:	2b00      	cmp	r3, #0
 8008586:	db05      	blt.n	8008594 <__hi0bits+0x3c>
 8008588:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800858c:	f100 0001 	add.w	r0, r0, #1
 8008590:	bf08      	it	eq
 8008592:	2020      	moveq	r0, #32
 8008594:	4770      	bx	lr

08008596 <__lo0bits>:
 8008596:	6803      	ldr	r3, [r0, #0]
 8008598:	4602      	mov	r2, r0
 800859a:	f013 0007 	ands.w	r0, r3, #7
 800859e:	d00b      	beq.n	80085b8 <__lo0bits+0x22>
 80085a0:	07d9      	lsls	r1, r3, #31
 80085a2:	d421      	bmi.n	80085e8 <__lo0bits+0x52>
 80085a4:	0798      	lsls	r0, r3, #30
 80085a6:	bf49      	itett	mi
 80085a8:	085b      	lsrmi	r3, r3, #1
 80085aa:	089b      	lsrpl	r3, r3, #2
 80085ac:	2001      	movmi	r0, #1
 80085ae:	6013      	strmi	r3, [r2, #0]
 80085b0:	bf5c      	itt	pl
 80085b2:	2002      	movpl	r0, #2
 80085b4:	6013      	strpl	r3, [r2, #0]
 80085b6:	4770      	bx	lr
 80085b8:	b299      	uxth	r1, r3
 80085ba:	b909      	cbnz	r1, 80085c0 <__lo0bits+0x2a>
 80085bc:	2010      	movs	r0, #16
 80085be:	0c1b      	lsrs	r3, r3, #16
 80085c0:	b2d9      	uxtb	r1, r3
 80085c2:	b909      	cbnz	r1, 80085c8 <__lo0bits+0x32>
 80085c4:	3008      	adds	r0, #8
 80085c6:	0a1b      	lsrs	r3, r3, #8
 80085c8:	0719      	lsls	r1, r3, #28
 80085ca:	bf04      	itt	eq
 80085cc:	091b      	lsreq	r3, r3, #4
 80085ce:	3004      	addeq	r0, #4
 80085d0:	0799      	lsls	r1, r3, #30
 80085d2:	bf04      	itt	eq
 80085d4:	089b      	lsreq	r3, r3, #2
 80085d6:	3002      	addeq	r0, #2
 80085d8:	07d9      	lsls	r1, r3, #31
 80085da:	d403      	bmi.n	80085e4 <__lo0bits+0x4e>
 80085dc:	085b      	lsrs	r3, r3, #1
 80085de:	f100 0001 	add.w	r0, r0, #1
 80085e2:	d003      	beq.n	80085ec <__lo0bits+0x56>
 80085e4:	6013      	str	r3, [r2, #0]
 80085e6:	4770      	bx	lr
 80085e8:	2000      	movs	r0, #0
 80085ea:	4770      	bx	lr
 80085ec:	2020      	movs	r0, #32
 80085ee:	4770      	bx	lr

080085f0 <__i2b>:
 80085f0:	b510      	push	{r4, lr}
 80085f2:	460c      	mov	r4, r1
 80085f4:	2101      	movs	r1, #1
 80085f6:	f7ff febd 	bl	8008374 <_Balloc>
 80085fa:	4602      	mov	r2, r0
 80085fc:	b928      	cbnz	r0, 800860a <__i2b+0x1a>
 80085fe:	f240 1145 	movw	r1, #325	@ 0x145
 8008602:	4b04      	ldr	r3, [pc, #16]	@ (8008614 <__i2b+0x24>)
 8008604:	4804      	ldr	r0, [pc, #16]	@ (8008618 <__i2b+0x28>)
 8008606:	f001 fc1b 	bl	8009e40 <__assert_func>
 800860a:	2301      	movs	r3, #1
 800860c:	6144      	str	r4, [r0, #20]
 800860e:	6103      	str	r3, [r0, #16]
 8008610:	bd10      	pop	{r4, pc}
 8008612:	bf00      	nop
 8008614:	0800c013 	.word	0x0800c013
 8008618:	0800c024 	.word	0x0800c024

0800861c <__multiply>:
 800861c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008620:	4614      	mov	r4, r2
 8008622:	690a      	ldr	r2, [r1, #16]
 8008624:	6923      	ldr	r3, [r4, #16]
 8008626:	460f      	mov	r7, r1
 8008628:	429a      	cmp	r2, r3
 800862a:	bfa2      	ittt	ge
 800862c:	4623      	movge	r3, r4
 800862e:	460c      	movge	r4, r1
 8008630:	461f      	movge	r7, r3
 8008632:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008636:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800863a:	68a3      	ldr	r3, [r4, #8]
 800863c:	6861      	ldr	r1, [r4, #4]
 800863e:	eb0a 0609 	add.w	r6, sl, r9
 8008642:	42b3      	cmp	r3, r6
 8008644:	b085      	sub	sp, #20
 8008646:	bfb8      	it	lt
 8008648:	3101      	addlt	r1, #1
 800864a:	f7ff fe93 	bl	8008374 <_Balloc>
 800864e:	b930      	cbnz	r0, 800865e <__multiply+0x42>
 8008650:	4602      	mov	r2, r0
 8008652:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008656:	4b43      	ldr	r3, [pc, #268]	@ (8008764 <__multiply+0x148>)
 8008658:	4843      	ldr	r0, [pc, #268]	@ (8008768 <__multiply+0x14c>)
 800865a:	f001 fbf1 	bl	8009e40 <__assert_func>
 800865e:	f100 0514 	add.w	r5, r0, #20
 8008662:	462b      	mov	r3, r5
 8008664:	2200      	movs	r2, #0
 8008666:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800866a:	4543      	cmp	r3, r8
 800866c:	d321      	bcc.n	80086b2 <__multiply+0x96>
 800866e:	f107 0114 	add.w	r1, r7, #20
 8008672:	f104 0214 	add.w	r2, r4, #20
 8008676:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800867a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800867e:	9302      	str	r3, [sp, #8]
 8008680:	1b13      	subs	r3, r2, r4
 8008682:	3b15      	subs	r3, #21
 8008684:	f023 0303 	bic.w	r3, r3, #3
 8008688:	3304      	adds	r3, #4
 800868a:	f104 0715 	add.w	r7, r4, #21
 800868e:	42ba      	cmp	r2, r7
 8008690:	bf38      	it	cc
 8008692:	2304      	movcc	r3, #4
 8008694:	9301      	str	r3, [sp, #4]
 8008696:	9b02      	ldr	r3, [sp, #8]
 8008698:	9103      	str	r1, [sp, #12]
 800869a:	428b      	cmp	r3, r1
 800869c:	d80c      	bhi.n	80086b8 <__multiply+0x9c>
 800869e:	2e00      	cmp	r6, #0
 80086a0:	dd03      	ble.n	80086aa <__multiply+0x8e>
 80086a2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d05a      	beq.n	8008760 <__multiply+0x144>
 80086aa:	6106      	str	r6, [r0, #16]
 80086ac:	b005      	add	sp, #20
 80086ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086b2:	f843 2b04 	str.w	r2, [r3], #4
 80086b6:	e7d8      	b.n	800866a <__multiply+0x4e>
 80086b8:	f8b1 a000 	ldrh.w	sl, [r1]
 80086bc:	f1ba 0f00 	cmp.w	sl, #0
 80086c0:	d023      	beq.n	800870a <__multiply+0xee>
 80086c2:	46a9      	mov	r9, r5
 80086c4:	f04f 0c00 	mov.w	ip, #0
 80086c8:	f104 0e14 	add.w	lr, r4, #20
 80086cc:	f85e 7b04 	ldr.w	r7, [lr], #4
 80086d0:	f8d9 3000 	ldr.w	r3, [r9]
 80086d4:	fa1f fb87 	uxth.w	fp, r7
 80086d8:	b29b      	uxth	r3, r3
 80086da:	fb0a 330b 	mla	r3, sl, fp, r3
 80086de:	4463      	add	r3, ip
 80086e0:	f8d9 c000 	ldr.w	ip, [r9]
 80086e4:	0c3f      	lsrs	r7, r7, #16
 80086e6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80086ea:	fb0a c707 	mla	r7, sl, r7, ip
 80086ee:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80086f2:	b29b      	uxth	r3, r3
 80086f4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80086f8:	4572      	cmp	r2, lr
 80086fa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80086fe:	f849 3b04 	str.w	r3, [r9], #4
 8008702:	d8e3      	bhi.n	80086cc <__multiply+0xb0>
 8008704:	9b01      	ldr	r3, [sp, #4]
 8008706:	f845 c003 	str.w	ip, [r5, r3]
 800870a:	9b03      	ldr	r3, [sp, #12]
 800870c:	3104      	adds	r1, #4
 800870e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008712:	f1b9 0f00 	cmp.w	r9, #0
 8008716:	d021      	beq.n	800875c <__multiply+0x140>
 8008718:	46ae      	mov	lr, r5
 800871a:	f04f 0a00 	mov.w	sl, #0
 800871e:	682b      	ldr	r3, [r5, #0]
 8008720:	f104 0c14 	add.w	ip, r4, #20
 8008724:	f8bc b000 	ldrh.w	fp, [ip]
 8008728:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800872c:	b29b      	uxth	r3, r3
 800872e:	fb09 770b 	mla	r7, r9, fp, r7
 8008732:	4457      	add	r7, sl
 8008734:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008738:	f84e 3b04 	str.w	r3, [lr], #4
 800873c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008740:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008744:	f8be 3000 	ldrh.w	r3, [lr]
 8008748:	4562      	cmp	r2, ip
 800874a:	fb09 330a 	mla	r3, r9, sl, r3
 800874e:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008752:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008756:	d8e5      	bhi.n	8008724 <__multiply+0x108>
 8008758:	9f01      	ldr	r7, [sp, #4]
 800875a:	51eb      	str	r3, [r5, r7]
 800875c:	3504      	adds	r5, #4
 800875e:	e79a      	b.n	8008696 <__multiply+0x7a>
 8008760:	3e01      	subs	r6, #1
 8008762:	e79c      	b.n	800869e <__multiply+0x82>
 8008764:	0800c013 	.word	0x0800c013
 8008768:	0800c024 	.word	0x0800c024

0800876c <__pow5mult>:
 800876c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008770:	4615      	mov	r5, r2
 8008772:	f012 0203 	ands.w	r2, r2, #3
 8008776:	4607      	mov	r7, r0
 8008778:	460e      	mov	r6, r1
 800877a:	d007      	beq.n	800878c <__pow5mult+0x20>
 800877c:	4c25      	ldr	r4, [pc, #148]	@ (8008814 <__pow5mult+0xa8>)
 800877e:	3a01      	subs	r2, #1
 8008780:	2300      	movs	r3, #0
 8008782:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008786:	f7ff fe57 	bl	8008438 <__multadd>
 800878a:	4606      	mov	r6, r0
 800878c:	10ad      	asrs	r5, r5, #2
 800878e:	d03d      	beq.n	800880c <__pow5mult+0xa0>
 8008790:	69fc      	ldr	r4, [r7, #28]
 8008792:	b97c      	cbnz	r4, 80087b4 <__pow5mult+0x48>
 8008794:	2010      	movs	r0, #16
 8008796:	f7ff fd37 	bl	8008208 <malloc>
 800879a:	4602      	mov	r2, r0
 800879c:	61f8      	str	r0, [r7, #28]
 800879e:	b928      	cbnz	r0, 80087ac <__pow5mult+0x40>
 80087a0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80087a4:	4b1c      	ldr	r3, [pc, #112]	@ (8008818 <__pow5mult+0xac>)
 80087a6:	481d      	ldr	r0, [pc, #116]	@ (800881c <__pow5mult+0xb0>)
 80087a8:	f001 fb4a 	bl	8009e40 <__assert_func>
 80087ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80087b0:	6004      	str	r4, [r0, #0]
 80087b2:	60c4      	str	r4, [r0, #12]
 80087b4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80087b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80087bc:	b94c      	cbnz	r4, 80087d2 <__pow5mult+0x66>
 80087be:	f240 2171 	movw	r1, #625	@ 0x271
 80087c2:	4638      	mov	r0, r7
 80087c4:	f7ff ff14 	bl	80085f0 <__i2b>
 80087c8:	2300      	movs	r3, #0
 80087ca:	4604      	mov	r4, r0
 80087cc:	f8c8 0008 	str.w	r0, [r8, #8]
 80087d0:	6003      	str	r3, [r0, #0]
 80087d2:	f04f 0900 	mov.w	r9, #0
 80087d6:	07eb      	lsls	r3, r5, #31
 80087d8:	d50a      	bpl.n	80087f0 <__pow5mult+0x84>
 80087da:	4631      	mov	r1, r6
 80087dc:	4622      	mov	r2, r4
 80087de:	4638      	mov	r0, r7
 80087e0:	f7ff ff1c 	bl	800861c <__multiply>
 80087e4:	4680      	mov	r8, r0
 80087e6:	4631      	mov	r1, r6
 80087e8:	4638      	mov	r0, r7
 80087ea:	f7ff fe03 	bl	80083f4 <_Bfree>
 80087ee:	4646      	mov	r6, r8
 80087f0:	106d      	asrs	r5, r5, #1
 80087f2:	d00b      	beq.n	800880c <__pow5mult+0xa0>
 80087f4:	6820      	ldr	r0, [r4, #0]
 80087f6:	b938      	cbnz	r0, 8008808 <__pow5mult+0x9c>
 80087f8:	4622      	mov	r2, r4
 80087fa:	4621      	mov	r1, r4
 80087fc:	4638      	mov	r0, r7
 80087fe:	f7ff ff0d 	bl	800861c <__multiply>
 8008802:	6020      	str	r0, [r4, #0]
 8008804:	f8c0 9000 	str.w	r9, [r0]
 8008808:	4604      	mov	r4, r0
 800880a:	e7e4      	b.n	80087d6 <__pow5mult+0x6a>
 800880c:	4630      	mov	r0, r6
 800880e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008812:	bf00      	nop
 8008814:	0800c080 	.word	0x0800c080
 8008818:	0800bfa4 	.word	0x0800bfa4
 800881c:	0800c024 	.word	0x0800c024

08008820 <__lshift>:
 8008820:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008824:	460c      	mov	r4, r1
 8008826:	4607      	mov	r7, r0
 8008828:	4691      	mov	r9, r2
 800882a:	6923      	ldr	r3, [r4, #16]
 800882c:	6849      	ldr	r1, [r1, #4]
 800882e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008832:	68a3      	ldr	r3, [r4, #8]
 8008834:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008838:	f108 0601 	add.w	r6, r8, #1
 800883c:	42b3      	cmp	r3, r6
 800883e:	db0b      	blt.n	8008858 <__lshift+0x38>
 8008840:	4638      	mov	r0, r7
 8008842:	f7ff fd97 	bl	8008374 <_Balloc>
 8008846:	4605      	mov	r5, r0
 8008848:	b948      	cbnz	r0, 800885e <__lshift+0x3e>
 800884a:	4602      	mov	r2, r0
 800884c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008850:	4b27      	ldr	r3, [pc, #156]	@ (80088f0 <__lshift+0xd0>)
 8008852:	4828      	ldr	r0, [pc, #160]	@ (80088f4 <__lshift+0xd4>)
 8008854:	f001 faf4 	bl	8009e40 <__assert_func>
 8008858:	3101      	adds	r1, #1
 800885a:	005b      	lsls	r3, r3, #1
 800885c:	e7ee      	b.n	800883c <__lshift+0x1c>
 800885e:	2300      	movs	r3, #0
 8008860:	f100 0114 	add.w	r1, r0, #20
 8008864:	f100 0210 	add.w	r2, r0, #16
 8008868:	4618      	mov	r0, r3
 800886a:	4553      	cmp	r3, sl
 800886c:	db33      	blt.n	80088d6 <__lshift+0xb6>
 800886e:	6920      	ldr	r0, [r4, #16]
 8008870:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008874:	f104 0314 	add.w	r3, r4, #20
 8008878:	f019 091f 	ands.w	r9, r9, #31
 800887c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008880:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008884:	d02b      	beq.n	80088de <__lshift+0xbe>
 8008886:	468a      	mov	sl, r1
 8008888:	2200      	movs	r2, #0
 800888a:	f1c9 0e20 	rsb	lr, r9, #32
 800888e:	6818      	ldr	r0, [r3, #0]
 8008890:	fa00 f009 	lsl.w	r0, r0, r9
 8008894:	4310      	orrs	r0, r2
 8008896:	f84a 0b04 	str.w	r0, [sl], #4
 800889a:	f853 2b04 	ldr.w	r2, [r3], #4
 800889e:	459c      	cmp	ip, r3
 80088a0:	fa22 f20e 	lsr.w	r2, r2, lr
 80088a4:	d8f3      	bhi.n	800888e <__lshift+0x6e>
 80088a6:	ebac 0304 	sub.w	r3, ip, r4
 80088aa:	3b15      	subs	r3, #21
 80088ac:	f023 0303 	bic.w	r3, r3, #3
 80088b0:	3304      	adds	r3, #4
 80088b2:	f104 0015 	add.w	r0, r4, #21
 80088b6:	4584      	cmp	ip, r0
 80088b8:	bf38      	it	cc
 80088ba:	2304      	movcc	r3, #4
 80088bc:	50ca      	str	r2, [r1, r3]
 80088be:	b10a      	cbz	r2, 80088c4 <__lshift+0xa4>
 80088c0:	f108 0602 	add.w	r6, r8, #2
 80088c4:	3e01      	subs	r6, #1
 80088c6:	4638      	mov	r0, r7
 80088c8:	4621      	mov	r1, r4
 80088ca:	612e      	str	r6, [r5, #16]
 80088cc:	f7ff fd92 	bl	80083f4 <_Bfree>
 80088d0:	4628      	mov	r0, r5
 80088d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088d6:	f842 0f04 	str.w	r0, [r2, #4]!
 80088da:	3301      	adds	r3, #1
 80088dc:	e7c5      	b.n	800886a <__lshift+0x4a>
 80088de:	3904      	subs	r1, #4
 80088e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80088e4:	459c      	cmp	ip, r3
 80088e6:	f841 2f04 	str.w	r2, [r1, #4]!
 80088ea:	d8f9      	bhi.n	80088e0 <__lshift+0xc0>
 80088ec:	e7ea      	b.n	80088c4 <__lshift+0xa4>
 80088ee:	bf00      	nop
 80088f0:	0800c013 	.word	0x0800c013
 80088f4:	0800c024 	.word	0x0800c024

080088f8 <__mcmp>:
 80088f8:	4603      	mov	r3, r0
 80088fa:	690a      	ldr	r2, [r1, #16]
 80088fc:	6900      	ldr	r0, [r0, #16]
 80088fe:	b530      	push	{r4, r5, lr}
 8008900:	1a80      	subs	r0, r0, r2
 8008902:	d10e      	bne.n	8008922 <__mcmp+0x2a>
 8008904:	3314      	adds	r3, #20
 8008906:	3114      	adds	r1, #20
 8008908:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800890c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008910:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008914:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008918:	4295      	cmp	r5, r2
 800891a:	d003      	beq.n	8008924 <__mcmp+0x2c>
 800891c:	d205      	bcs.n	800892a <__mcmp+0x32>
 800891e:	f04f 30ff 	mov.w	r0, #4294967295
 8008922:	bd30      	pop	{r4, r5, pc}
 8008924:	42a3      	cmp	r3, r4
 8008926:	d3f3      	bcc.n	8008910 <__mcmp+0x18>
 8008928:	e7fb      	b.n	8008922 <__mcmp+0x2a>
 800892a:	2001      	movs	r0, #1
 800892c:	e7f9      	b.n	8008922 <__mcmp+0x2a>
	...

08008930 <__mdiff>:
 8008930:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008934:	4689      	mov	r9, r1
 8008936:	4606      	mov	r6, r0
 8008938:	4611      	mov	r1, r2
 800893a:	4648      	mov	r0, r9
 800893c:	4614      	mov	r4, r2
 800893e:	f7ff ffdb 	bl	80088f8 <__mcmp>
 8008942:	1e05      	subs	r5, r0, #0
 8008944:	d112      	bne.n	800896c <__mdiff+0x3c>
 8008946:	4629      	mov	r1, r5
 8008948:	4630      	mov	r0, r6
 800894a:	f7ff fd13 	bl	8008374 <_Balloc>
 800894e:	4602      	mov	r2, r0
 8008950:	b928      	cbnz	r0, 800895e <__mdiff+0x2e>
 8008952:	f240 2137 	movw	r1, #567	@ 0x237
 8008956:	4b3e      	ldr	r3, [pc, #248]	@ (8008a50 <__mdiff+0x120>)
 8008958:	483e      	ldr	r0, [pc, #248]	@ (8008a54 <__mdiff+0x124>)
 800895a:	f001 fa71 	bl	8009e40 <__assert_func>
 800895e:	2301      	movs	r3, #1
 8008960:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008964:	4610      	mov	r0, r2
 8008966:	b003      	add	sp, #12
 8008968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800896c:	bfbc      	itt	lt
 800896e:	464b      	movlt	r3, r9
 8008970:	46a1      	movlt	r9, r4
 8008972:	4630      	mov	r0, r6
 8008974:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008978:	bfba      	itte	lt
 800897a:	461c      	movlt	r4, r3
 800897c:	2501      	movlt	r5, #1
 800897e:	2500      	movge	r5, #0
 8008980:	f7ff fcf8 	bl	8008374 <_Balloc>
 8008984:	4602      	mov	r2, r0
 8008986:	b918      	cbnz	r0, 8008990 <__mdiff+0x60>
 8008988:	f240 2145 	movw	r1, #581	@ 0x245
 800898c:	4b30      	ldr	r3, [pc, #192]	@ (8008a50 <__mdiff+0x120>)
 800898e:	e7e3      	b.n	8008958 <__mdiff+0x28>
 8008990:	f100 0b14 	add.w	fp, r0, #20
 8008994:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008998:	f109 0310 	add.w	r3, r9, #16
 800899c:	60c5      	str	r5, [r0, #12]
 800899e:	f04f 0c00 	mov.w	ip, #0
 80089a2:	f109 0514 	add.w	r5, r9, #20
 80089a6:	46d9      	mov	r9, fp
 80089a8:	6926      	ldr	r6, [r4, #16]
 80089aa:	f104 0e14 	add.w	lr, r4, #20
 80089ae:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80089b2:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80089b6:	9301      	str	r3, [sp, #4]
 80089b8:	9b01      	ldr	r3, [sp, #4]
 80089ba:	f85e 0b04 	ldr.w	r0, [lr], #4
 80089be:	f853 af04 	ldr.w	sl, [r3, #4]!
 80089c2:	b281      	uxth	r1, r0
 80089c4:	9301      	str	r3, [sp, #4]
 80089c6:	fa1f f38a 	uxth.w	r3, sl
 80089ca:	1a5b      	subs	r3, r3, r1
 80089cc:	0c00      	lsrs	r0, r0, #16
 80089ce:	4463      	add	r3, ip
 80089d0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80089d4:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80089d8:	b29b      	uxth	r3, r3
 80089da:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80089de:	4576      	cmp	r6, lr
 80089e0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80089e4:	f849 3b04 	str.w	r3, [r9], #4
 80089e8:	d8e6      	bhi.n	80089b8 <__mdiff+0x88>
 80089ea:	1b33      	subs	r3, r6, r4
 80089ec:	3b15      	subs	r3, #21
 80089ee:	f023 0303 	bic.w	r3, r3, #3
 80089f2:	3415      	adds	r4, #21
 80089f4:	3304      	adds	r3, #4
 80089f6:	42a6      	cmp	r6, r4
 80089f8:	bf38      	it	cc
 80089fa:	2304      	movcc	r3, #4
 80089fc:	441d      	add	r5, r3
 80089fe:	445b      	add	r3, fp
 8008a00:	461e      	mov	r6, r3
 8008a02:	462c      	mov	r4, r5
 8008a04:	4544      	cmp	r4, r8
 8008a06:	d30e      	bcc.n	8008a26 <__mdiff+0xf6>
 8008a08:	f108 0103 	add.w	r1, r8, #3
 8008a0c:	1b49      	subs	r1, r1, r5
 8008a0e:	f021 0103 	bic.w	r1, r1, #3
 8008a12:	3d03      	subs	r5, #3
 8008a14:	45a8      	cmp	r8, r5
 8008a16:	bf38      	it	cc
 8008a18:	2100      	movcc	r1, #0
 8008a1a:	440b      	add	r3, r1
 8008a1c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008a20:	b199      	cbz	r1, 8008a4a <__mdiff+0x11a>
 8008a22:	6117      	str	r7, [r2, #16]
 8008a24:	e79e      	b.n	8008964 <__mdiff+0x34>
 8008a26:	46e6      	mov	lr, ip
 8008a28:	f854 1b04 	ldr.w	r1, [r4], #4
 8008a2c:	fa1f fc81 	uxth.w	ip, r1
 8008a30:	44f4      	add	ip, lr
 8008a32:	0c08      	lsrs	r0, r1, #16
 8008a34:	4471      	add	r1, lr
 8008a36:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008a3a:	b289      	uxth	r1, r1
 8008a3c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008a40:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008a44:	f846 1b04 	str.w	r1, [r6], #4
 8008a48:	e7dc      	b.n	8008a04 <__mdiff+0xd4>
 8008a4a:	3f01      	subs	r7, #1
 8008a4c:	e7e6      	b.n	8008a1c <__mdiff+0xec>
 8008a4e:	bf00      	nop
 8008a50:	0800c013 	.word	0x0800c013
 8008a54:	0800c024 	.word	0x0800c024

08008a58 <__ulp>:
 8008a58:	4b0e      	ldr	r3, [pc, #56]	@ (8008a94 <__ulp+0x3c>)
 8008a5a:	400b      	ands	r3, r1
 8008a5c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	dc08      	bgt.n	8008a76 <__ulp+0x1e>
 8008a64:	425b      	negs	r3, r3
 8008a66:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008a6a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008a6e:	da04      	bge.n	8008a7a <__ulp+0x22>
 8008a70:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008a74:	4113      	asrs	r3, r2
 8008a76:	2200      	movs	r2, #0
 8008a78:	e008      	b.n	8008a8c <__ulp+0x34>
 8008a7a:	f1a2 0314 	sub.w	r3, r2, #20
 8008a7e:	2b1e      	cmp	r3, #30
 8008a80:	bfd6      	itet	le
 8008a82:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008a86:	2201      	movgt	r2, #1
 8008a88:	40da      	lsrle	r2, r3
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	4619      	mov	r1, r3
 8008a8e:	4610      	mov	r0, r2
 8008a90:	4770      	bx	lr
 8008a92:	bf00      	nop
 8008a94:	7ff00000 	.word	0x7ff00000

08008a98 <__b2d>:
 8008a98:	6902      	ldr	r2, [r0, #16]
 8008a9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a9c:	f100 0614 	add.w	r6, r0, #20
 8008aa0:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8008aa4:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8008aa8:	4f1e      	ldr	r7, [pc, #120]	@ (8008b24 <__b2d+0x8c>)
 8008aaa:	4620      	mov	r0, r4
 8008aac:	f7ff fd54 	bl	8008558 <__hi0bits>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	f1c0 0020 	rsb	r0, r0, #32
 8008ab6:	2b0a      	cmp	r3, #10
 8008ab8:	f1a2 0504 	sub.w	r5, r2, #4
 8008abc:	6008      	str	r0, [r1, #0]
 8008abe:	dc12      	bgt.n	8008ae6 <__b2d+0x4e>
 8008ac0:	42ae      	cmp	r6, r5
 8008ac2:	bf2c      	ite	cs
 8008ac4:	2200      	movcs	r2, #0
 8008ac6:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8008aca:	f1c3 0c0b 	rsb	ip, r3, #11
 8008ace:	3315      	adds	r3, #21
 8008ad0:	fa24 fe0c 	lsr.w	lr, r4, ip
 8008ad4:	fa04 f303 	lsl.w	r3, r4, r3
 8008ad8:	fa22 f20c 	lsr.w	r2, r2, ip
 8008adc:	ea4e 0107 	orr.w	r1, lr, r7
 8008ae0:	431a      	orrs	r2, r3
 8008ae2:	4610      	mov	r0, r2
 8008ae4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ae6:	42ae      	cmp	r6, r5
 8008ae8:	bf36      	itet	cc
 8008aea:	f1a2 0508 	subcc.w	r5, r2, #8
 8008aee:	2200      	movcs	r2, #0
 8008af0:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8008af4:	3b0b      	subs	r3, #11
 8008af6:	d012      	beq.n	8008b1e <__b2d+0x86>
 8008af8:	f1c3 0720 	rsb	r7, r3, #32
 8008afc:	fa22 f107 	lsr.w	r1, r2, r7
 8008b00:	409c      	lsls	r4, r3
 8008b02:	430c      	orrs	r4, r1
 8008b04:	42b5      	cmp	r5, r6
 8008b06:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8008b0a:	bf94      	ite	ls
 8008b0c:	2400      	movls	r4, #0
 8008b0e:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8008b12:	409a      	lsls	r2, r3
 8008b14:	40fc      	lsrs	r4, r7
 8008b16:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8008b1a:	4322      	orrs	r2, r4
 8008b1c:	e7e1      	b.n	8008ae2 <__b2d+0x4a>
 8008b1e:	ea44 0107 	orr.w	r1, r4, r7
 8008b22:	e7de      	b.n	8008ae2 <__b2d+0x4a>
 8008b24:	3ff00000 	.word	0x3ff00000

08008b28 <__d2b>:
 8008b28:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8008b2c:	2101      	movs	r1, #1
 8008b2e:	4690      	mov	r8, r2
 8008b30:	4699      	mov	r9, r3
 8008b32:	9e08      	ldr	r6, [sp, #32]
 8008b34:	f7ff fc1e 	bl	8008374 <_Balloc>
 8008b38:	4604      	mov	r4, r0
 8008b3a:	b930      	cbnz	r0, 8008b4a <__d2b+0x22>
 8008b3c:	4602      	mov	r2, r0
 8008b3e:	f240 310f 	movw	r1, #783	@ 0x30f
 8008b42:	4b23      	ldr	r3, [pc, #140]	@ (8008bd0 <__d2b+0xa8>)
 8008b44:	4823      	ldr	r0, [pc, #140]	@ (8008bd4 <__d2b+0xac>)
 8008b46:	f001 f97b 	bl	8009e40 <__assert_func>
 8008b4a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008b4e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008b52:	b10d      	cbz	r5, 8008b58 <__d2b+0x30>
 8008b54:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008b58:	9301      	str	r3, [sp, #4]
 8008b5a:	f1b8 0300 	subs.w	r3, r8, #0
 8008b5e:	d024      	beq.n	8008baa <__d2b+0x82>
 8008b60:	4668      	mov	r0, sp
 8008b62:	9300      	str	r3, [sp, #0]
 8008b64:	f7ff fd17 	bl	8008596 <__lo0bits>
 8008b68:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008b6c:	b1d8      	cbz	r0, 8008ba6 <__d2b+0x7e>
 8008b6e:	f1c0 0320 	rsb	r3, r0, #32
 8008b72:	fa02 f303 	lsl.w	r3, r2, r3
 8008b76:	430b      	orrs	r3, r1
 8008b78:	40c2      	lsrs	r2, r0
 8008b7a:	6163      	str	r3, [r4, #20]
 8008b7c:	9201      	str	r2, [sp, #4]
 8008b7e:	9b01      	ldr	r3, [sp, #4]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	bf0c      	ite	eq
 8008b84:	2201      	moveq	r2, #1
 8008b86:	2202      	movne	r2, #2
 8008b88:	61a3      	str	r3, [r4, #24]
 8008b8a:	6122      	str	r2, [r4, #16]
 8008b8c:	b1ad      	cbz	r5, 8008bba <__d2b+0x92>
 8008b8e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008b92:	4405      	add	r5, r0
 8008b94:	6035      	str	r5, [r6, #0]
 8008b96:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008b9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b9c:	6018      	str	r0, [r3, #0]
 8008b9e:	4620      	mov	r0, r4
 8008ba0:	b002      	add	sp, #8
 8008ba2:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8008ba6:	6161      	str	r1, [r4, #20]
 8008ba8:	e7e9      	b.n	8008b7e <__d2b+0x56>
 8008baa:	a801      	add	r0, sp, #4
 8008bac:	f7ff fcf3 	bl	8008596 <__lo0bits>
 8008bb0:	9b01      	ldr	r3, [sp, #4]
 8008bb2:	2201      	movs	r2, #1
 8008bb4:	6163      	str	r3, [r4, #20]
 8008bb6:	3020      	adds	r0, #32
 8008bb8:	e7e7      	b.n	8008b8a <__d2b+0x62>
 8008bba:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008bbe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008bc2:	6030      	str	r0, [r6, #0]
 8008bc4:	6918      	ldr	r0, [r3, #16]
 8008bc6:	f7ff fcc7 	bl	8008558 <__hi0bits>
 8008bca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008bce:	e7e4      	b.n	8008b9a <__d2b+0x72>
 8008bd0:	0800c013 	.word	0x0800c013
 8008bd4:	0800c024 	.word	0x0800c024

08008bd8 <__ratio>:
 8008bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bdc:	b085      	sub	sp, #20
 8008bde:	e9cd 1000 	strd	r1, r0, [sp]
 8008be2:	a902      	add	r1, sp, #8
 8008be4:	f7ff ff58 	bl	8008a98 <__b2d>
 8008be8:	468b      	mov	fp, r1
 8008bea:	4606      	mov	r6, r0
 8008bec:	460f      	mov	r7, r1
 8008bee:	9800      	ldr	r0, [sp, #0]
 8008bf0:	a903      	add	r1, sp, #12
 8008bf2:	f7ff ff51 	bl	8008a98 <__b2d>
 8008bf6:	460d      	mov	r5, r1
 8008bf8:	9b01      	ldr	r3, [sp, #4]
 8008bfa:	4689      	mov	r9, r1
 8008bfc:	6919      	ldr	r1, [r3, #16]
 8008bfe:	9b00      	ldr	r3, [sp, #0]
 8008c00:	4604      	mov	r4, r0
 8008c02:	691b      	ldr	r3, [r3, #16]
 8008c04:	4630      	mov	r0, r6
 8008c06:	1ac9      	subs	r1, r1, r3
 8008c08:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008c0c:	1a9b      	subs	r3, r3, r2
 8008c0e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	bfcd      	iteet	gt
 8008c16:	463a      	movgt	r2, r7
 8008c18:	462a      	movle	r2, r5
 8008c1a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008c1e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8008c22:	bfd8      	it	le
 8008c24:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008c28:	464b      	mov	r3, r9
 8008c2a:	4622      	mov	r2, r4
 8008c2c:	4659      	mov	r1, fp
 8008c2e:	f7f7 fd7d 	bl	800072c <__aeabi_ddiv>
 8008c32:	b005      	add	sp, #20
 8008c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008c38 <__copybits>:
 8008c38:	3901      	subs	r1, #1
 8008c3a:	b570      	push	{r4, r5, r6, lr}
 8008c3c:	1149      	asrs	r1, r1, #5
 8008c3e:	6914      	ldr	r4, [r2, #16]
 8008c40:	3101      	adds	r1, #1
 8008c42:	f102 0314 	add.w	r3, r2, #20
 8008c46:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008c4a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008c4e:	1f05      	subs	r5, r0, #4
 8008c50:	42a3      	cmp	r3, r4
 8008c52:	d30c      	bcc.n	8008c6e <__copybits+0x36>
 8008c54:	1aa3      	subs	r3, r4, r2
 8008c56:	3b11      	subs	r3, #17
 8008c58:	f023 0303 	bic.w	r3, r3, #3
 8008c5c:	3211      	adds	r2, #17
 8008c5e:	42a2      	cmp	r2, r4
 8008c60:	bf88      	it	hi
 8008c62:	2300      	movhi	r3, #0
 8008c64:	4418      	add	r0, r3
 8008c66:	2300      	movs	r3, #0
 8008c68:	4288      	cmp	r0, r1
 8008c6a:	d305      	bcc.n	8008c78 <__copybits+0x40>
 8008c6c:	bd70      	pop	{r4, r5, r6, pc}
 8008c6e:	f853 6b04 	ldr.w	r6, [r3], #4
 8008c72:	f845 6f04 	str.w	r6, [r5, #4]!
 8008c76:	e7eb      	b.n	8008c50 <__copybits+0x18>
 8008c78:	f840 3b04 	str.w	r3, [r0], #4
 8008c7c:	e7f4      	b.n	8008c68 <__copybits+0x30>

08008c7e <__any_on>:
 8008c7e:	f100 0214 	add.w	r2, r0, #20
 8008c82:	6900      	ldr	r0, [r0, #16]
 8008c84:	114b      	asrs	r3, r1, #5
 8008c86:	4298      	cmp	r0, r3
 8008c88:	b510      	push	{r4, lr}
 8008c8a:	db11      	blt.n	8008cb0 <__any_on+0x32>
 8008c8c:	dd0a      	ble.n	8008ca4 <__any_on+0x26>
 8008c8e:	f011 011f 	ands.w	r1, r1, #31
 8008c92:	d007      	beq.n	8008ca4 <__any_on+0x26>
 8008c94:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008c98:	fa24 f001 	lsr.w	r0, r4, r1
 8008c9c:	fa00 f101 	lsl.w	r1, r0, r1
 8008ca0:	428c      	cmp	r4, r1
 8008ca2:	d10b      	bne.n	8008cbc <__any_on+0x3e>
 8008ca4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d803      	bhi.n	8008cb4 <__any_on+0x36>
 8008cac:	2000      	movs	r0, #0
 8008cae:	bd10      	pop	{r4, pc}
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	e7f7      	b.n	8008ca4 <__any_on+0x26>
 8008cb4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008cb8:	2900      	cmp	r1, #0
 8008cba:	d0f5      	beq.n	8008ca8 <__any_on+0x2a>
 8008cbc:	2001      	movs	r0, #1
 8008cbe:	e7f6      	b.n	8008cae <__any_on+0x30>

08008cc0 <sulp>:
 8008cc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cc4:	460f      	mov	r7, r1
 8008cc6:	4690      	mov	r8, r2
 8008cc8:	f7ff fec6 	bl	8008a58 <__ulp>
 8008ccc:	4604      	mov	r4, r0
 8008cce:	460d      	mov	r5, r1
 8008cd0:	f1b8 0f00 	cmp.w	r8, #0
 8008cd4:	d011      	beq.n	8008cfa <sulp+0x3a>
 8008cd6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8008cda:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	dd0b      	ble.n	8008cfa <sulp+0x3a>
 8008ce2:	2400      	movs	r4, #0
 8008ce4:	051b      	lsls	r3, r3, #20
 8008ce6:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008cea:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008cee:	4622      	mov	r2, r4
 8008cf0:	462b      	mov	r3, r5
 8008cf2:	f7f7 fbf1 	bl	80004d8 <__aeabi_dmul>
 8008cf6:	4604      	mov	r4, r0
 8008cf8:	460d      	mov	r5, r1
 8008cfa:	4620      	mov	r0, r4
 8008cfc:	4629      	mov	r1, r5
 8008cfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d02:	0000      	movs	r0, r0
 8008d04:	0000      	movs	r0, r0
	...

08008d08 <_strtod_l>:
 8008d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d0c:	b09f      	sub	sp, #124	@ 0x7c
 8008d0e:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008d10:	2200      	movs	r2, #0
 8008d12:	460c      	mov	r4, r1
 8008d14:	921a      	str	r2, [sp, #104]	@ 0x68
 8008d16:	f04f 0a00 	mov.w	sl, #0
 8008d1a:	f04f 0b00 	mov.w	fp, #0
 8008d1e:	460a      	mov	r2, r1
 8008d20:	9005      	str	r0, [sp, #20]
 8008d22:	9219      	str	r2, [sp, #100]	@ 0x64
 8008d24:	7811      	ldrb	r1, [r2, #0]
 8008d26:	292b      	cmp	r1, #43	@ 0x2b
 8008d28:	d048      	beq.n	8008dbc <_strtod_l+0xb4>
 8008d2a:	d836      	bhi.n	8008d9a <_strtod_l+0x92>
 8008d2c:	290d      	cmp	r1, #13
 8008d2e:	d830      	bhi.n	8008d92 <_strtod_l+0x8a>
 8008d30:	2908      	cmp	r1, #8
 8008d32:	d830      	bhi.n	8008d96 <_strtod_l+0x8e>
 8008d34:	2900      	cmp	r1, #0
 8008d36:	d039      	beq.n	8008dac <_strtod_l+0xa4>
 8008d38:	2200      	movs	r2, #0
 8008d3a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008d3c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008d3e:	782a      	ldrb	r2, [r5, #0]
 8008d40:	2a30      	cmp	r2, #48	@ 0x30
 8008d42:	f040 80b1 	bne.w	8008ea8 <_strtod_l+0x1a0>
 8008d46:	786a      	ldrb	r2, [r5, #1]
 8008d48:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008d4c:	2a58      	cmp	r2, #88	@ 0x58
 8008d4e:	d16c      	bne.n	8008e2a <_strtod_l+0x122>
 8008d50:	9302      	str	r3, [sp, #8]
 8008d52:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008d54:	4a8e      	ldr	r2, [pc, #568]	@ (8008f90 <_strtod_l+0x288>)
 8008d56:	9301      	str	r3, [sp, #4]
 8008d58:	ab1a      	add	r3, sp, #104	@ 0x68
 8008d5a:	9300      	str	r3, [sp, #0]
 8008d5c:	9805      	ldr	r0, [sp, #20]
 8008d5e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008d60:	a919      	add	r1, sp, #100	@ 0x64
 8008d62:	f001 f907 	bl	8009f74 <__gethex>
 8008d66:	f010 060f 	ands.w	r6, r0, #15
 8008d6a:	4604      	mov	r4, r0
 8008d6c:	d005      	beq.n	8008d7a <_strtod_l+0x72>
 8008d6e:	2e06      	cmp	r6, #6
 8008d70:	d126      	bne.n	8008dc0 <_strtod_l+0xb8>
 8008d72:	2300      	movs	r3, #0
 8008d74:	3501      	adds	r5, #1
 8008d76:	9519      	str	r5, [sp, #100]	@ 0x64
 8008d78:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008d7a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	f040 8584 	bne.w	800988a <_strtod_l+0xb82>
 8008d82:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008d84:	b1bb      	cbz	r3, 8008db6 <_strtod_l+0xae>
 8008d86:	4650      	mov	r0, sl
 8008d88:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8008d8c:	b01f      	add	sp, #124	@ 0x7c
 8008d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d92:	2920      	cmp	r1, #32
 8008d94:	d1d0      	bne.n	8008d38 <_strtod_l+0x30>
 8008d96:	3201      	adds	r2, #1
 8008d98:	e7c3      	b.n	8008d22 <_strtod_l+0x1a>
 8008d9a:	292d      	cmp	r1, #45	@ 0x2d
 8008d9c:	d1cc      	bne.n	8008d38 <_strtod_l+0x30>
 8008d9e:	2101      	movs	r1, #1
 8008da0:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008da2:	1c51      	adds	r1, r2, #1
 8008da4:	9119      	str	r1, [sp, #100]	@ 0x64
 8008da6:	7852      	ldrb	r2, [r2, #1]
 8008da8:	2a00      	cmp	r2, #0
 8008daa:	d1c7      	bne.n	8008d3c <_strtod_l+0x34>
 8008dac:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008dae:	9419      	str	r4, [sp, #100]	@ 0x64
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	f040 8568 	bne.w	8009886 <_strtod_l+0xb7e>
 8008db6:	4650      	mov	r0, sl
 8008db8:	4659      	mov	r1, fp
 8008dba:	e7e7      	b.n	8008d8c <_strtod_l+0x84>
 8008dbc:	2100      	movs	r1, #0
 8008dbe:	e7ef      	b.n	8008da0 <_strtod_l+0x98>
 8008dc0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008dc2:	b13a      	cbz	r2, 8008dd4 <_strtod_l+0xcc>
 8008dc4:	2135      	movs	r1, #53	@ 0x35
 8008dc6:	a81c      	add	r0, sp, #112	@ 0x70
 8008dc8:	f7ff ff36 	bl	8008c38 <__copybits>
 8008dcc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008dce:	9805      	ldr	r0, [sp, #20]
 8008dd0:	f7ff fb10 	bl	80083f4 <_Bfree>
 8008dd4:	3e01      	subs	r6, #1
 8008dd6:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008dd8:	2e04      	cmp	r6, #4
 8008dda:	d806      	bhi.n	8008dea <_strtod_l+0xe2>
 8008ddc:	e8df f006 	tbb	[pc, r6]
 8008de0:	201d0314 	.word	0x201d0314
 8008de4:	14          	.byte	0x14
 8008de5:	00          	.byte	0x00
 8008de6:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008dea:	05e1      	lsls	r1, r4, #23
 8008dec:	bf48      	it	mi
 8008dee:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008df2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008df6:	0d1b      	lsrs	r3, r3, #20
 8008df8:	051b      	lsls	r3, r3, #20
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d1bd      	bne.n	8008d7a <_strtod_l+0x72>
 8008dfe:	f7fe fb1d 	bl	800743c <__errno>
 8008e02:	2322      	movs	r3, #34	@ 0x22
 8008e04:	6003      	str	r3, [r0, #0]
 8008e06:	e7b8      	b.n	8008d7a <_strtod_l+0x72>
 8008e08:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008e0c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008e10:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008e14:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008e18:	e7e7      	b.n	8008dea <_strtod_l+0xe2>
 8008e1a:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8008f94 <_strtod_l+0x28c>
 8008e1e:	e7e4      	b.n	8008dea <_strtod_l+0xe2>
 8008e20:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008e24:	f04f 3aff 	mov.w	sl, #4294967295
 8008e28:	e7df      	b.n	8008dea <_strtod_l+0xe2>
 8008e2a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008e2c:	1c5a      	adds	r2, r3, #1
 8008e2e:	9219      	str	r2, [sp, #100]	@ 0x64
 8008e30:	785b      	ldrb	r3, [r3, #1]
 8008e32:	2b30      	cmp	r3, #48	@ 0x30
 8008e34:	d0f9      	beq.n	8008e2a <_strtod_l+0x122>
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d09f      	beq.n	8008d7a <_strtod_l+0x72>
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e3e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008e40:	220a      	movs	r2, #10
 8008e42:	930c      	str	r3, [sp, #48]	@ 0x30
 8008e44:	2300      	movs	r3, #0
 8008e46:	461f      	mov	r7, r3
 8008e48:	9308      	str	r3, [sp, #32]
 8008e4a:	930a      	str	r3, [sp, #40]	@ 0x28
 8008e4c:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008e4e:	7805      	ldrb	r5, [r0, #0]
 8008e50:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008e54:	b2d9      	uxtb	r1, r3
 8008e56:	2909      	cmp	r1, #9
 8008e58:	d928      	bls.n	8008eac <_strtod_l+0x1a4>
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	494e      	ldr	r1, [pc, #312]	@ (8008f98 <_strtod_l+0x290>)
 8008e5e:	f000 ffc7 	bl	8009df0 <strncmp>
 8008e62:	2800      	cmp	r0, #0
 8008e64:	d032      	beq.n	8008ecc <_strtod_l+0x1c4>
 8008e66:	2000      	movs	r0, #0
 8008e68:	462a      	mov	r2, r5
 8008e6a:	4681      	mov	r9, r0
 8008e6c:	463d      	mov	r5, r7
 8008e6e:	4603      	mov	r3, r0
 8008e70:	2a65      	cmp	r2, #101	@ 0x65
 8008e72:	d001      	beq.n	8008e78 <_strtod_l+0x170>
 8008e74:	2a45      	cmp	r2, #69	@ 0x45
 8008e76:	d114      	bne.n	8008ea2 <_strtod_l+0x19a>
 8008e78:	b91d      	cbnz	r5, 8008e82 <_strtod_l+0x17a>
 8008e7a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008e7c:	4302      	orrs	r2, r0
 8008e7e:	d095      	beq.n	8008dac <_strtod_l+0xa4>
 8008e80:	2500      	movs	r5, #0
 8008e82:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008e84:	1c62      	adds	r2, r4, #1
 8008e86:	9219      	str	r2, [sp, #100]	@ 0x64
 8008e88:	7862      	ldrb	r2, [r4, #1]
 8008e8a:	2a2b      	cmp	r2, #43	@ 0x2b
 8008e8c:	d077      	beq.n	8008f7e <_strtod_l+0x276>
 8008e8e:	2a2d      	cmp	r2, #45	@ 0x2d
 8008e90:	d07b      	beq.n	8008f8a <_strtod_l+0x282>
 8008e92:	f04f 0c00 	mov.w	ip, #0
 8008e96:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008e9a:	2909      	cmp	r1, #9
 8008e9c:	f240 8082 	bls.w	8008fa4 <_strtod_l+0x29c>
 8008ea0:	9419      	str	r4, [sp, #100]	@ 0x64
 8008ea2:	f04f 0800 	mov.w	r8, #0
 8008ea6:	e0a2      	b.n	8008fee <_strtod_l+0x2e6>
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	e7c7      	b.n	8008e3c <_strtod_l+0x134>
 8008eac:	2f08      	cmp	r7, #8
 8008eae:	bfd5      	itete	le
 8008eb0:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8008eb2:	9908      	ldrgt	r1, [sp, #32]
 8008eb4:	fb02 3301 	mlale	r3, r2, r1, r3
 8008eb8:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008ebc:	f100 0001 	add.w	r0, r0, #1
 8008ec0:	bfd4      	ite	le
 8008ec2:	930a      	strle	r3, [sp, #40]	@ 0x28
 8008ec4:	9308      	strgt	r3, [sp, #32]
 8008ec6:	3701      	adds	r7, #1
 8008ec8:	9019      	str	r0, [sp, #100]	@ 0x64
 8008eca:	e7bf      	b.n	8008e4c <_strtod_l+0x144>
 8008ecc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008ece:	1c5a      	adds	r2, r3, #1
 8008ed0:	9219      	str	r2, [sp, #100]	@ 0x64
 8008ed2:	785a      	ldrb	r2, [r3, #1]
 8008ed4:	b37f      	cbz	r7, 8008f36 <_strtod_l+0x22e>
 8008ed6:	4681      	mov	r9, r0
 8008ed8:	463d      	mov	r5, r7
 8008eda:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008ede:	2b09      	cmp	r3, #9
 8008ee0:	d912      	bls.n	8008f08 <_strtod_l+0x200>
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	e7c4      	b.n	8008e70 <_strtod_l+0x168>
 8008ee6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008ee8:	3001      	adds	r0, #1
 8008eea:	1c5a      	adds	r2, r3, #1
 8008eec:	9219      	str	r2, [sp, #100]	@ 0x64
 8008eee:	785a      	ldrb	r2, [r3, #1]
 8008ef0:	2a30      	cmp	r2, #48	@ 0x30
 8008ef2:	d0f8      	beq.n	8008ee6 <_strtod_l+0x1de>
 8008ef4:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008ef8:	2b08      	cmp	r3, #8
 8008efa:	f200 84cb 	bhi.w	8009894 <_strtod_l+0xb8c>
 8008efe:	4681      	mov	r9, r0
 8008f00:	2000      	movs	r0, #0
 8008f02:	4605      	mov	r5, r0
 8008f04:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008f06:	930c      	str	r3, [sp, #48]	@ 0x30
 8008f08:	3a30      	subs	r2, #48	@ 0x30
 8008f0a:	f100 0301 	add.w	r3, r0, #1
 8008f0e:	d02a      	beq.n	8008f66 <_strtod_l+0x25e>
 8008f10:	4499      	add	r9, r3
 8008f12:	210a      	movs	r1, #10
 8008f14:	462b      	mov	r3, r5
 8008f16:	eb00 0c05 	add.w	ip, r0, r5
 8008f1a:	4563      	cmp	r3, ip
 8008f1c:	d10d      	bne.n	8008f3a <_strtod_l+0x232>
 8008f1e:	1c69      	adds	r1, r5, #1
 8008f20:	4401      	add	r1, r0
 8008f22:	4428      	add	r0, r5
 8008f24:	2808      	cmp	r0, #8
 8008f26:	dc16      	bgt.n	8008f56 <_strtod_l+0x24e>
 8008f28:	230a      	movs	r3, #10
 8008f2a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008f2c:	fb03 2300 	mla	r3, r3, r0, r2
 8008f30:	930a      	str	r3, [sp, #40]	@ 0x28
 8008f32:	2300      	movs	r3, #0
 8008f34:	e018      	b.n	8008f68 <_strtod_l+0x260>
 8008f36:	4638      	mov	r0, r7
 8008f38:	e7da      	b.n	8008ef0 <_strtod_l+0x1e8>
 8008f3a:	2b08      	cmp	r3, #8
 8008f3c:	f103 0301 	add.w	r3, r3, #1
 8008f40:	dc03      	bgt.n	8008f4a <_strtod_l+0x242>
 8008f42:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008f44:	434e      	muls	r6, r1
 8008f46:	960a      	str	r6, [sp, #40]	@ 0x28
 8008f48:	e7e7      	b.n	8008f1a <_strtod_l+0x212>
 8008f4a:	2b10      	cmp	r3, #16
 8008f4c:	bfde      	ittt	le
 8008f4e:	9e08      	ldrle	r6, [sp, #32]
 8008f50:	434e      	mulle	r6, r1
 8008f52:	9608      	strle	r6, [sp, #32]
 8008f54:	e7e1      	b.n	8008f1a <_strtod_l+0x212>
 8008f56:	280f      	cmp	r0, #15
 8008f58:	dceb      	bgt.n	8008f32 <_strtod_l+0x22a>
 8008f5a:	230a      	movs	r3, #10
 8008f5c:	9808      	ldr	r0, [sp, #32]
 8008f5e:	fb03 2300 	mla	r3, r3, r0, r2
 8008f62:	9308      	str	r3, [sp, #32]
 8008f64:	e7e5      	b.n	8008f32 <_strtod_l+0x22a>
 8008f66:	4629      	mov	r1, r5
 8008f68:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008f6a:	460d      	mov	r5, r1
 8008f6c:	1c50      	adds	r0, r2, #1
 8008f6e:	9019      	str	r0, [sp, #100]	@ 0x64
 8008f70:	7852      	ldrb	r2, [r2, #1]
 8008f72:	4618      	mov	r0, r3
 8008f74:	e7b1      	b.n	8008eda <_strtod_l+0x1d2>
 8008f76:	f04f 0900 	mov.w	r9, #0
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	e77d      	b.n	8008e7a <_strtod_l+0x172>
 8008f7e:	f04f 0c00 	mov.w	ip, #0
 8008f82:	1ca2      	adds	r2, r4, #2
 8008f84:	9219      	str	r2, [sp, #100]	@ 0x64
 8008f86:	78a2      	ldrb	r2, [r4, #2]
 8008f88:	e785      	b.n	8008e96 <_strtod_l+0x18e>
 8008f8a:	f04f 0c01 	mov.w	ip, #1
 8008f8e:	e7f8      	b.n	8008f82 <_strtod_l+0x27a>
 8008f90:	0800c198 	.word	0x0800c198
 8008f94:	7ff00000 	.word	0x7ff00000
 8008f98:	0800c180 	.word	0x0800c180
 8008f9c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008f9e:	1c51      	adds	r1, r2, #1
 8008fa0:	9119      	str	r1, [sp, #100]	@ 0x64
 8008fa2:	7852      	ldrb	r2, [r2, #1]
 8008fa4:	2a30      	cmp	r2, #48	@ 0x30
 8008fa6:	d0f9      	beq.n	8008f9c <_strtod_l+0x294>
 8008fa8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008fac:	2908      	cmp	r1, #8
 8008fae:	f63f af78 	bhi.w	8008ea2 <_strtod_l+0x19a>
 8008fb2:	f04f 080a 	mov.w	r8, #10
 8008fb6:	3a30      	subs	r2, #48	@ 0x30
 8008fb8:	920e      	str	r2, [sp, #56]	@ 0x38
 8008fba:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008fbc:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008fbe:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008fc0:	1c56      	adds	r6, r2, #1
 8008fc2:	9619      	str	r6, [sp, #100]	@ 0x64
 8008fc4:	7852      	ldrb	r2, [r2, #1]
 8008fc6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008fca:	f1be 0f09 	cmp.w	lr, #9
 8008fce:	d939      	bls.n	8009044 <_strtod_l+0x33c>
 8008fd0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008fd2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8008fd6:	1a76      	subs	r6, r6, r1
 8008fd8:	2e08      	cmp	r6, #8
 8008fda:	dc03      	bgt.n	8008fe4 <_strtod_l+0x2dc>
 8008fdc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008fde:	4588      	cmp	r8, r1
 8008fe0:	bfa8      	it	ge
 8008fe2:	4688      	movge	r8, r1
 8008fe4:	f1bc 0f00 	cmp.w	ip, #0
 8008fe8:	d001      	beq.n	8008fee <_strtod_l+0x2e6>
 8008fea:	f1c8 0800 	rsb	r8, r8, #0
 8008fee:	2d00      	cmp	r5, #0
 8008ff0:	d14e      	bne.n	8009090 <_strtod_l+0x388>
 8008ff2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008ff4:	4308      	orrs	r0, r1
 8008ff6:	f47f aec0 	bne.w	8008d7a <_strtod_l+0x72>
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	f47f aed6 	bne.w	8008dac <_strtod_l+0xa4>
 8009000:	2a69      	cmp	r2, #105	@ 0x69
 8009002:	d028      	beq.n	8009056 <_strtod_l+0x34e>
 8009004:	dc25      	bgt.n	8009052 <_strtod_l+0x34a>
 8009006:	2a49      	cmp	r2, #73	@ 0x49
 8009008:	d025      	beq.n	8009056 <_strtod_l+0x34e>
 800900a:	2a4e      	cmp	r2, #78	@ 0x4e
 800900c:	f47f aece 	bne.w	8008dac <_strtod_l+0xa4>
 8009010:	499a      	ldr	r1, [pc, #616]	@ (800927c <_strtod_l+0x574>)
 8009012:	a819      	add	r0, sp, #100	@ 0x64
 8009014:	f001 f9d0 	bl	800a3b8 <__match>
 8009018:	2800      	cmp	r0, #0
 800901a:	f43f aec7 	beq.w	8008dac <_strtod_l+0xa4>
 800901e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009020:	781b      	ldrb	r3, [r3, #0]
 8009022:	2b28      	cmp	r3, #40	@ 0x28
 8009024:	d12e      	bne.n	8009084 <_strtod_l+0x37c>
 8009026:	4996      	ldr	r1, [pc, #600]	@ (8009280 <_strtod_l+0x578>)
 8009028:	aa1c      	add	r2, sp, #112	@ 0x70
 800902a:	a819      	add	r0, sp, #100	@ 0x64
 800902c:	f001 f9d8 	bl	800a3e0 <__hexnan>
 8009030:	2805      	cmp	r0, #5
 8009032:	d127      	bne.n	8009084 <_strtod_l+0x37c>
 8009034:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009036:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800903a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800903e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009042:	e69a      	b.n	8008d7a <_strtod_l+0x72>
 8009044:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009046:	fb08 2101 	mla	r1, r8, r1, r2
 800904a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800904e:	920e      	str	r2, [sp, #56]	@ 0x38
 8009050:	e7b5      	b.n	8008fbe <_strtod_l+0x2b6>
 8009052:	2a6e      	cmp	r2, #110	@ 0x6e
 8009054:	e7da      	b.n	800900c <_strtod_l+0x304>
 8009056:	498b      	ldr	r1, [pc, #556]	@ (8009284 <_strtod_l+0x57c>)
 8009058:	a819      	add	r0, sp, #100	@ 0x64
 800905a:	f001 f9ad 	bl	800a3b8 <__match>
 800905e:	2800      	cmp	r0, #0
 8009060:	f43f aea4 	beq.w	8008dac <_strtod_l+0xa4>
 8009064:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009066:	4988      	ldr	r1, [pc, #544]	@ (8009288 <_strtod_l+0x580>)
 8009068:	3b01      	subs	r3, #1
 800906a:	a819      	add	r0, sp, #100	@ 0x64
 800906c:	9319      	str	r3, [sp, #100]	@ 0x64
 800906e:	f001 f9a3 	bl	800a3b8 <__match>
 8009072:	b910      	cbnz	r0, 800907a <_strtod_l+0x372>
 8009074:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009076:	3301      	adds	r3, #1
 8009078:	9319      	str	r3, [sp, #100]	@ 0x64
 800907a:	f04f 0a00 	mov.w	sl, #0
 800907e:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 800928c <_strtod_l+0x584>
 8009082:	e67a      	b.n	8008d7a <_strtod_l+0x72>
 8009084:	4882      	ldr	r0, [pc, #520]	@ (8009290 <_strtod_l+0x588>)
 8009086:	f000 fed5 	bl	8009e34 <nan>
 800908a:	4682      	mov	sl, r0
 800908c:	468b      	mov	fp, r1
 800908e:	e674      	b.n	8008d7a <_strtod_l+0x72>
 8009090:	eba8 0309 	sub.w	r3, r8, r9
 8009094:	2f00      	cmp	r7, #0
 8009096:	bf08      	it	eq
 8009098:	462f      	moveq	r7, r5
 800909a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800909c:	2d10      	cmp	r5, #16
 800909e:	462c      	mov	r4, r5
 80090a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80090a2:	bfa8      	it	ge
 80090a4:	2410      	movge	r4, #16
 80090a6:	f7f7 f99d 	bl	80003e4 <__aeabi_ui2d>
 80090aa:	2d09      	cmp	r5, #9
 80090ac:	4682      	mov	sl, r0
 80090ae:	468b      	mov	fp, r1
 80090b0:	dc11      	bgt.n	80090d6 <_strtod_l+0x3ce>
 80090b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	f43f ae60 	beq.w	8008d7a <_strtod_l+0x72>
 80090ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090bc:	dd76      	ble.n	80091ac <_strtod_l+0x4a4>
 80090be:	2b16      	cmp	r3, #22
 80090c0:	dc5d      	bgt.n	800917e <_strtod_l+0x476>
 80090c2:	4974      	ldr	r1, [pc, #464]	@ (8009294 <_strtod_l+0x58c>)
 80090c4:	4652      	mov	r2, sl
 80090c6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80090ca:	465b      	mov	r3, fp
 80090cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80090d0:	f7f7 fa02 	bl	80004d8 <__aeabi_dmul>
 80090d4:	e7d9      	b.n	800908a <_strtod_l+0x382>
 80090d6:	4b6f      	ldr	r3, [pc, #444]	@ (8009294 <_strtod_l+0x58c>)
 80090d8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80090dc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80090e0:	f7f7 f9fa 	bl	80004d8 <__aeabi_dmul>
 80090e4:	4682      	mov	sl, r0
 80090e6:	9808      	ldr	r0, [sp, #32]
 80090e8:	468b      	mov	fp, r1
 80090ea:	f7f7 f97b 	bl	80003e4 <__aeabi_ui2d>
 80090ee:	4602      	mov	r2, r0
 80090f0:	460b      	mov	r3, r1
 80090f2:	4650      	mov	r0, sl
 80090f4:	4659      	mov	r1, fp
 80090f6:	f7f7 f839 	bl	800016c <__adddf3>
 80090fa:	2d0f      	cmp	r5, #15
 80090fc:	4682      	mov	sl, r0
 80090fe:	468b      	mov	fp, r1
 8009100:	ddd7      	ble.n	80090b2 <_strtod_l+0x3aa>
 8009102:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009104:	1b2c      	subs	r4, r5, r4
 8009106:	441c      	add	r4, r3
 8009108:	2c00      	cmp	r4, #0
 800910a:	f340 8096 	ble.w	800923a <_strtod_l+0x532>
 800910e:	f014 030f 	ands.w	r3, r4, #15
 8009112:	d00a      	beq.n	800912a <_strtod_l+0x422>
 8009114:	495f      	ldr	r1, [pc, #380]	@ (8009294 <_strtod_l+0x58c>)
 8009116:	4652      	mov	r2, sl
 8009118:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800911c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009120:	465b      	mov	r3, fp
 8009122:	f7f7 f9d9 	bl	80004d8 <__aeabi_dmul>
 8009126:	4682      	mov	sl, r0
 8009128:	468b      	mov	fp, r1
 800912a:	f034 040f 	bics.w	r4, r4, #15
 800912e:	d073      	beq.n	8009218 <_strtod_l+0x510>
 8009130:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009134:	dd48      	ble.n	80091c8 <_strtod_l+0x4c0>
 8009136:	2400      	movs	r4, #0
 8009138:	46a0      	mov	r8, r4
 800913a:	46a1      	mov	r9, r4
 800913c:	940a      	str	r4, [sp, #40]	@ 0x28
 800913e:	2322      	movs	r3, #34	@ 0x22
 8009140:	f04f 0a00 	mov.w	sl, #0
 8009144:	9a05      	ldr	r2, [sp, #20]
 8009146:	f8df b144 	ldr.w	fp, [pc, #324]	@ 800928c <_strtod_l+0x584>
 800914a:	6013      	str	r3, [r2, #0]
 800914c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800914e:	2b00      	cmp	r3, #0
 8009150:	f43f ae13 	beq.w	8008d7a <_strtod_l+0x72>
 8009154:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009156:	9805      	ldr	r0, [sp, #20]
 8009158:	f7ff f94c 	bl	80083f4 <_Bfree>
 800915c:	4649      	mov	r1, r9
 800915e:	9805      	ldr	r0, [sp, #20]
 8009160:	f7ff f948 	bl	80083f4 <_Bfree>
 8009164:	4641      	mov	r1, r8
 8009166:	9805      	ldr	r0, [sp, #20]
 8009168:	f7ff f944 	bl	80083f4 <_Bfree>
 800916c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800916e:	9805      	ldr	r0, [sp, #20]
 8009170:	f7ff f940 	bl	80083f4 <_Bfree>
 8009174:	4621      	mov	r1, r4
 8009176:	9805      	ldr	r0, [sp, #20]
 8009178:	f7ff f93c 	bl	80083f4 <_Bfree>
 800917c:	e5fd      	b.n	8008d7a <_strtod_l+0x72>
 800917e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009180:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8009184:	4293      	cmp	r3, r2
 8009186:	dbbc      	blt.n	8009102 <_strtod_l+0x3fa>
 8009188:	4c42      	ldr	r4, [pc, #264]	@ (8009294 <_strtod_l+0x58c>)
 800918a:	f1c5 050f 	rsb	r5, r5, #15
 800918e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009192:	4652      	mov	r2, sl
 8009194:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009198:	465b      	mov	r3, fp
 800919a:	f7f7 f99d 	bl	80004d8 <__aeabi_dmul>
 800919e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091a0:	1b5d      	subs	r5, r3, r5
 80091a2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80091a6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80091aa:	e791      	b.n	80090d0 <_strtod_l+0x3c8>
 80091ac:	3316      	adds	r3, #22
 80091ae:	dba8      	blt.n	8009102 <_strtod_l+0x3fa>
 80091b0:	4b38      	ldr	r3, [pc, #224]	@ (8009294 <_strtod_l+0x58c>)
 80091b2:	eba9 0808 	sub.w	r8, r9, r8
 80091b6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80091ba:	4650      	mov	r0, sl
 80091bc:	e9d8 2300 	ldrd	r2, r3, [r8]
 80091c0:	4659      	mov	r1, fp
 80091c2:	f7f7 fab3 	bl	800072c <__aeabi_ddiv>
 80091c6:	e760      	b.n	800908a <_strtod_l+0x382>
 80091c8:	4b33      	ldr	r3, [pc, #204]	@ (8009298 <_strtod_l+0x590>)
 80091ca:	4650      	mov	r0, sl
 80091cc:	9308      	str	r3, [sp, #32]
 80091ce:	2300      	movs	r3, #0
 80091d0:	4659      	mov	r1, fp
 80091d2:	461e      	mov	r6, r3
 80091d4:	1124      	asrs	r4, r4, #4
 80091d6:	2c01      	cmp	r4, #1
 80091d8:	dc21      	bgt.n	800921e <_strtod_l+0x516>
 80091da:	b10b      	cbz	r3, 80091e0 <_strtod_l+0x4d8>
 80091dc:	4682      	mov	sl, r0
 80091de:	468b      	mov	fp, r1
 80091e0:	492d      	ldr	r1, [pc, #180]	@ (8009298 <_strtod_l+0x590>)
 80091e2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80091e6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80091ea:	4652      	mov	r2, sl
 80091ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80091f0:	465b      	mov	r3, fp
 80091f2:	f7f7 f971 	bl	80004d8 <__aeabi_dmul>
 80091f6:	4b25      	ldr	r3, [pc, #148]	@ (800928c <_strtod_l+0x584>)
 80091f8:	460a      	mov	r2, r1
 80091fa:	400b      	ands	r3, r1
 80091fc:	4927      	ldr	r1, [pc, #156]	@ (800929c <_strtod_l+0x594>)
 80091fe:	4682      	mov	sl, r0
 8009200:	428b      	cmp	r3, r1
 8009202:	d898      	bhi.n	8009136 <_strtod_l+0x42e>
 8009204:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009208:	428b      	cmp	r3, r1
 800920a:	bf86      	itte	hi
 800920c:	f04f 3aff 	movhi.w	sl, #4294967295
 8009210:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 80092a0 <_strtod_l+0x598>
 8009214:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009218:	2300      	movs	r3, #0
 800921a:	9308      	str	r3, [sp, #32]
 800921c:	e07a      	b.n	8009314 <_strtod_l+0x60c>
 800921e:	07e2      	lsls	r2, r4, #31
 8009220:	d505      	bpl.n	800922e <_strtod_l+0x526>
 8009222:	9b08      	ldr	r3, [sp, #32]
 8009224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009228:	f7f7 f956 	bl	80004d8 <__aeabi_dmul>
 800922c:	2301      	movs	r3, #1
 800922e:	9a08      	ldr	r2, [sp, #32]
 8009230:	3601      	adds	r6, #1
 8009232:	3208      	adds	r2, #8
 8009234:	1064      	asrs	r4, r4, #1
 8009236:	9208      	str	r2, [sp, #32]
 8009238:	e7cd      	b.n	80091d6 <_strtod_l+0x4ce>
 800923a:	d0ed      	beq.n	8009218 <_strtod_l+0x510>
 800923c:	4264      	negs	r4, r4
 800923e:	f014 020f 	ands.w	r2, r4, #15
 8009242:	d00a      	beq.n	800925a <_strtod_l+0x552>
 8009244:	4b13      	ldr	r3, [pc, #76]	@ (8009294 <_strtod_l+0x58c>)
 8009246:	4650      	mov	r0, sl
 8009248:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800924c:	4659      	mov	r1, fp
 800924e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009252:	f7f7 fa6b 	bl	800072c <__aeabi_ddiv>
 8009256:	4682      	mov	sl, r0
 8009258:	468b      	mov	fp, r1
 800925a:	1124      	asrs	r4, r4, #4
 800925c:	d0dc      	beq.n	8009218 <_strtod_l+0x510>
 800925e:	2c1f      	cmp	r4, #31
 8009260:	dd20      	ble.n	80092a4 <_strtod_l+0x59c>
 8009262:	2400      	movs	r4, #0
 8009264:	46a0      	mov	r8, r4
 8009266:	46a1      	mov	r9, r4
 8009268:	940a      	str	r4, [sp, #40]	@ 0x28
 800926a:	2322      	movs	r3, #34	@ 0x22
 800926c:	9a05      	ldr	r2, [sp, #20]
 800926e:	f04f 0a00 	mov.w	sl, #0
 8009272:	f04f 0b00 	mov.w	fp, #0
 8009276:	6013      	str	r3, [r2, #0]
 8009278:	e768      	b.n	800914c <_strtod_l+0x444>
 800927a:	bf00      	nop
 800927c:	0800bf6b 	.word	0x0800bf6b
 8009280:	0800c184 	.word	0x0800c184
 8009284:	0800bf63 	.word	0x0800bf63
 8009288:	0800bf9a 	.word	0x0800bf9a
 800928c:	7ff00000 	.word	0x7ff00000
 8009290:	0800c32d 	.word	0x0800c32d
 8009294:	0800c0b8 	.word	0x0800c0b8
 8009298:	0800c090 	.word	0x0800c090
 800929c:	7ca00000 	.word	0x7ca00000
 80092a0:	7fefffff 	.word	0x7fefffff
 80092a4:	f014 0310 	ands.w	r3, r4, #16
 80092a8:	bf18      	it	ne
 80092aa:	236a      	movne	r3, #106	@ 0x6a
 80092ac:	4650      	mov	r0, sl
 80092ae:	9308      	str	r3, [sp, #32]
 80092b0:	4659      	mov	r1, fp
 80092b2:	2300      	movs	r3, #0
 80092b4:	4ea9      	ldr	r6, [pc, #676]	@ (800955c <_strtod_l+0x854>)
 80092b6:	07e2      	lsls	r2, r4, #31
 80092b8:	d504      	bpl.n	80092c4 <_strtod_l+0x5bc>
 80092ba:	e9d6 2300 	ldrd	r2, r3, [r6]
 80092be:	f7f7 f90b 	bl	80004d8 <__aeabi_dmul>
 80092c2:	2301      	movs	r3, #1
 80092c4:	1064      	asrs	r4, r4, #1
 80092c6:	f106 0608 	add.w	r6, r6, #8
 80092ca:	d1f4      	bne.n	80092b6 <_strtod_l+0x5ae>
 80092cc:	b10b      	cbz	r3, 80092d2 <_strtod_l+0x5ca>
 80092ce:	4682      	mov	sl, r0
 80092d0:	468b      	mov	fp, r1
 80092d2:	9b08      	ldr	r3, [sp, #32]
 80092d4:	b1b3      	cbz	r3, 8009304 <_strtod_l+0x5fc>
 80092d6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80092da:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80092de:	2b00      	cmp	r3, #0
 80092e0:	4659      	mov	r1, fp
 80092e2:	dd0f      	ble.n	8009304 <_strtod_l+0x5fc>
 80092e4:	2b1f      	cmp	r3, #31
 80092e6:	dd57      	ble.n	8009398 <_strtod_l+0x690>
 80092e8:	2b34      	cmp	r3, #52	@ 0x34
 80092ea:	bfd8      	it	le
 80092ec:	f04f 33ff 	movle.w	r3, #4294967295
 80092f0:	f04f 0a00 	mov.w	sl, #0
 80092f4:	bfcf      	iteee	gt
 80092f6:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80092fa:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80092fe:	4093      	lslle	r3, r2
 8009300:	ea03 0b01 	andle.w	fp, r3, r1
 8009304:	2200      	movs	r2, #0
 8009306:	2300      	movs	r3, #0
 8009308:	4650      	mov	r0, sl
 800930a:	4659      	mov	r1, fp
 800930c:	f7f7 fb4c 	bl	80009a8 <__aeabi_dcmpeq>
 8009310:	2800      	cmp	r0, #0
 8009312:	d1a6      	bne.n	8009262 <_strtod_l+0x55a>
 8009314:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009316:	463a      	mov	r2, r7
 8009318:	9300      	str	r3, [sp, #0]
 800931a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800931c:	462b      	mov	r3, r5
 800931e:	9805      	ldr	r0, [sp, #20]
 8009320:	f7ff f8d0 	bl	80084c4 <__s2b>
 8009324:	900a      	str	r0, [sp, #40]	@ 0x28
 8009326:	2800      	cmp	r0, #0
 8009328:	f43f af05 	beq.w	8009136 <_strtod_l+0x42e>
 800932c:	2400      	movs	r4, #0
 800932e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009330:	eba9 0308 	sub.w	r3, r9, r8
 8009334:	2a00      	cmp	r2, #0
 8009336:	bfa8      	it	ge
 8009338:	2300      	movge	r3, #0
 800933a:	46a0      	mov	r8, r4
 800933c:	9312      	str	r3, [sp, #72]	@ 0x48
 800933e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009342:	9316      	str	r3, [sp, #88]	@ 0x58
 8009344:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009346:	9805      	ldr	r0, [sp, #20]
 8009348:	6859      	ldr	r1, [r3, #4]
 800934a:	f7ff f813 	bl	8008374 <_Balloc>
 800934e:	4681      	mov	r9, r0
 8009350:	2800      	cmp	r0, #0
 8009352:	f43f aef4 	beq.w	800913e <_strtod_l+0x436>
 8009356:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009358:	300c      	adds	r0, #12
 800935a:	691a      	ldr	r2, [r3, #16]
 800935c:	f103 010c 	add.w	r1, r3, #12
 8009360:	3202      	adds	r2, #2
 8009362:	0092      	lsls	r2, r2, #2
 8009364:	f7fe f8a5 	bl	80074b2 <memcpy>
 8009368:	ab1c      	add	r3, sp, #112	@ 0x70
 800936a:	9301      	str	r3, [sp, #4]
 800936c:	ab1b      	add	r3, sp, #108	@ 0x6c
 800936e:	9300      	str	r3, [sp, #0]
 8009370:	4652      	mov	r2, sl
 8009372:	465b      	mov	r3, fp
 8009374:	9805      	ldr	r0, [sp, #20]
 8009376:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800937a:	f7ff fbd5 	bl	8008b28 <__d2b>
 800937e:	901a      	str	r0, [sp, #104]	@ 0x68
 8009380:	2800      	cmp	r0, #0
 8009382:	f43f aedc 	beq.w	800913e <_strtod_l+0x436>
 8009386:	2101      	movs	r1, #1
 8009388:	9805      	ldr	r0, [sp, #20]
 800938a:	f7ff f931 	bl	80085f0 <__i2b>
 800938e:	4680      	mov	r8, r0
 8009390:	b948      	cbnz	r0, 80093a6 <_strtod_l+0x69e>
 8009392:	f04f 0800 	mov.w	r8, #0
 8009396:	e6d2      	b.n	800913e <_strtod_l+0x436>
 8009398:	f04f 32ff 	mov.w	r2, #4294967295
 800939c:	fa02 f303 	lsl.w	r3, r2, r3
 80093a0:	ea03 0a0a 	and.w	sl, r3, sl
 80093a4:	e7ae      	b.n	8009304 <_strtod_l+0x5fc>
 80093a6:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80093a8:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80093aa:	2d00      	cmp	r5, #0
 80093ac:	bfab      	itete	ge
 80093ae:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80093b0:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80093b2:	18ef      	addge	r7, r5, r3
 80093b4:	1b5e      	sublt	r6, r3, r5
 80093b6:	9b08      	ldr	r3, [sp, #32]
 80093b8:	bfa8      	it	ge
 80093ba:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80093bc:	eba5 0503 	sub.w	r5, r5, r3
 80093c0:	4415      	add	r5, r2
 80093c2:	4b67      	ldr	r3, [pc, #412]	@ (8009560 <_strtod_l+0x858>)
 80093c4:	f105 35ff 	add.w	r5, r5, #4294967295
 80093c8:	bfb8      	it	lt
 80093ca:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80093cc:	429d      	cmp	r5, r3
 80093ce:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80093d2:	da50      	bge.n	8009476 <_strtod_l+0x76e>
 80093d4:	1b5b      	subs	r3, r3, r5
 80093d6:	2b1f      	cmp	r3, #31
 80093d8:	f04f 0101 	mov.w	r1, #1
 80093dc:	eba2 0203 	sub.w	r2, r2, r3
 80093e0:	dc3d      	bgt.n	800945e <_strtod_l+0x756>
 80093e2:	fa01 f303 	lsl.w	r3, r1, r3
 80093e6:	9313      	str	r3, [sp, #76]	@ 0x4c
 80093e8:	2300      	movs	r3, #0
 80093ea:	9310      	str	r3, [sp, #64]	@ 0x40
 80093ec:	18bd      	adds	r5, r7, r2
 80093ee:	9b08      	ldr	r3, [sp, #32]
 80093f0:	42af      	cmp	r7, r5
 80093f2:	4416      	add	r6, r2
 80093f4:	441e      	add	r6, r3
 80093f6:	463b      	mov	r3, r7
 80093f8:	bfa8      	it	ge
 80093fa:	462b      	movge	r3, r5
 80093fc:	42b3      	cmp	r3, r6
 80093fe:	bfa8      	it	ge
 8009400:	4633      	movge	r3, r6
 8009402:	2b00      	cmp	r3, #0
 8009404:	bfc2      	ittt	gt
 8009406:	1aed      	subgt	r5, r5, r3
 8009408:	1af6      	subgt	r6, r6, r3
 800940a:	1aff      	subgt	r7, r7, r3
 800940c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800940e:	2b00      	cmp	r3, #0
 8009410:	dd16      	ble.n	8009440 <_strtod_l+0x738>
 8009412:	4641      	mov	r1, r8
 8009414:	461a      	mov	r2, r3
 8009416:	9805      	ldr	r0, [sp, #20]
 8009418:	f7ff f9a8 	bl	800876c <__pow5mult>
 800941c:	4680      	mov	r8, r0
 800941e:	2800      	cmp	r0, #0
 8009420:	d0b7      	beq.n	8009392 <_strtod_l+0x68a>
 8009422:	4601      	mov	r1, r0
 8009424:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009426:	9805      	ldr	r0, [sp, #20]
 8009428:	f7ff f8f8 	bl	800861c <__multiply>
 800942c:	900e      	str	r0, [sp, #56]	@ 0x38
 800942e:	2800      	cmp	r0, #0
 8009430:	f43f ae85 	beq.w	800913e <_strtod_l+0x436>
 8009434:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009436:	9805      	ldr	r0, [sp, #20]
 8009438:	f7fe ffdc 	bl	80083f4 <_Bfree>
 800943c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800943e:	931a      	str	r3, [sp, #104]	@ 0x68
 8009440:	2d00      	cmp	r5, #0
 8009442:	dc1d      	bgt.n	8009480 <_strtod_l+0x778>
 8009444:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009446:	2b00      	cmp	r3, #0
 8009448:	dd23      	ble.n	8009492 <_strtod_l+0x78a>
 800944a:	4649      	mov	r1, r9
 800944c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800944e:	9805      	ldr	r0, [sp, #20]
 8009450:	f7ff f98c 	bl	800876c <__pow5mult>
 8009454:	4681      	mov	r9, r0
 8009456:	b9e0      	cbnz	r0, 8009492 <_strtod_l+0x78a>
 8009458:	f04f 0900 	mov.w	r9, #0
 800945c:	e66f      	b.n	800913e <_strtod_l+0x436>
 800945e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009462:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009466:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800946a:	35e2      	adds	r5, #226	@ 0xe2
 800946c:	fa01 f305 	lsl.w	r3, r1, r5
 8009470:	9310      	str	r3, [sp, #64]	@ 0x40
 8009472:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009474:	e7ba      	b.n	80093ec <_strtod_l+0x6e4>
 8009476:	2300      	movs	r3, #0
 8009478:	9310      	str	r3, [sp, #64]	@ 0x40
 800947a:	2301      	movs	r3, #1
 800947c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800947e:	e7b5      	b.n	80093ec <_strtod_l+0x6e4>
 8009480:	462a      	mov	r2, r5
 8009482:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009484:	9805      	ldr	r0, [sp, #20]
 8009486:	f7ff f9cb 	bl	8008820 <__lshift>
 800948a:	901a      	str	r0, [sp, #104]	@ 0x68
 800948c:	2800      	cmp	r0, #0
 800948e:	d1d9      	bne.n	8009444 <_strtod_l+0x73c>
 8009490:	e655      	b.n	800913e <_strtod_l+0x436>
 8009492:	2e00      	cmp	r6, #0
 8009494:	dd07      	ble.n	80094a6 <_strtod_l+0x79e>
 8009496:	4649      	mov	r1, r9
 8009498:	4632      	mov	r2, r6
 800949a:	9805      	ldr	r0, [sp, #20]
 800949c:	f7ff f9c0 	bl	8008820 <__lshift>
 80094a0:	4681      	mov	r9, r0
 80094a2:	2800      	cmp	r0, #0
 80094a4:	d0d8      	beq.n	8009458 <_strtod_l+0x750>
 80094a6:	2f00      	cmp	r7, #0
 80094a8:	dd08      	ble.n	80094bc <_strtod_l+0x7b4>
 80094aa:	4641      	mov	r1, r8
 80094ac:	463a      	mov	r2, r7
 80094ae:	9805      	ldr	r0, [sp, #20]
 80094b0:	f7ff f9b6 	bl	8008820 <__lshift>
 80094b4:	4680      	mov	r8, r0
 80094b6:	2800      	cmp	r0, #0
 80094b8:	f43f ae41 	beq.w	800913e <_strtod_l+0x436>
 80094bc:	464a      	mov	r2, r9
 80094be:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80094c0:	9805      	ldr	r0, [sp, #20]
 80094c2:	f7ff fa35 	bl	8008930 <__mdiff>
 80094c6:	4604      	mov	r4, r0
 80094c8:	2800      	cmp	r0, #0
 80094ca:	f43f ae38 	beq.w	800913e <_strtod_l+0x436>
 80094ce:	68c3      	ldr	r3, [r0, #12]
 80094d0:	4641      	mov	r1, r8
 80094d2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80094d4:	2300      	movs	r3, #0
 80094d6:	60c3      	str	r3, [r0, #12]
 80094d8:	f7ff fa0e 	bl	80088f8 <__mcmp>
 80094dc:	2800      	cmp	r0, #0
 80094de:	da45      	bge.n	800956c <_strtod_l+0x864>
 80094e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80094e2:	ea53 030a 	orrs.w	r3, r3, sl
 80094e6:	d16b      	bne.n	80095c0 <_strtod_l+0x8b8>
 80094e8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d167      	bne.n	80095c0 <_strtod_l+0x8b8>
 80094f0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80094f4:	0d1b      	lsrs	r3, r3, #20
 80094f6:	051b      	lsls	r3, r3, #20
 80094f8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80094fc:	d960      	bls.n	80095c0 <_strtod_l+0x8b8>
 80094fe:	6963      	ldr	r3, [r4, #20]
 8009500:	b913      	cbnz	r3, 8009508 <_strtod_l+0x800>
 8009502:	6923      	ldr	r3, [r4, #16]
 8009504:	2b01      	cmp	r3, #1
 8009506:	dd5b      	ble.n	80095c0 <_strtod_l+0x8b8>
 8009508:	4621      	mov	r1, r4
 800950a:	2201      	movs	r2, #1
 800950c:	9805      	ldr	r0, [sp, #20]
 800950e:	f7ff f987 	bl	8008820 <__lshift>
 8009512:	4641      	mov	r1, r8
 8009514:	4604      	mov	r4, r0
 8009516:	f7ff f9ef 	bl	80088f8 <__mcmp>
 800951a:	2800      	cmp	r0, #0
 800951c:	dd50      	ble.n	80095c0 <_strtod_l+0x8b8>
 800951e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009522:	9a08      	ldr	r2, [sp, #32]
 8009524:	0d1b      	lsrs	r3, r3, #20
 8009526:	051b      	lsls	r3, r3, #20
 8009528:	2a00      	cmp	r2, #0
 800952a:	d06a      	beq.n	8009602 <_strtod_l+0x8fa>
 800952c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009530:	d867      	bhi.n	8009602 <_strtod_l+0x8fa>
 8009532:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009536:	f67f ae98 	bls.w	800926a <_strtod_l+0x562>
 800953a:	4650      	mov	r0, sl
 800953c:	4659      	mov	r1, fp
 800953e:	4b09      	ldr	r3, [pc, #36]	@ (8009564 <_strtod_l+0x85c>)
 8009540:	2200      	movs	r2, #0
 8009542:	f7f6 ffc9 	bl	80004d8 <__aeabi_dmul>
 8009546:	4b08      	ldr	r3, [pc, #32]	@ (8009568 <_strtod_l+0x860>)
 8009548:	4682      	mov	sl, r0
 800954a:	400b      	ands	r3, r1
 800954c:	468b      	mov	fp, r1
 800954e:	2b00      	cmp	r3, #0
 8009550:	f47f ae00 	bne.w	8009154 <_strtod_l+0x44c>
 8009554:	2322      	movs	r3, #34	@ 0x22
 8009556:	9a05      	ldr	r2, [sp, #20]
 8009558:	6013      	str	r3, [r2, #0]
 800955a:	e5fb      	b.n	8009154 <_strtod_l+0x44c>
 800955c:	0800c1b0 	.word	0x0800c1b0
 8009560:	fffffc02 	.word	0xfffffc02
 8009564:	39500000 	.word	0x39500000
 8009568:	7ff00000 	.word	0x7ff00000
 800956c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009570:	d165      	bne.n	800963e <_strtod_l+0x936>
 8009572:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009574:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009578:	b35a      	cbz	r2, 80095d2 <_strtod_l+0x8ca>
 800957a:	4a99      	ldr	r2, [pc, #612]	@ (80097e0 <_strtod_l+0xad8>)
 800957c:	4293      	cmp	r3, r2
 800957e:	d12b      	bne.n	80095d8 <_strtod_l+0x8d0>
 8009580:	9b08      	ldr	r3, [sp, #32]
 8009582:	4651      	mov	r1, sl
 8009584:	b303      	cbz	r3, 80095c8 <_strtod_l+0x8c0>
 8009586:	465a      	mov	r2, fp
 8009588:	4b96      	ldr	r3, [pc, #600]	@ (80097e4 <_strtod_l+0xadc>)
 800958a:	4013      	ands	r3, r2
 800958c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009590:	f04f 32ff 	mov.w	r2, #4294967295
 8009594:	d81b      	bhi.n	80095ce <_strtod_l+0x8c6>
 8009596:	0d1b      	lsrs	r3, r3, #20
 8009598:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800959c:	fa02 f303 	lsl.w	r3, r2, r3
 80095a0:	4299      	cmp	r1, r3
 80095a2:	d119      	bne.n	80095d8 <_strtod_l+0x8d0>
 80095a4:	4b90      	ldr	r3, [pc, #576]	@ (80097e8 <_strtod_l+0xae0>)
 80095a6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80095a8:	429a      	cmp	r2, r3
 80095aa:	d102      	bne.n	80095b2 <_strtod_l+0x8aa>
 80095ac:	3101      	adds	r1, #1
 80095ae:	f43f adc6 	beq.w	800913e <_strtod_l+0x436>
 80095b2:	f04f 0a00 	mov.w	sl, #0
 80095b6:	4b8b      	ldr	r3, [pc, #556]	@ (80097e4 <_strtod_l+0xadc>)
 80095b8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80095ba:	401a      	ands	r2, r3
 80095bc:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80095c0:	9b08      	ldr	r3, [sp, #32]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d1b9      	bne.n	800953a <_strtod_l+0x832>
 80095c6:	e5c5      	b.n	8009154 <_strtod_l+0x44c>
 80095c8:	f04f 33ff 	mov.w	r3, #4294967295
 80095cc:	e7e8      	b.n	80095a0 <_strtod_l+0x898>
 80095ce:	4613      	mov	r3, r2
 80095d0:	e7e6      	b.n	80095a0 <_strtod_l+0x898>
 80095d2:	ea53 030a 	orrs.w	r3, r3, sl
 80095d6:	d0a2      	beq.n	800951e <_strtod_l+0x816>
 80095d8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80095da:	b1db      	cbz	r3, 8009614 <_strtod_l+0x90c>
 80095dc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80095de:	4213      	tst	r3, r2
 80095e0:	d0ee      	beq.n	80095c0 <_strtod_l+0x8b8>
 80095e2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80095e4:	4650      	mov	r0, sl
 80095e6:	4659      	mov	r1, fp
 80095e8:	9a08      	ldr	r2, [sp, #32]
 80095ea:	b1bb      	cbz	r3, 800961c <_strtod_l+0x914>
 80095ec:	f7ff fb68 	bl	8008cc0 <sulp>
 80095f0:	4602      	mov	r2, r0
 80095f2:	460b      	mov	r3, r1
 80095f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80095f8:	f7f6 fdb8 	bl	800016c <__adddf3>
 80095fc:	4682      	mov	sl, r0
 80095fe:	468b      	mov	fp, r1
 8009600:	e7de      	b.n	80095c0 <_strtod_l+0x8b8>
 8009602:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009606:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800960a:	f04f 3aff 	mov.w	sl, #4294967295
 800960e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009612:	e7d5      	b.n	80095c0 <_strtod_l+0x8b8>
 8009614:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009616:	ea13 0f0a 	tst.w	r3, sl
 800961a:	e7e1      	b.n	80095e0 <_strtod_l+0x8d8>
 800961c:	f7ff fb50 	bl	8008cc0 <sulp>
 8009620:	4602      	mov	r2, r0
 8009622:	460b      	mov	r3, r1
 8009624:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009628:	f7f6 fd9e 	bl	8000168 <__aeabi_dsub>
 800962c:	2200      	movs	r2, #0
 800962e:	2300      	movs	r3, #0
 8009630:	4682      	mov	sl, r0
 8009632:	468b      	mov	fp, r1
 8009634:	f7f7 f9b8 	bl	80009a8 <__aeabi_dcmpeq>
 8009638:	2800      	cmp	r0, #0
 800963a:	d0c1      	beq.n	80095c0 <_strtod_l+0x8b8>
 800963c:	e615      	b.n	800926a <_strtod_l+0x562>
 800963e:	4641      	mov	r1, r8
 8009640:	4620      	mov	r0, r4
 8009642:	f7ff fac9 	bl	8008bd8 <__ratio>
 8009646:	2200      	movs	r2, #0
 8009648:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800964c:	4606      	mov	r6, r0
 800964e:	460f      	mov	r7, r1
 8009650:	f7f7 f9be 	bl	80009d0 <__aeabi_dcmple>
 8009654:	2800      	cmp	r0, #0
 8009656:	d06d      	beq.n	8009734 <_strtod_l+0xa2c>
 8009658:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800965a:	2b00      	cmp	r3, #0
 800965c:	d178      	bne.n	8009750 <_strtod_l+0xa48>
 800965e:	f1ba 0f00 	cmp.w	sl, #0
 8009662:	d156      	bne.n	8009712 <_strtod_l+0xa0a>
 8009664:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009666:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800966a:	2b00      	cmp	r3, #0
 800966c:	d158      	bne.n	8009720 <_strtod_l+0xa18>
 800966e:	2200      	movs	r2, #0
 8009670:	4630      	mov	r0, r6
 8009672:	4639      	mov	r1, r7
 8009674:	4b5d      	ldr	r3, [pc, #372]	@ (80097ec <_strtod_l+0xae4>)
 8009676:	f7f7 f9a1 	bl	80009bc <__aeabi_dcmplt>
 800967a:	2800      	cmp	r0, #0
 800967c:	d157      	bne.n	800972e <_strtod_l+0xa26>
 800967e:	4630      	mov	r0, r6
 8009680:	4639      	mov	r1, r7
 8009682:	2200      	movs	r2, #0
 8009684:	4b5a      	ldr	r3, [pc, #360]	@ (80097f0 <_strtod_l+0xae8>)
 8009686:	f7f6 ff27 	bl	80004d8 <__aeabi_dmul>
 800968a:	4606      	mov	r6, r0
 800968c:	460f      	mov	r7, r1
 800968e:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009692:	9606      	str	r6, [sp, #24]
 8009694:	9307      	str	r3, [sp, #28]
 8009696:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800969a:	4d52      	ldr	r5, [pc, #328]	@ (80097e4 <_strtod_l+0xadc>)
 800969c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80096a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80096a2:	401d      	ands	r5, r3
 80096a4:	4b53      	ldr	r3, [pc, #332]	@ (80097f4 <_strtod_l+0xaec>)
 80096a6:	429d      	cmp	r5, r3
 80096a8:	f040 80aa 	bne.w	8009800 <_strtod_l+0xaf8>
 80096ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80096ae:	4650      	mov	r0, sl
 80096b0:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80096b4:	4659      	mov	r1, fp
 80096b6:	f7ff f9cf 	bl	8008a58 <__ulp>
 80096ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80096be:	f7f6 ff0b 	bl	80004d8 <__aeabi_dmul>
 80096c2:	4652      	mov	r2, sl
 80096c4:	465b      	mov	r3, fp
 80096c6:	f7f6 fd51 	bl	800016c <__adddf3>
 80096ca:	460b      	mov	r3, r1
 80096cc:	4945      	ldr	r1, [pc, #276]	@ (80097e4 <_strtod_l+0xadc>)
 80096ce:	4a4a      	ldr	r2, [pc, #296]	@ (80097f8 <_strtod_l+0xaf0>)
 80096d0:	4019      	ands	r1, r3
 80096d2:	4291      	cmp	r1, r2
 80096d4:	4682      	mov	sl, r0
 80096d6:	d942      	bls.n	800975e <_strtod_l+0xa56>
 80096d8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80096da:	4b43      	ldr	r3, [pc, #268]	@ (80097e8 <_strtod_l+0xae0>)
 80096dc:	429a      	cmp	r2, r3
 80096de:	d103      	bne.n	80096e8 <_strtod_l+0x9e0>
 80096e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80096e2:	3301      	adds	r3, #1
 80096e4:	f43f ad2b 	beq.w	800913e <_strtod_l+0x436>
 80096e8:	f04f 3aff 	mov.w	sl, #4294967295
 80096ec:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 80097e8 <_strtod_l+0xae0>
 80096f0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80096f2:	9805      	ldr	r0, [sp, #20]
 80096f4:	f7fe fe7e 	bl	80083f4 <_Bfree>
 80096f8:	4649      	mov	r1, r9
 80096fa:	9805      	ldr	r0, [sp, #20]
 80096fc:	f7fe fe7a 	bl	80083f4 <_Bfree>
 8009700:	4641      	mov	r1, r8
 8009702:	9805      	ldr	r0, [sp, #20]
 8009704:	f7fe fe76 	bl	80083f4 <_Bfree>
 8009708:	4621      	mov	r1, r4
 800970a:	9805      	ldr	r0, [sp, #20]
 800970c:	f7fe fe72 	bl	80083f4 <_Bfree>
 8009710:	e618      	b.n	8009344 <_strtod_l+0x63c>
 8009712:	f1ba 0f01 	cmp.w	sl, #1
 8009716:	d103      	bne.n	8009720 <_strtod_l+0xa18>
 8009718:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800971a:	2b00      	cmp	r3, #0
 800971c:	f43f ada5 	beq.w	800926a <_strtod_l+0x562>
 8009720:	2200      	movs	r2, #0
 8009722:	4b36      	ldr	r3, [pc, #216]	@ (80097fc <_strtod_l+0xaf4>)
 8009724:	2600      	movs	r6, #0
 8009726:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800972a:	4f30      	ldr	r7, [pc, #192]	@ (80097ec <_strtod_l+0xae4>)
 800972c:	e7b3      	b.n	8009696 <_strtod_l+0x98e>
 800972e:	2600      	movs	r6, #0
 8009730:	4f2f      	ldr	r7, [pc, #188]	@ (80097f0 <_strtod_l+0xae8>)
 8009732:	e7ac      	b.n	800968e <_strtod_l+0x986>
 8009734:	4630      	mov	r0, r6
 8009736:	4639      	mov	r1, r7
 8009738:	4b2d      	ldr	r3, [pc, #180]	@ (80097f0 <_strtod_l+0xae8>)
 800973a:	2200      	movs	r2, #0
 800973c:	f7f6 fecc 	bl	80004d8 <__aeabi_dmul>
 8009740:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009742:	4606      	mov	r6, r0
 8009744:	460f      	mov	r7, r1
 8009746:	2b00      	cmp	r3, #0
 8009748:	d0a1      	beq.n	800968e <_strtod_l+0x986>
 800974a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800974e:	e7a2      	b.n	8009696 <_strtod_l+0x98e>
 8009750:	2200      	movs	r2, #0
 8009752:	4b26      	ldr	r3, [pc, #152]	@ (80097ec <_strtod_l+0xae4>)
 8009754:	4616      	mov	r6, r2
 8009756:	461f      	mov	r7, r3
 8009758:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800975c:	e79b      	b.n	8009696 <_strtod_l+0x98e>
 800975e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009762:	9b08      	ldr	r3, [sp, #32]
 8009764:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009768:	2b00      	cmp	r3, #0
 800976a:	d1c1      	bne.n	80096f0 <_strtod_l+0x9e8>
 800976c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009770:	0d1b      	lsrs	r3, r3, #20
 8009772:	051b      	lsls	r3, r3, #20
 8009774:	429d      	cmp	r5, r3
 8009776:	d1bb      	bne.n	80096f0 <_strtod_l+0x9e8>
 8009778:	4630      	mov	r0, r6
 800977a:	4639      	mov	r1, r7
 800977c:	f7f7 fc78 	bl	8001070 <__aeabi_d2lz>
 8009780:	f7f6 fe7c 	bl	800047c <__aeabi_l2d>
 8009784:	4602      	mov	r2, r0
 8009786:	460b      	mov	r3, r1
 8009788:	4630      	mov	r0, r6
 800978a:	4639      	mov	r1, r7
 800978c:	f7f6 fcec 	bl	8000168 <__aeabi_dsub>
 8009790:	460b      	mov	r3, r1
 8009792:	4602      	mov	r2, r0
 8009794:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009798:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800979c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800979e:	ea46 060a 	orr.w	r6, r6, sl
 80097a2:	431e      	orrs	r6, r3
 80097a4:	d069      	beq.n	800987a <_strtod_l+0xb72>
 80097a6:	a30a      	add	r3, pc, #40	@ (adr r3, 80097d0 <_strtod_l+0xac8>)
 80097a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ac:	f7f7 f906 	bl	80009bc <__aeabi_dcmplt>
 80097b0:	2800      	cmp	r0, #0
 80097b2:	f47f accf 	bne.w	8009154 <_strtod_l+0x44c>
 80097b6:	a308      	add	r3, pc, #32	@ (adr r3, 80097d8 <_strtod_l+0xad0>)
 80097b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80097c0:	f7f7 f91a 	bl	80009f8 <__aeabi_dcmpgt>
 80097c4:	2800      	cmp	r0, #0
 80097c6:	d093      	beq.n	80096f0 <_strtod_l+0x9e8>
 80097c8:	e4c4      	b.n	8009154 <_strtod_l+0x44c>
 80097ca:	bf00      	nop
 80097cc:	f3af 8000 	nop.w
 80097d0:	94a03595 	.word	0x94a03595
 80097d4:	3fdfffff 	.word	0x3fdfffff
 80097d8:	35afe535 	.word	0x35afe535
 80097dc:	3fe00000 	.word	0x3fe00000
 80097e0:	000fffff 	.word	0x000fffff
 80097e4:	7ff00000 	.word	0x7ff00000
 80097e8:	7fefffff 	.word	0x7fefffff
 80097ec:	3ff00000 	.word	0x3ff00000
 80097f0:	3fe00000 	.word	0x3fe00000
 80097f4:	7fe00000 	.word	0x7fe00000
 80097f8:	7c9fffff 	.word	0x7c9fffff
 80097fc:	bff00000 	.word	0xbff00000
 8009800:	9b08      	ldr	r3, [sp, #32]
 8009802:	b323      	cbz	r3, 800984e <_strtod_l+0xb46>
 8009804:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009808:	d821      	bhi.n	800984e <_strtod_l+0xb46>
 800980a:	a327      	add	r3, pc, #156	@ (adr r3, 80098a8 <_strtod_l+0xba0>)
 800980c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009810:	4630      	mov	r0, r6
 8009812:	4639      	mov	r1, r7
 8009814:	f7f7 f8dc 	bl	80009d0 <__aeabi_dcmple>
 8009818:	b1a0      	cbz	r0, 8009844 <_strtod_l+0xb3c>
 800981a:	4639      	mov	r1, r7
 800981c:	4630      	mov	r0, r6
 800981e:	f7f7 f933 	bl	8000a88 <__aeabi_d2uiz>
 8009822:	2801      	cmp	r0, #1
 8009824:	bf38      	it	cc
 8009826:	2001      	movcc	r0, #1
 8009828:	f7f6 fddc 	bl	80003e4 <__aeabi_ui2d>
 800982c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800982e:	4606      	mov	r6, r0
 8009830:	460f      	mov	r7, r1
 8009832:	b9fb      	cbnz	r3, 8009874 <_strtod_l+0xb6c>
 8009834:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009838:	9014      	str	r0, [sp, #80]	@ 0x50
 800983a:	9315      	str	r3, [sp, #84]	@ 0x54
 800983c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009840:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009844:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009846:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800984a:	1b5b      	subs	r3, r3, r5
 800984c:	9311      	str	r3, [sp, #68]	@ 0x44
 800984e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009852:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009856:	f7ff f8ff 	bl	8008a58 <__ulp>
 800985a:	4602      	mov	r2, r0
 800985c:	460b      	mov	r3, r1
 800985e:	4650      	mov	r0, sl
 8009860:	4659      	mov	r1, fp
 8009862:	f7f6 fe39 	bl	80004d8 <__aeabi_dmul>
 8009866:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800986a:	f7f6 fc7f 	bl	800016c <__adddf3>
 800986e:	4682      	mov	sl, r0
 8009870:	468b      	mov	fp, r1
 8009872:	e776      	b.n	8009762 <_strtod_l+0xa5a>
 8009874:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009878:	e7e0      	b.n	800983c <_strtod_l+0xb34>
 800987a:	a30d      	add	r3, pc, #52	@ (adr r3, 80098b0 <_strtod_l+0xba8>)
 800987c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009880:	f7f7 f89c 	bl	80009bc <__aeabi_dcmplt>
 8009884:	e79e      	b.n	80097c4 <_strtod_l+0xabc>
 8009886:	2300      	movs	r3, #0
 8009888:	930b      	str	r3, [sp, #44]	@ 0x2c
 800988a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800988c:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800988e:	6013      	str	r3, [r2, #0]
 8009890:	f7ff ba77 	b.w	8008d82 <_strtod_l+0x7a>
 8009894:	2a65      	cmp	r2, #101	@ 0x65
 8009896:	f43f ab6e 	beq.w	8008f76 <_strtod_l+0x26e>
 800989a:	2a45      	cmp	r2, #69	@ 0x45
 800989c:	f43f ab6b 	beq.w	8008f76 <_strtod_l+0x26e>
 80098a0:	2301      	movs	r3, #1
 80098a2:	f7ff bba6 	b.w	8008ff2 <_strtod_l+0x2ea>
 80098a6:	bf00      	nop
 80098a8:	ffc00000 	.word	0xffc00000
 80098ac:	41dfffff 	.word	0x41dfffff
 80098b0:	94a03595 	.word	0x94a03595
 80098b4:	3fcfffff 	.word	0x3fcfffff

080098b8 <_strtod_r>:
 80098b8:	4b01      	ldr	r3, [pc, #4]	@ (80098c0 <_strtod_r+0x8>)
 80098ba:	f7ff ba25 	b.w	8008d08 <_strtod_l>
 80098be:	bf00      	nop
 80098c0:	2000006c 	.word	0x2000006c

080098c4 <_strtol_l.constprop.0>:
 80098c4:	2b24      	cmp	r3, #36	@ 0x24
 80098c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098ca:	4686      	mov	lr, r0
 80098cc:	4690      	mov	r8, r2
 80098ce:	d801      	bhi.n	80098d4 <_strtol_l.constprop.0+0x10>
 80098d0:	2b01      	cmp	r3, #1
 80098d2:	d106      	bne.n	80098e2 <_strtol_l.constprop.0+0x1e>
 80098d4:	f7fd fdb2 	bl	800743c <__errno>
 80098d8:	2316      	movs	r3, #22
 80098da:	6003      	str	r3, [r0, #0]
 80098dc:	2000      	movs	r0, #0
 80098de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098e2:	460d      	mov	r5, r1
 80098e4:	4833      	ldr	r0, [pc, #204]	@ (80099b4 <_strtol_l.constprop.0+0xf0>)
 80098e6:	462a      	mov	r2, r5
 80098e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80098ec:	5d06      	ldrb	r6, [r0, r4]
 80098ee:	f016 0608 	ands.w	r6, r6, #8
 80098f2:	d1f8      	bne.n	80098e6 <_strtol_l.constprop.0+0x22>
 80098f4:	2c2d      	cmp	r4, #45	@ 0x2d
 80098f6:	d12d      	bne.n	8009954 <_strtol_l.constprop.0+0x90>
 80098f8:	2601      	movs	r6, #1
 80098fa:	782c      	ldrb	r4, [r5, #0]
 80098fc:	1c95      	adds	r5, r2, #2
 80098fe:	f033 0210 	bics.w	r2, r3, #16
 8009902:	d109      	bne.n	8009918 <_strtol_l.constprop.0+0x54>
 8009904:	2c30      	cmp	r4, #48	@ 0x30
 8009906:	d12a      	bne.n	800995e <_strtol_l.constprop.0+0x9a>
 8009908:	782a      	ldrb	r2, [r5, #0]
 800990a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800990e:	2a58      	cmp	r2, #88	@ 0x58
 8009910:	d125      	bne.n	800995e <_strtol_l.constprop.0+0x9a>
 8009912:	2310      	movs	r3, #16
 8009914:	786c      	ldrb	r4, [r5, #1]
 8009916:	3502      	adds	r5, #2
 8009918:	2200      	movs	r2, #0
 800991a:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800991e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009922:	fbbc f9f3 	udiv	r9, ip, r3
 8009926:	4610      	mov	r0, r2
 8009928:	fb03 ca19 	mls	sl, r3, r9, ip
 800992c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009930:	2f09      	cmp	r7, #9
 8009932:	d81b      	bhi.n	800996c <_strtol_l.constprop.0+0xa8>
 8009934:	463c      	mov	r4, r7
 8009936:	42a3      	cmp	r3, r4
 8009938:	dd27      	ble.n	800998a <_strtol_l.constprop.0+0xc6>
 800993a:	1c57      	adds	r7, r2, #1
 800993c:	d007      	beq.n	800994e <_strtol_l.constprop.0+0x8a>
 800993e:	4581      	cmp	r9, r0
 8009940:	d320      	bcc.n	8009984 <_strtol_l.constprop.0+0xc0>
 8009942:	d101      	bne.n	8009948 <_strtol_l.constprop.0+0x84>
 8009944:	45a2      	cmp	sl, r4
 8009946:	db1d      	blt.n	8009984 <_strtol_l.constprop.0+0xc0>
 8009948:	2201      	movs	r2, #1
 800994a:	fb00 4003 	mla	r0, r0, r3, r4
 800994e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009952:	e7eb      	b.n	800992c <_strtol_l.constprop.0+0x68>
 8009954:	2c2b      	cmp	r4, #43	@ 0x2b
 8009956:	bf04      	itt	eq
 8009958:	782c      	ldrbeq	r4, [r5, #0]
 800995a:	1c95      	addeq	r5, r2, #2
 800995c:	e7cf      	b.n	80098fe <_strtol_l.constprop.0+0x3a>
 800995e:	2b00      	cmp	r3, #0
 8009960:	d1da      	bne.n	8009918 <_strtol_l.constprop.0+0x54>
 8009962:	2c30      	cmp	r4, #48	@ 0x30
 8009964:	bf0c      	ite	eq
 8009966:	2308      	moveq	r3, #8
 8009968:	230a      	movne	r3, #10
 800996a:	e7d5      	b.n	8009918 <_strtol_l.constprop.0+0x54>
 800996c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009970:	2f19      	cmp	r7, #25
 8009972:	d801      	bhi.n	8009978 <_strtol_l.constprop.0+0xb4>
 8009974:	3c37      	subs	r4, #55	@ 0x37
 8009976:	e7de      	b.n	8009936 <_strtol_l.constprop.0+0x72>
 8009978:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800997c:	2f19      	cmp	r7, #25
 800997e:	d804      	bhi.n	800998a <_strtol_l.constprop.0+0xc6>
 8009980:	3c57      	subs	r4, #87	@ 0x57
 8009982:	e7d8      	b.n	8009936 <_strtol_l.constprop.0+0x72>
 8009984:	f04f 32ff 	mov.w	r2, #4294967295
 8009988:	e7e1      	b.n	800994e <_strtol_l.constprop.0+0x8a>
 800998a:	1c53      	adds	r3, r2, #1
 800998c:	d108      	bne.n	80099a0 <_strtol_l.constprop.0+0xdc>
 800998e:	2322      	movs	r3, #34	@ 0x22
 8009990:	4660      	mov	r0, ip
 8009992:	f8ce 3000 	str.w	r3, [lr]
 8009996:	f1b8 0f00 	cmp.w	r8, #0
 800999a:	d0a0      	beq.n	80098de <_strtol_l.constprop.0+0x1a>
 800999c:	1e69      	subs	r1, r5, #1
 800999e:	e006      	b.n	80099ae <_strtol_l.constprop.0+0xea>
 80099a0:	b106      	cbz	r6, 80099a4 <_strtol_l.constprop.0+0xe0>
 80099a2:	4240      	negs	r0, r0
 80099a4:	f1b8 0f00 	cmp.w	r8, #0
 80099a8:	d099      	beq.n	80098de <_strtol_l.constprop.0+0x1a>
 80099aa:	2a00      	cmp	r2, #0
 80099ac:	d1f6      	bne.n	800999c <_strtol_l.constprop.0+0xd8>
 80099ae:	f8c8 1000 	str.w	r1, [r8]
 80099b2:	e794      	b.n	80098de <_strtol_l.constprop.0+0x1a>
 80099b4:	0800c1d9 	.word	0x0800c1d9

080099b8 <_strtol_r>:
 80099b8:	f7ff bf84 	b.w	80098c4 <_strtol_l.constprop.0>

080099bc <__ssputs_r>:
 80099bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099c0:	461f      	mov	r7, r3
 80099c2:	688e      	ldr	r6, [r1, #8]
 80099c4:	4682      	mov	sl, r0
 80099c6:	42be      	cmp	r6, r7
 80099c8:	460c      	mov	r4, r1
 80099ca:	4690      	mov	r8, r2
 80099cc:	680b      	ldr	r3, [r1, #0]
 80099ce:	d82d      	bhi.n	8009a2c <__ssputs_r+0x70>
 80099d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80099d4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80099d8:	d026      	beq.n	8009a28 <__ssputs_r+0x6c>
 80099da:	6965      	ldr	r5, [r4, #20]
 80099dc:	6909      	ldr	r1, [r1, #16]
 80099de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80099e2:	eba3 0901 	sub.w	r9, r3, r1
 80099e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80099ea:	1c7b      	adds	r3, r7, #1
 80099ec:	444b      	add	r3, r9
 80099ee:	106d      	asrs	r5, r5, #1
 80099f0:	429d      	cmp	r5, r3
 80099f2:	bf38      	it	cc
 80099f4:	461d      	movcc	r5, r3
 80099f6:	0553      	lsls	r3, r2, #21
 80099f8:	d527      	bpl.n	8009a4a <__ssputs_r+0x8e>
 80099fa:	4629      	mov	r1, r5
 80099fc:	f7fe fc2e 	bl	800825c <_malloc_r>
 8009a00:	4606      	mov	r6, r0
 8009a02:	b360      	cbz	r0, 8009a5e <__ssputs_r+0xa2>
 8009a04:	464a      	mov	r2, r9
 8009a06:	6921      	ldr	r1, [r4, #16]
 8009a08:	f7fd fd53 	bl	80074b2 <memcpy>
 8009a0c:	89a3      	ldrh	r3, [r4, #12]
 8009a0e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009a12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a16:	81a3      	strh	r3, [r4, #12]
 8009a18:	6126      	str	r6, [r4, #16]
 8009a1a:	444e      	add	r6, r9
 8009a1c:	6026      	str	r6, [r4, #0]
 8009a1e:	463e      	mov	r6, r7
 8009a20:	6165      	str	r5, [r4, #20]
 8009a22:	eba5 0509 	sub.w	r5, r5, r9
 8009a26:	60a5      	str	r5, [r4, #8]
 8009a28:	42be      	cmp	r6, r7
 8009a2a:	d900      	bls.n	8009a2e <__ssputs_r+0x72>
 8009a2c:	463e      	mov	r6, r7
 8009a2e:	4632      	mov	r2, r6
 8009a30:	4641      	mov	r1, r8
 8009a32:	6820      	ldr	r0, [r4, #0]
 8009a34:	f000 f9c2 	bl	8009dbc <memmove>
 8009a38:	2000      	movs	r0, #0
 8009a3a:	68a3      	ldr	r3, [r4, #8]
 8009a3c:	1b9b      	subs	r3, r3, r6
 8009a3e:	60a3      	str	r3, [r4, #8]
 8009a40:	6823      	ldr	r3, [r4, #0]
 8009a42:	4433      	add	r3, r6
 8009a44:	6023      	str	r3, [r4, #0]
 8009a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a4a:	462a      	mov	r2, r5
 8009a4c:	f000 fd75 	bl	800a53a <_realloc_r>
 8009a50:	4606      	mov	r6, r0
 8009a52:	2800      	cmp	r0, #0
 8009a54:	d1e0      	bne.n	8009a18 <__ssputs_r+0x5c>
 8009a56:	4650      	mov	r0, sl
 8009a58:	6921      	ldr	r1, [r4, #16]
 8009a5a:	f7fe fb8d 	bl	8008178 <_free_r>
 8009a5e:	230c      	movs	r3, #12
 8009a60:	f8ca 3000 	str.w	r3, [sl]
 8009a64:	89a3      	ldrh	r3, [r4, #12]
 8009a66:	f04f 30ff 	mov.w	r0, #4294967295
 8009a6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a6e:	81a3      	strh	r3, [r4, #12]
 8009a70:	e7e9      	b.n	8009a46 <__ssputs_r+0x8a>
	...

08009a74 <_svfiprintf_r>:
 8009a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a78:	4698      	mov	r8, r3
 8009a7a:	898b      	ldrh	r3, [r1, #12]
 8009a7c:	4607      	mov	r7, r0
 8009a7e:	061b      	lsls	r3, r3, #24
 8009a80:	460d      	mov	r5, r1
 8009a82:	4614      	mov	r4, r2
 8009a84:	b09d      	sub	sp, #116	@ 0x74
 8009a86:	d510      	bpl.n	8009aaa <_svfiprintf_r+0x36>
 8009a88:	690b      	ldr	r3, [r1, #16]
 8009a8a:	b973      	cbnz	r3, 8009aaa <_svfiprintf_r+0x36>
 8009a8c:	2140      	movs	r1, #64	@ 0x40
 8009a8e:	f7fe fbe5 	bl	800825c <_malloc_r>
 8009a92:	6028      	str	r0, [r5, #0]
 8009a94:	6128      	str	r0, [r5, #16]
 8009a96:	b930      	cbnz	r0, 8009aa6 <_svfiprintf_r+0x32>
 8009a98:	230c      	movs	r3, #12
 8009a9a:	603b      	str	r3, [r7, #0]
 8009a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8009aa0:	b01d      	add	sp, #116	@ 0x74
 8009aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009aa6:	2340      	movs	r3, #64	@ 0x40
 8009aa8:	616b      	str	r3, [r5, #20]
 8009aaa:	2300      	movs	r3, #0
 8009aac:	9309      	str	r3, [sp, #36]	@ 0x24
 8009aae:	2320      	movs	r3, #32
 8009ab0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009ab4:	2330      	movs	r3, #48	@ 0x30
 8009ab6:	f04f 0901 	mov.w	r9, #1
 8009aba:	f8cd 800c 	str.w	r8, [sp, #12]
 8009abe:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8009c58 <_svfiprintf_r+0x1e4>
 8009ac2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009ac6:	4623      	mov	r3, r4
 8009ac8:	469a      	mov	sl, r3
 8009aca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ace:	b10a      	cbz	r2, 8009ad4 <_svfiprintf_r+0x60>
 8009ad0:	2a25      	cmp	r2, #37	@ 0x25
 8009ad2:	d1f9      	bne.n	8009ac8 <_svfiprintf_r+0x54>
 8009ad4:	ebba 0b04 	subs.w	fp, sl, r4
 8009ad8:	d00b      	beq.n	8009af2 <_svfiprintf_r+0x7e>
 8009ada:	465b      	mov	r3, fp
 8009adc:	4622      	mov	r2, r4
 8009ade:	4629      	mov	r1, r5
 8009ae0:	4638      	mov	r0, r7
 8009ae2:	f7ff ff6b 	bl	80099bc <__ssputs_r>
 8009ae6:	3001      	adds	r0, #1
 8009ae8:	f000 80a7 	beq.w	8009c3a <_svfiprintf_r+0x1c6>
 8009aec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009aee:	445a      	add	r2, fp
 8009af0:	9209      	str	r2, [sp, #36]	@ 0x24
 8009af2:	f89a 3000 	ldrb.w	r3, [sl]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	f000 809f 	beq.w	8009c3a <_svfiprintf_r+0x1c6>
 8009afc:	2300      	movs	r3, #0
 8009afe:	f04f 32ff 	mov.w	r2, #4294967295
 8009b02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b06:	f10a 0a01 	add.w	sl, sl, #1
 8009b0a:	9304      	str	r3, [sp, #16]
 8009b0c:	9307      	str	r3, [sp, #28]
 8009b0e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009b12:	931a      	str	r3, [sp, #104]	@ 0x68
 8009b14:	4654      	mov	r4, sl
 8009b16:	2205      	movs	r2, #5
 8009b18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b1c:	484e      	ldr	r0, [pc, #312]	@ (8009c58 <_svfiprintf_r+0x1e4>)
 8009b1e:	f7fd fcba 	bl	8007496 <memchr>
 8009b22:	9a04      	ldr	r2, [sp, #16]
 8009b24:	b9d8      	cbnz	r0, 8009b5e <_svfiprintf_r+0xea>
 8009b26:	06d0      	lsls	r0, r2, #27
 8009b28:	bf44      	itt	mi
 8009b2a:	2320      	movmi	r3, #32
 8009b2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b30:	0711      	lsls	r1, r2, #28
 8009b32:	bf44      	itt	mi
 8009b34:	232b      	movmi	r3, #43	@ 0x2b
 8009b36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b3a:	f89a 3000 	ldrb.w	r3, [sl]
 8009b3e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b40:	d015      	beq.n	8009b6e <_svfiprintf_r+0xfa>
 8009b42:	4654      	mov	r4, sl
 8009b44:	2000      	movs	r0, #0
 8009b46:	f04f 0c0a 	mov.w	ip, #10
 8009b4a:	9a07      	ldr	r2, [sp, #28]
 8009b4c:	4621      	mov	r1, r4
 8009b4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b52:	3b30      	subs	r3, #48	@ 0x30
 8009b54:	2b09      	cmp	r3, #9
 8009b56:	d94b      	bls.n	8009bf0 <_svfiprintf_r+0x17c>
 8009b58:	b1b0      	cbz	r0, 8009b88 <_svfiprintf_r+0x114>
 8009b5a:	9207      	str	r2, [sp, #28]
 8009b5c:	e014      	b.n	8009b88 <_svfiprintf_r+0x114>
 8009b5e:	eba0 0308 	sub.w	r3, r0, r8
 8009b62:	fa09 f303 	lsl.w	r3, r9, r3
 8009b66:	4313      	orrs	r3, r2
 8009b68:	46a2      	mov	sl, r4
 8009b6a:	9304      	str	r3, [sp, #16]
 8009b6c:	e7d2      	b.n	8009b14 <_svfiprintf_r+0xa0>
 8009b6e:	9b03      	ldr	r3, [sp, #12]
 8009b70:	1d19      	adds	r1, r3, #4
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	9103      	str	r1, [sp, #12]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	bfbb      	ittet	lt
 8009b7a:	425b      	neglt	r3, r3
 8009b7c:	f042 0202 	orrlt.w	r2, r2, #2
 8009b80:	9307      	strge	r3, [sp, #28]
 8009b82:	9307      	strlt	r3, [sp, #28]
 8009b84:	bfb8      	it	lt
 8009b86:	9204      	strlt	r2, [sp, #16]
 8009b88:	7823      	ldrb	r3, [r4, #0]
 8009b8a:	2b2e      	cmp	r3, #46	@ 0x2e
 8009b8c:	d10a      	bne.n	8009ba4 <_svfiprintf_r+0x130>
 8009b8e:	7863      	ldrb	r3, [r4, #1]
 8009b90:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b92:	d132      	bne.n	8009bfa <_svfiprintf_r+0x186>
 8009b94:	9b03      	ldr	r3, [sp, #12]
 8009b96:	3402      	adds	r4, #2
 8009b98:	1d1a      	adds	r2, r3, #4
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	9203      	str	r2, [sp, #12]
 8009b9e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009ba2:	9305      	str	r3, [sp, #20]
 8009ba4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8009c5c <_svfiprintf_r+0x1e8>
 8009ba8:	2203      	movs	r2, #3
 8009baa:	4650      	mov	r0, sl
 8009bac:	7821      	ldrb	r1, [r4, #0]
 8009bae:	f7fd fc72 	bl	8007496 <memchr>
 8009bb2:	b138      	cbz	r0, 8009bc4 <_svfiprintf_r+0x150>
 8009bb4:	2240      	movs	r2, #64	@ 0x40
 8009bb6:	9b04      	ldr	r3, [sp, #16]
 8009bb8:	eba0 000a 	sub.w	r0, r0, sl
 8009bbc:	4082      	lsls	r2, r0
 8009bbe:	4313      	orrs	r3, r2
 8009bc0:	3401      	adds	r4, #1
 8009bc2:	9304      	str	r3, [sp, #16]
 8009bc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bc8:	2206      	movs	r2, #6
 8009bca:	4825      	ldr	r0, [pc, #148]	@ (8009c60 <_svfiprintf_r+0x1ec>)
 8009bcc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009bd0:	f7fd fc61 	bl	8007496 <memchr>
 8009bd4:	2800      	cmp	r0, #0
 8009bd6:	d036      	beq.n	8009c46 <_svfiprintf_r+0x1d2>
 8009bd8:	4b22      	ldr	r3, [pc, #136]	@ (8009c64 <_svfiprintf_r+0x1f0>)
 8009bda:	bb1b      	cbnz	r3, 8009c24 <_svfiprintf_r+0x1b0>
 8009bdc:	9b03      	ldr	r3, [sp, #12]
 8009bde:	3307      	adds	r3, #7
 8009be0:	f023 0307 	bic.w	r3, r3, #7
 8009be4:	3308      	adds	r3, #8
 8009be6:	9303      	str	r3, [sp, #12]
 8009be8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bea:	4433      	add	r3, r6
 8009bec:	9309      	str	r3, [sp, #36]	@ 0x24
 8009bee:	e76a      	b.n	8009ac6 <_svfiprintf_r+0x52>
 8009bf0:	460c      	mov	r4, r1
 8009bf2:	2001      	movs	r0, #1
 8009bf4:	fb0c 3202 	mla	r2, ip, r2, r3
 8009bf8:	e7a8      	b.n	8009b4c <_svfiprintf_r+0xd8>
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	f04f 0c0a 	mov.w	ip, #10
 8009c00:	4619      	mov	r1, r3
 8009c02:	3401      	adds	r4, #1
 8009c04:	9305      	str	r3, [sp, #20]
 8009c06:	4620      	mov	r0, r4
 8009c08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c0c:	3a30      	subs	r2, #48	@ 0x30
 8009c0e:	2a09      	cmp	r2, #9
 8009c10:	d903      	bls.n	8009c1a <_svfiprintf_r+0x1a6>
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d0c6      	beq.n	8009ba4 <_svfiprintf_r+0x130>
 8009c16:	9105      	str	r1, [sp, #20]
 8009c18:	e7c4      	b.n	8009ba4 <_svfiprintf_r+0x130>
 8009c1a:	4604      	mov	r4, r0
 8009c1c:	2301      	movs	r3, #1
 8009c1e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c22:	e7f0      	b.n	8009c06 <_svfiprintf_r+0x192>
 8009c24:	ab03      	add	r3, sp, #12
 8009c26:	9300      	str	r3, [sp, #0]
 8009c28:	462a      	mov	r2, r5
 8009c2a:	4638      	mov	r0, r7
 8009c2c:	4b0e      	ldr	r3, [pc, #56]	@ (8009c68 <_svfiprintf_r+0x1f4>)
 8009c2e:	a904      	add	r1, sp, #16
 8009c30:	f7fc fc68 	bl	8006504 <_printf_float>
 8009c34:	1c42      	adds	r2, r0, #1
 8009c36:	4606      	mov	r6, r0
 8009c38:	d1d6      	bne.n	8009be8 <_svfiprintf_r+0x174>
 8009c3a:	89ab      	ldrh	r3, [r5, #12]
 8009c3c:	065b      	lsls	r3, r3, #25
 8009c3e:	f53f af2d 	bmi.w	8009a9c <_svfiprintf_r+0x28>
 8009c42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009c44:	e72c      	b.n	8009aa0 <_svfiprintf_r+0x2c>
 8009c46:	ab03      	add	r3, sp, #12
 8009c48:	9300      	str	r3, [sp, #0]
 8009c4a:	462a      	mov	r2, r5
 8009c4c:	4638      	mov	r0, r7
 8009c4e:	4b06      	ldr	r3, [pc, #24]	@ (8009c68 <_svfiprintf_r+0x1f4>)
 8009c50:	a904      	add	r1, sp, #16
 8009c52:	f7fc fef5 	bl	8006a40 <_printf_i>
 8009c56:	e7ed      	b.n	8009c34 <_svfiprintf_r+0x1c0>
 8009c58:	0800c2d9 	.word	0x0800c2d9
 8009c5c:	0800c2df 	.word	0x0800c2df
 8009c60:	0800c2e3 	.word	0x0800c2e3
 8009c64:	08006505 	.word	0x08006505
 8009c68:	080099bd 	.word	0x080099bd

08009c6c <__sflush_r>:
 8009c6c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c72:	0716      	lsls	r6, r2, #28
 8009c74:	4605      	mov	r5, r0
 8009c76:	460c      	mov	r4, r1
 8009c78:	d454      	bmi.n	8009d24 <__sflush_r+0xb8>
 8009c7a:	684b      	ldr	r3, [r1, #4]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	dc02      	bgt.n	8009c86 <__sflush_r+0x1a>
 8009c80:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	dd48      	ble.n	8009d18 <__sflush_r+0xac>
 8009c86:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009c88:	2e00      	cmp	r6, #0
 8009c8a:	d045      	beq.n	8009d18 <__sflush_r+0xac>
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009c92:	682f      	ldr	r7, [r5, #0]
 8009c94:	6a21      	ldr	r1, [r4, #32]
 8009c96:	602b      	str	r3, [r5, #0]
 8009c98:	d030      	beq.n	8009cfc <__sflush_r+0x90>
 8009c9a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009c9c:	89a3      	ldrh	r3, [r4, #12]
 8009c9e:	0759      	lsls	r1, r3, #29
 8009ca0:	d505      	bpl.n	8009cae <__sflush_r+0x42>
 8009ca2:	6863      	ldr	r3, [r4, #4]
 8009ca4:	1ad2      	subs	r2, r2, r3
 8009ca6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009ca8:	b10b      	cbz	r3, 8009cae <__sflush_r+0x42>
 8009caa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009cac:	1ad2      	subs	r2, r2, r3
 8009cae:	2300      	movs	r3, #0
 8009cb0:	4628      	mov	r0, r5
 8009cb2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009cb4:	6a21      	ldr	r1, [r4, #32]
 8009cb6:	47b0      	blx	r6
 8009cb8:	1c43      	adds	r3, r0, #1
 8009cba:	89a3      	ldrh	r3, [r4, #12]
 8009cbc:	d106      	bne.n	8009ccc <__sflush_r+0x60>
 8009cbe:	6829      	ldr	r1, [r5, #0]
 8009cc0:	291d      	cmp	r1, #29
 8009cc2:	d82b      	bhi.n	8009d1c <__sflush_r+0xb0>
 8009cc4:	4a28      	ldr	r2, [pc, #160]	@ (8009d68 <__sflush_r+0xfc>)
 8009cc6:	410a      	asrs	r2, r1
 8009cc8:	07d6      	lsls	r6, r2, #31
 8009cca:	d427      	bmi.n	8009d1c <__sflush_r+0xb0>
 8009ccc:	2200      	movs	r2, #0
 8009cce:	6062      	str	r2, [r4, #4]
 8009cd0:	6922      	ldr	r2, [r4, #16]
 8009cd2:	04d9      	lsls	r1, r3, #19
 8009cd4:	6022      	str	r2, [r4, #0]
 8009cd6:	d504      	bpl.n	8009ce2 <__sflush_r+0x76>
 8009cd8:	1c42      	adds	r2, r0, #1
 8009cda:	d101      	bne.n	8009ce0 <__sflush_r+0x74>
 8009cdc:	682b      	ldr	r3, [r5, #0]
 8009cde:	b903      	cbnz	r3, 8009ce2 <__sflush_r+0x76>
 8009ce0:	6560      	str	r0, [r4, #84]	@ 0x54
 8009ce2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009ce4:	602f      	str	r7, [r5, #0]
 8009ce6:	b1b9      	cbz	r1, 8009d18 <__sflush_r+0xac>
 8009ce8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009cec:	4299      	cmp	r1, r3
 8009cee:	d002      	beq.n	8009cf6 <__sflush_r+0x8a>
 8009cf0:	4628      	mov	r0, r5
 8009cf2:	f7fe fa41 	bl	8008178 <_free_r>
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	6363      	str	r3, [r4, #52]	@ 0x34
 8009cfa:	e00d      	b.n	8009d18 <__sflush_r+0xac>
 8009cfc:	2301      	movs	r3, #1
 8009cfe:	4628      	mov	r0, r5
 8009d00:	47b0      	blx	r6
 8009d02:	4602      	mov	r2, r0
 8009d04:	1c50      	adds	r0, r2, #1
 8009d06:	d1c9      	bne.n	8009c9c <__sflush_r+0x30>
 8009d08:	682b      	ldr	r3, [r5, #0]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d0c6      	beq.n	8009c9c <__sflush_r+0x30>
 8009d0e:	2b1d      	cmp	r3, #29
 8009d10:	d001      	beq.n	8009d16 <__sflush_r+0xaa>
 8009d12:	2b16      	cmp	r3, #22
 8009d14:	d11d      	bne.n	8009d52 <__sflush_r+0xe6>
 8009d16:	602f      	str	r7, [r5, #0]
 8009d18:	2000      	movs	r0, #0
 8009d1a:	e021      	b.n	8009d60 <__sflush_r+0xf4>
 8009d1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d20:	b21b      	sxth	r3, r3
 8009d22:	e01a      	b.n	8009d5a <__sflush_r+0xee>
 8009d24:	690f      	ldr	r7, [r1, #16]
 8009d26:	2f00      	cmp	r7, #0
 8009d28:	d0f6      	beq.n	8009d18 <__sflush_r+0xac>
 8009d2a:	0793      	lsls	r3, r2, #30
 8009d2c:	bf18      	it	ne
 8009d2e:	2300      	movne	r3, #0
 8009d30:	680e      	ldr	r6, [r1, #0]
 8009d32:	bf08      	it	eq
 8009d34:	694b      	ldreq	r3, [r1, #20]
 8009d36:	1bf6      	subs	r6, r6, r7
 8009d38:	600f      	str	r7, [r1, #0]
 8009d3a:	608b      	str	r3, [r1, #8]
 8009d3c:	2e00      	cmp	r6, #0
 8009d3e:	ddeb      	ble.n	8009d18 <__sflush_r+0xac>
 8009d40:	4633      	mov	r3, r6
 8009d42:	463a      	mov	r2, r7
 8009d44:	4628      	mov	r0, r5
 8009d46:	6a21      	ldr	r1, [r4, #32]
 8009d48:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8009d4c:	47e0      	blx	ip
 8009d4e:	2800      	cmp	r0, #0
 8009d50:	dc07      	bgt.n	8009d62 <__sflush_r+0xf6>
 8009d52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d5a:	f04f 30ff 	mov.w	r0, #4294967295
 8009d5e:	81a3      	strh	r3, [r4, #12]
 8009d60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d62:	4407      	add	r7, r0
 8009d64:	1a36      	subs	r6, r6, r0
 8009d66:	e7e9      	b.n	8009d3c <__sflush_r+0xd0>
 8009d68:	dfbffffe 	.word	0xdfbffffe

08009d6c <_fflush_r>:
 8009d6c:	b538      	push	{r3, r4, r5, lr}
 8009d6e:	690b      	ldr	r3, [r1, #16]
 8009d70:	4605      	mov	r5, r0
 8009d72:	460c      	mov	r4, r1
 8009d74:	b913      	cbnz	r3, 8009d7c <_fflush_r+0x10>
 8009d76:	2500      	movs	r5, #0
 8009d78:	4628      	mov	r0, r5
 8009d7a:	bd38      	pop	{r3, r4, r5, pc}
 8009d7c:	b118      	cbz	r0, 8009d86 <_fflush_r+0x1a>
 8009d7e:	6a03      	ldr	r3, [r0, #32]
 8009d80:	b90b      	cbnz	r3, 8009d86 <_fflush_r+0x1a>
 8009d82:	f7fd fa19 	bl	80071b8 <__sinit>
 8009d86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d0f3      	beq.n	8009d76 <_fflush_r+0xa>
 8009d8e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009d90:	07d0      	lsls	r0, r2, #31
 8009d92:	d404      	bmi.n	8009d9e <_fflush_r+0x32>
 8009d94:	0599      	lsls	r1, r3, #22
 8009d96:	d402      	bmi.n	8009d9e <_fflush_r+0x32>
 8009d98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009d9a:	f7fd fb7a 	bl	8007492 <__retarget_lock_acquire_recursive>
 8009d9e:	4628      	mov	r0, r5
 8009da0:	4621      	mov	r1, r4
 8009da2:	f7ff ff63 	bl	8009c6c <__sflush_r>
 8009da6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009da8:	4605      	mov	r5, r0
 8009daa:	07da      	lsls	r2, r3, #31
 8009dac:	d4e4      	bmi.n	8009d78 <_fflush_r+0xc>
 8009dae:	89a3      	ldrh	r3, [r4, #12]
 8009db0:	059b      	lsls	r3, r3, #22
 8009db2:	d4e1      	bmi.n	8009d78 <_fflush_r+0xc>
 8009db4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009db6:	f7fd fb6d 	bl	8007494 <__retarget_lock_release_recursive>
 8009dba:	e7dd      	b.n	8009d78 <_fflush_r+0xc>

08009dbc <memmove>:
 8009dbc:	4288      	cmp	r0, r1
 8009dbe:	b510      	push	{r4, lr}
 8009dc0:	eb01 0402 	add.w	r4, r1, r2
 8009dc4:	d902      	bls.n	8009dcc <memmove+0x10>
 8009dc6:	4284      	cmp	r4, r0
 8009dc8:	4623      	mov	r3, r4
 8009dca:	d807      	bhi.n	8009ddc <memmove+0x20>
 8009dcc:	1e43      	subs	r3, r0, #1
 8009dce:	42a1      	cmp	r1, r4
 8009dd0:	d008      	beq.n	8009de4 <memmove+0x28>
 8009dd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009dd6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009dda:	e7f8      	b.n	8009dce <memmove+0x12>
 8009ddc:	4601      	mov	r1, r0
 8009dde:	4402      	add	r2, r0
 8009de0:	428a      	cmp	r2, r1
 8009de2:	d100      	bne.n	8009de6 <memmove+0x2a>
 8009de4:	bd10      	pop	{r4, pc}
 8009de6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009dea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009dee:	e7f7      	b.n	8009de0 <memmove+0x24>

08009df0 <strncmp>:
 8009df0:	b510      	push	{r4, lr}
 8009df2:	b16a      	cbz	r2, 8009e10 <strncmp+0x20>
 8009df4:	3901      	subs	r1, #1
 8009df6:	1884      	adds	r4, r0, r2
 8009df8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009dfc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009e00:	429a      	cmp	r2, r3
 8009e02:	d103      	bne.n	8009e0c <strncmp+0x1c>
 8009e04:	42a0      	cmp	r0, r4
 8009e06:	d001      	beq.n	8009e0c <strncmp+0x1c>
 8009e08:	2a00      	cmp	r2, #0
 8009e0a:	d1f5      	bne.n	8009df8 <strncmp+0x8>
 8009e0c:	1ad0      	subs	r0, r2, r3
 8009e0e:	bd10      	pop	{r4, pc}
 8009e10:	4610      	mov	r0, r2
 8009e12:	e7fc      	b.n	8009e0e <strncmp+0x1e>

08009e14 <_sbrk_r>:
 8009e14:	b538      	push	{r3, r4, r5, lr}
 8009e16:	2300      	movs	r3, #0
 8009e18:	4d05      	ldr	r5, [pc, #20]	@ (8009e30 <_sbrk_r+0x1c>)
 8009e1a:	4604      	mov	r4, r0
 8009e1c:	4608      	mov	r0, r1
 8009e1e:	602b      	str	r3, [r5, #0]
 8009e20:	f7f8 f8d0 	bl	8001fc4 <_sbrk>
 8009e24:	1c43      	adds	r3, r0, #1
 8009e26:	d102      	bne.n	8009e2e <_sbrk_r+0x1a>
 8009e28:	682b      	ldr	r3, [r5, #0]
 8009e2a:	b103      	cbz	r3, 8009e2e <_sbrk_r+0x1a>
 8009e2c:	6023      	str	r3, [r4, #0]
 8009e2e:	bd38      	pop	{r3, r4, r5, pc}
 8009e30:	20001684 	.word	0x20001684

08009e34 <nan>:
 8009e34:	2000      	movs	r0, #0
 8009e36:	4901      	ldr	r1, [pc, #4]	@ (8009e3c <nan+0x8>)
 8009e38:	4770      	bx	lr
 8009e3a:	bf00      	nop
 8009e3c:	7ff80000 	.word	0x7ff80000

08009e40 <__assert_func>:
 8009e40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009e42:	4614      	mov	r4, r2
 8009e44:	461a      	mov	r2, r3
 8009e46:	4b09      	ldr	r3, [pc, #36]	@ (8009e6c <__assert_func+0x2c>)
 8009e48:	4605      	mov	r5, r0
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	68d8      	ldr	r0, [r3, #12]
 8009e4e:	b954      	cbnz	r4, 8009e66 <__assert_func+0x26>
 8009e50:	4b07      	ldr	r3, [pc, #28]	@ (8009e70 <__assert_func+0x30>)
 8009e52:	461c      	mov	r4, r3
 8009e54:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009e58:	9100      	str	r1, [sp, #0]
 8009e5a:	462b      	mov	r3, r5
 8009e5c:	4905      	ldr	r1, [pc, #20]	@ (8009e74 <__assert_func+0x34>)
 8009e5e:	f000 fba7 	bl	800a5b0 <fiprintf>
 8009e62:	f000 fbb7 	bl	800a5d4 <abort>
 8009e66:	4b04      	ldr	r3, [pc, #16]	@ (8009e78 <__assert_func+0x38>)
 8009e68:	e7f4      	b.n	8009e54 <__assert_func+0x14>
 8009e6a:	bf00      	nop
 8009e6c:	2000001c 	.word	0x2000001c
 8009e70:	0800c32d 	.word	0x0800c32d
 8009e74:	0800c2ff 	.word	0x0800c2ff
 8009e78:	0800c2f2 	.word	0x0800c2f2

08009e7c <_calloc_r>:
 8009e7c:	b570      	push	{r4, r5, r6, lr}
 8009e7e:	fba1 5402 	umull	r5, r4, r1, r2
 8009e82:	b93c      	cbnz	r4, 8009e94 <_calloc_r+0x18>
 8009e84:	4629      	mov	r1, r5
 8009e86:	f7fe f9e9 	bl	800825c <_malloc_r>
 8009e8a:	4606      	mov	r6, r0
 8009e8c:	b928      	cbnz	r0, 8009e9a <_calloc_r+0x1e>
 8009e8e:	2600      	movs	r6, #0
 8009e90:	4630      	mov	r0, r6
 8009e92:	bd70      	pop	{r4, r5, r6, pc}
 8009e94:	220c      	movs	r2, #12
 8009e96:	6002      	str	r2, [r0, #0]
 8009e98:	e7f9      	b.n	8009e8e <_calloc_r+0x12>
 8009e9a:	462a      	mov	r2, r5
 8009e9c:	4621      	mov	r1, r4
 8009e9e:	f7fd fa24 	bl	80072ea <memset>
 8009ea2:	e7f5      	b.n	8009e90 <_calloc_r+0x14>

08009ea4 <rshift>:
 8009ea4:	6903      	ldr	r3, [r0, #16]
 8009ea6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009eaa:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009eae:	f100 0414 	add.w	r4, r0, #20
 8009eb2:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009eb6:	dd46      	ble.n	8009f46 <rshift+0xa2>
 8009eb8:	f011 011f 	ands.w	r1, r1, #31
 8009ebc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009ec0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009ec4:	d10c      	bne.n	8009ee0 <rshift+0x3c>
 8009ec6:	4629      	mov	r1, r5
 8009ec8:	f100 0710 	add.w	r7, r0, #16
 8009ecc:	42b1      	cmp	r1, r6
 8009ece:	d335      	bcc.n	8009f3c <rshift+0x98>
 8009ed0:	1a9b      	subs	r3, r3, r2
 8009ed2:	009b      	lsls	r3, r3, #2
 8009ed4:	1eea      	subs	r2, r5, #3
 8009ed6:	4296      	cmp	r6, r2
 8009ed8:	bf38      	it	cc
 8009eda:	2300      	movcc	r3, #0
 8009edc:	4423      	add	r3, r4
 8009ede:	e015      	b.n	8009f0c <rshift+0x68>
 8009ee0:	46a1      	mov	r9, r4
 8009ee2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009ee6:	f1c1 0820 	rsb	r8, r1, #32
 8009eea:	40cf      	lsrs	r7, r1
 8009eec:	f105 0e04 	add.w	lr, r5, #4
 8009ef0:	4576      	cmp	r6, lr
 8009ef2:	46f4      	mov	ip, lr
 8009ef4:	d816      	bhi.n	8009f24 <rshift+0x80>
 8009ef6:	1a9a      	subs	r2, r3, r2
 8009ef8:	0092      	lsls	r2, r2, #2
 8009efa:	3a04      	subs	r2, #4
 8009efc:	3501      	adds	r5, #1
 8009efe:	42ae      	cmp	r6, r5
 8009f00:	bf38      	it	cc
 8009f02:	2200      	movcc	r2, #0
 8009f04:	18a3      	adds	r3, r4, r2
 8009f06:	50a7      	str	r7, [r4, r2]
 8009f08:	b107      	cbz	r7, 8009f0c <rshift+0x68>
 8009f0a:	3304      	adds	r3, #4
 8009f0c:	42a3      	cmp	r3, r4
 8009f0e:	eba3 0204 	sub.w	r2, r3, r4
 8009f12:	bf08      	it	eq
 8009f14:	2300      	moveq	r3, #0
 8009f16:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009f1a:	6102      	str	r2, [r0, #16]
 8009f1c:	bf08      	it	eq
 8009f1e:	6143      	streq	r3, [r0, #20]
 8009f20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f24:	f8dc c000 	ldr.w	ip, [ip]
 8009f28:	fa0c fc08 	lsl.w	ip, ip, r8
 8009f2c:	ea4c 0707 	orr.w	r7, ip, r7
 8009f30:	f849 7b04 	str.w	r7, [r9], #4
 8009f34:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009f38:	40cf      	lsrs	r7, r1
 8009f3a:	e7d9      	b.n	8009ef0 <rshift+0x4c>
 8009f3c:	f851 cb04 	ldr.w	ip, [r1], #4
 8009f40:	f847 cf04 	str.w	ip, [r7, #4]!
 8009f44:	e7c2      	b.n	8009ecc <rshift+0x28>
 8009f46:	4623      	mov	r3, r4
 8009f48:	e7e0      	b.n	8009f0c <rshift+0x68>

08009f4a <__hexdig_fun>:
 8009f4a:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009f4e:	2b09      	cmp	r3, #9
 8009f50:	d802      	bhi.n	8009f58 <__hexdig_fun+0xe>
 8009f52:	3820      	subs	r0, #32
 8009f54:	b2c0      	uxtb	r0, r0
 8009f56:	4770      	bx	lr
 8009f58:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009f5c:	2b05      	cmp	r3, #5
 8009f5e:	d801      	bhi.n	8009f64 <__hexdig_fun+0x1a>
 8009f60:	3847      	subs	r0, #71	@ 0x47
 8009f62:	e7f7      	b.n	8009f54 <__hexdig_fun+0xa>
 8009f64:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009f68:	2b05      	cmp	r3, #5
 8009f6a:	d801      	bhi.n	8009f70 <__hexdig_fun+0x26>
 8009f6c:	3827      	subs	r0, #39	@ 0x27
 8009f6e:	e7f1      	b.n	8009f54 <__hexdig_fun+0xa>
 8009f70:	2000      	movs	r0, #0
 8009f72:	4770      	bx	lr

08009f74 <__gethex>:
 8009f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f78:	468a      	mov	sl, r1
 8009f7a:	4690      	mov	r8, r2
 8009f7c:	b085      	sub	sp, #20
 8009f7e:	9302      	str	r3, [sp, #8]
 8009f80:	680b      	ldr	r3, [r1, #0]
 8009f82:	9001      	str	r0, [sp, #4]
 8009f84:	1c9c      	adds	r4, r3, #2
 8009f86:	46a1      	mov	r9, r4
 8009f88:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009f8c:	2830      	cmp	r0, #48	@ 0x30
 8009f8e:	d0fa      	beq.n	8009f86 <__gethex+0x12>
 8009f90:	eba9 0303 	sub.w	r3, r9, r3
 8009f94:	f1a3 0b02 	sub.w	fp, r3, #2
 8009f98:	f7ff ffd7 	bl	8009f4a <__hexdig_fun>
 8009f9c:	4605      	mov	r5, r0
 8009f9e:	2800      	cmp	r0, #0
 8009fa0:	d168      	bne.n	800a074 <__gethex+0x100>
 8009fa2:	2201      	movs	r2, #1
 8009fa4:	4648      	mov	r0, r9
 8009fa6:	499f      	ldr	r1, [pc, #636]	@ (800a224 <__gethex+0x2b0>)
 8009fa8:	f7ff ff22 	bl	8009df0 <strncmp>
 8009fac:	4607      	mov	r7, r0
 8009fae:	2800      	cmp	r0, #0
 8009fb0:	d167      	bne.n	800a082 <__gethex+0x10e>
 8009fb2:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009fb6:	4626      	mov	r6, r4
 8009fb8:	f7ff ffc7 	bl	8009f4a <__hexdig_fun>
 8009fbc:	2800      	cmp	r0, #0
 8009fbe:	d062      	beq.n	800a086 <__gethex+0x112>
 8009fc0:	4623      	mov	r3, r4
 8009fc2:	7818      	ldrb	r0, [r3, #0]
 8009fc4:	4699      	mov	r9, r3
 8009fc6:	2830      	cmp	r0, #48	@ 0x30
 8009fc8:	f103 0301 	add.w	r3, r3, #1
 8009fcc:	d0f9      	beq.n	8009fc2 <__gethex+0x4e>
 8009fce:	f7ff ffbc 	bl	8009f4a <__hexdig_fun>
 8009fd2:	fab0 f580 	clz	r5, r0
 8009fd6:	f04f 0b01 	mov.w	fp, #1
 8009fda:	096d      	lsrs	r5, r5, #5
 8009fdc:	464a      	mov	r2, r9
 8009fde:	4616      	mov	r6, r2
 8009fe0:	7830      	ldrb	r0, [r6, #0]
 8009fe2:	3201      	adds	r2, #1
 8009fe4:	f7ff ffb1 	bl	8009f4a <__hexdig_fun>
 8009fe8:	2800      	cmp	r0, #0
 8009fea:	d1f8      	bne.n	8009fde <__gethex+0x6a>
 8009fec:	2201      	movs	r2, #1
 8009fee:	4630      	mov	r0, r6
 8009ff0:	498c      	ldr	r1, [pc, #560]	@ (800a224 <__gethex+0x2b0>)
 8009ff2:	f7ff fefd 	bl	8009df0 <strncmp>
 8009ff6:	2800      	cmp	r0, #0
 8009ff8:	d13f      	bne.n	800a07a <__gethex+0x106>
 8009ffa:	b944      	cbnz	r4, 800a00e <__gethex+0x9a>
 8009ffc:	1c74      	adds	r4, r6, #1
 8009ffe:	4622      	mov	r2, r4
 800a000:	4616      	mov	r6, r2
 800a002:	7830      	ldrb	r0, [r6, #0]
 800a004:	3201      	adds	r2, #1
 800a006:	f7ff ffa0 	bl	8009f4a <__hexdig_fun>
 800a00a:	2800      	cmp	r0, #0
 800a00c:	d1f8      	bne.n	800a000 <__gethex+0x8c>
 800a00e:	1ba4      	subs	r4, r4, r6
 800a010:	00a7      	lsls	r7, r4, #2
 800a012:	7833      	ldrb	r3, [r6, #0]
 800a014:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a018:	2b50      	cmp	r3, #80	@ 0x50
 800a01a:	d13e      	bne.n	800a09a <__gethex+0x126>
 800a01c:	7873      	ldrb	r3, [r6, #1]
 800a01e:	2b2b      	cmp	r3, #43	@ 0x2b
 800a020:	d033      	beq.n	800a08a <__gethex+0x116>
 800a022:	2b2d      	cmp	r3, #45	@ 0x2d
 800a024:	d034      	beq.n	800a090 <__gethex+0x11c>
 800a026:	2400      	movs	r4, #0
 800a028:	1c71      	adds	r1, r6, #1
 800a02a:	7808      	ldrb	r0, [r1, #0]
 800a02c:	f7ff ff8d 	bl	8009f4a <__hexdig_fun>
 800a030:	1e43      	subs	r3, r0, #1
 800a032:	b2db      	uxtb	r3, r3
 800a034:	2b18      	cmp	r3, #24
 800a036:	d830      	bhi.n	800a09a <__gethex+0x126>
 800a038:	f1a0 0210 	sub.w	r2, r0, #16
 800a03c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a040:	f7ff ff83 	bl	8009f4a <__hexdig_fun>
 800a044:	f100 3cff 	add.w	ip, r0, #4294967295
 800a048:	fa5f fc8c 	uxtb.w	ip, ip
 800a04c:	f1bc 0f18 	cmp.w	ip, #24
 800a050:	f04f 030a 	mov.w	r3, #10
 800a054:	d91e      	bls.n	800a094 <__gethex+0x120>
 800a056:	b104      	cbz	r4, 800a05a <__gethex+0xe6>
 800a058:	4252      	negs	r2, r2
 800a05a:	4417      	add	r7, r2
 800a05c:	f8ca 1000 	str.w	r1, [sl]
 800a060:	b1ed      	cbz	r5, 800a09e <__gethex+0x12a>
 800a062:	f1bb 0f00 	cmp.w	fp, #0
 800a066:	bf0c      	ite	eq
 800a068:	2506      	moveq	r5, #6
 800a06a:	2500      	movne	r5, #0
 800a06c:	4628      	mov	r0, r5
 800a06e:	b005      	add	sp, #20
 800a070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a074:	2500      	movs	r5, #0
 800a076:	462c      	mov	r4, r5
 800a078:	e7b0      	b.n	8009fdc <__gethex+0x68>
 800a07a:	2c00      	cmp	r4, #0
 800a07c:	d1c7      	bne.n	800a00e <__gethex+0x9a>
 800a07e:	4627      	mov	r7, r4
 800a080:	e7c7      	b.n	800a012 <__gethex+0x9e>
 800a082:	464e      	mov	r6, r9
 800a084:	462f      	mov	r7, r5
 800a086:	2501      	movs	r5, #1
 800a088:	e7c3      	b.n	800a012 <__gethex+0x9e>
 800a08a:	2400      	movs	r4, #0
 800a08c:	1cb1      	adds	r1, r6, #2
 800a08e:	e7cc      	b.n	800a02a <__gethex+0xb6>
 800a090:	2401      	movs	r4, #1
 800a092:	e7fb      	b.n	800a08c <__gethex+0x118>
 800a094:	fb03 0002 	mla	r0, r3, r2, r0
 800a098:	e7ce      	b.n	800a038 <__gethex+0xc4>
 800a09a:	4631      	mov	r1, r6
 800a09c:	e7de      	b.n	800a05c <__gethex+0xe8>
 800a09e:	4629      	mov	r1, r5
 800a0a0:	eba6 0309 	sub.w	r3, r6, r9
 800a0a4:	3b01      	subs	r3, #1
 800a0a6:	2b07      	cmp	r3, #7
 800a0a8:	dc0a      	bgt.n	800a0c0 <__gethex+0x14c>
 800a0aa:	9801      	ldr	r0, [sp, #4]
 800a0ac:	f7fe f962 	bl	8008374 <_Balloc>
 800a0b0:	4604      	mov	r4, r0
 800a0b2:	b940      	cbnz	r0, 800a0c6 <__gethex+0x152>
 800a0b4:	4602      	mov	r2, r0
 800a0b6:	21e4      	movs	r1, #228	@ 0xe4
 800a0b8:	4b5b      	ldr	r3, [pc, #364]	@ (800a228 <__gethex+0x2b4>)
 800a0ba:	485c      	ldr	r0, [pc, #368]	@ (800a22c <__gethex+0x2b8>)
 800a0bc:	f7ff fec0 	bl	8009e40 <__assert_func>
 800a0c0:	3101      	adds	r1, #1
 800a0c2:	105b      	asrs	r3, r3, #1
 800a0c4:	e7ef      	b.n	800a0a6 <__gethex+0x132>
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	f100 0a14 	add.w	sl, r0, #20
 800a0cc:	4655      	mov	r5, sl
 800a0ce:	469b      	mov	fp, r3
 800a0d0:	45b1      	cmp	r9, r6
 800a0d2:	d337      	bcc.n	800a144 <__gethex+0x1d0>
 800a0d4:	f845 bb04 	str.w	fp, [r5], #4
 800a0d8:	eba5 050a 	sub.w	r5, r5, sl
 800a0dc:	10ad      	asrs	r5, r5, #2
 800a0de:	6125      	str	r5, [r4, #16]
 800a0e0:	4658      	mov	r0, fp
 800a0e2:	f7fe fa39 	bl	8008558 <__hi0bits>
 800a0e6:	016d      	lsls	r5, r5, #5
 800a0e8:	f8d8 6000 	ldr.w	r6, [r8]
 800a0ec:	1a2d      	subs	r5, r5, r0
 800a0ee:	42b5      	cmp	r5, r6
 800a0f0:	dd54      	ble.n	800a19c <__gethex+0x228>
 800a0f2:	1bad      	subs	r5, r5, r6
 800a0f4:	4629      	mov	r1, r5
 800a0f6:	4620      	mov	r0, r4
 800a0f8:	f7fe fdc1 	bl	8008c7e <__any_on>
 800a0fc:	4681      	mov	r9, r0
 800a0fe:	b178      	cbz	r0, 800a120 <__gethex+0x1ac>
 800a100:	f04f 0901 	mov.w	r9, #1
 800a104:	1e6b      	subs	r3, r5, #1
 800a106:	1159      	asrs	r1, r3, #5
 800a108:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a10c:	f003 021f 	and.w	r2, r3, #31
 800a110:	fa09 f202 	lsl.w	r2, r9, r2
 800a114:	420a      	tst	r2, r1
 800a116:	d003      	beq.n	800a120 <__gethex+0x1ac>
 800a118:	454b      	cmp	r3, r9
 800a11a:	dc36      	bgt.n	800a18a <__gethex+0x216>
 800a11c:	f04f 0902 	mov.w	r9, #2
 800a120:	4629      	mov	r1, r5
 800a122:	4620      	mov	r0, r4
 800a124:	f7ff febe 	bl	8009ea4 <rshift>
 800a128:	442f      	add	r7, r5
 800a12a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a12e:	42bb      	cmp	r3, r7
 800a130:	da42      	bge.n	800a1b8 <__gethex+0x244>
 800a132:	4621      	mov	r1, r4
 800a134:	9801      	ldr	r0, [sp, #4]
 800a136:	f7fe f95d 	bl	80083f4 <_Bfree>
 800a13a:	2300      	movs	r3, #0
 800a13c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a13e:	25a3      	movs	r5, #163	@ 0xa3
 800a140:	6013      	str	r3, [r2, #0]
 800a142:	e793      	b.n	800a06c <__gethex+0xf8>
 800a144:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a148:	2a2e      	cmp	r2, #46	@ 0x2e
 800a14a:	d012      	beq.n	800a172 <__gethex+0x1fe>
 800a14c:	2b20      	cmp	r3, #32
 800a14e:	d104      	bne.n	800a15a <__gethex+0x1e6>
 800a150:	f845 bb04 	str.w	fp, [r5], #4
 800a154:	f04f 0b00 	mov.w	fp, #0
 800a158:	465b      	mov	r3, fp
 800a15a:	7830      	ldrb	r0, [r6, #0]
 800a15c:	9303      	str	r3, [sp, #12]
 800a15e:	f7ff fef4 	bl	8009f4a <__hexdig_fun>
 800a162:	9b03      	ldr	r3, [sp, #12]
 800a164:	f000 000f 	and.w	r0, r0, #15
 800a168:	4098      	lsls	r0, r3
 800a16a:	ea4b 0b00 	orr.w	fp, fp, r0
 800a16e:	3304      	adds	r3, #4
 800a170:	e7ae      	b.n	800a0d0 <__gethex+0x15c>
 800a172:	45b1      	cmp	r9, r6
 800a174:	d8ea      	bhi.n	800a14c <__gethex+0x1d8>
 800a176:	2201      	movs	r2, #1
 800a178:	4630      	mov	r0, r6
 800a17a:	492a      	ldr	r1, [pc, #168]	@ (800a224 <__gethex+0x2b0>)
 800a17c:	9303      	str	r3, [sp, #12]
 800a17e:	f7ff fe37 	bl	8009df0 <strncmp>
 800a182:	9b03      	ldr	r3, [sp, #12]
 800a184:	2800      	cmp	r0, #0
 800a186:	d1e1      	bne.n	800a14c <__gethex+0x1d8>
 800a188:	e7a2      	b.n	800a0d0 <__gethex+0x15c>
 800a18a:	4620      	mov	r0, r4
 800a18c:	1ea9      	subs	r1, r5, #2
 800a18e:	f7fe fd76 	bl	8008c7e <__any_on>
 800a192:	2800      	cmp	r0, #0
 800a194:	d0c2      	beq.n	800a11c <__gethex+0x1a8>
 800a196:	f04f 0903 	mov.w	r9, #3
 800a19a:	e7c1      	b.n	800a120 <__gethex+0x1ac>
 800a19c:	da09      	bge.n	800a1b2 <__gethex+0x23e>
 800a19e:	1b75      	subs	r5, r6, r5
 800a1a0:	4621      	mov	r1, r4
 800a1a2:	462a      	mov	r2, r5
 800a1a4:	9801      	ldr	r0, [sp, #4]
 800a1a6:	f7fe fb3b 	bl	8008820 <__lshift>
 800a1aa:	4604      	mov	r4, r0
 800a1ac:	1b7f      	subs	r7, r7, r5
 800a1ae:	f100 0a14 	add.w	sl, r0, #20
 800a1b2:	f04f 0900 	mov.w	r9, #0
 800a1b6:	e7b8      	b.n	800a12a <__gethex+0x1b6>
 800a1b8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a1bc:	42bd      	cmp	r5, r7
 800a1be:	dd6f      	ble.n	800a2a0 <__gethex+0x32c>
 800a1c0:	1bed      	subs	r5, r5, r7
 800a1c2:	42ae      	cmp	r6, r5
 800a1c4:	dc34      	bgt.n	800a230 <__gethex+0x2bc>
 800a1c6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a1ca:	2b02      	cmp	r3, #2
 800a1cc:	d022      	beq.n	800a214 <__gethex+0x2a0>
 800a1ce:	2b03      	cmp	r3, #3
 800a1d0:	d024      	beq.n	800a21c <__gethex+0x2a8>
 800a1d2:	2b01      	cmp	r3, #1
 800a1d4:	d115      	bne.n	800a202 <__gethex+0x28e>
 800a1d6:	42ae      	cmp	r6, r5
 800a1d8:	d113      	bne.n	800a202 <__gethex+0x28e>
 800a1da:	2e01      	cmp	r6, #1
 800a1dc:	d10b      	bne.n	800a1f6 <__gethex+0x282>
 800a1de:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a1e2:	9a02      	ldr	r2, [sp, #8]
 800a1e4:	2562      	movs	r5, #98	@ 0x62
 800a1e6:	6013      	str	r3, [r2, #0]
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	6123      	str	r3, [r4, #16]
 800a1ec:	f8ca 3000 	str.w	r3, [sl]
 800a1f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a1f2:	601c      	str	r4, [r3, #0]
 800a1f4:	e73a      	b.n	800a06c <__gethex+0xf8>
 800a1f6:	4620      	mov	r0, r4
 800a1f8:	1e71      	subs	r1, r6, #1
 800a1fa:	f7fe fd40 	bl	8008c7e <__any_on>
 800a1fe:	2800      	cmp	r0, #0
 800a200:	d1ed      	bne.n	800a1de <__gethex+0x26a>
 800a202:	4621      	mov	r1, r4
 800a204:	9801      	ldr	r0, [sp, #4]
 800a206:	f7fe f8f5 	bl	80083f4 <_Bfree>
 800a20a:	2300      	movs	r3, #0
 800a20c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a20e:	2550      	movs	r5, #80	@ 0x50
 800a210:	6013      	str	r3, [r2, #0]
 800a212:	e72b      	b.n	800a06c <__gethex+0xf8>
 800a214:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a216:	2b00      	cmp	r3, #0
 800a218:	d1f3      	bne.n	800a202 <__gethex+0x28e>
 800a21a:	e7e0      	b.n	800a1de <__gethex+0x26a>
 800a21c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d1dd      	bne.n	800a1de <__gethex+0x26a>
 800a222:	e7ee      	b.n	800a202 <__gethex+0x28e>
 800a224:	0800c180 	.word	0x0800c180
 800a228:	0800c013 	.word	0x0800c013
 800a22c:	0800c32e 	.word	0x0800c32e
 800a230:	1e6f      	subs	r7, r5, #1
 800a232:	f1b9 0f00 	cmp.w	r9, #0
 800a236:	d130      	bne.n	800a29a <__gethex+0x326>
 800a238:	b127      	cbz	r7, 800a244 <__gethex+0x2d0>
 800a23a:	4639      	mov	r1, r7
 800a23c:	4620      	mov	r0, r4
 800a23e:	f7fe fd1e 	bl	8008c7e <__any_on>
 800a242:	4681      	mov	r9, r0
 800a244:	2301      	movs	r3, #1
 800a246:	4629      	mov	r1, r5
 800a248:	1b76      	subs	r6, r6, r5
 800a24a:	2502      	movs	r5, #2
 800a24c:	117a      	asrs	r2, r7, #5
 800a24e:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a252:	f007 071f 	and.w	r7, r7, #31
 800a256:	40bb      	lsls	r3, r7
 800a258:	4213      	tst	r3, r2
 800a25a:	4620      	mov	r0, r4
 800a25c:	bf18      	it	ne
 800a25e:	f049 0902 	orrne.w	r9, r9, #2
 800a262:	f7ff fe1f 	bl	8009ea4 <rshift>
 800a266:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a26a:	f1b9 0f00 	cmp.w	r9, #0
 800a26e:	d047      	beq.n	800a300 <__gethex+0x38c>
 800a270:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a274:	2b02      	cmp	r3, #2
 800a276:	d015      	beq.n	800a2a4 <__gethex+0x330>
 800a278:	2b03      	cmp	r3, #3
 800a27a:	d017      	beq.n	800a2ac <__gethex+0x338>
 800a27c:	2b01      	cmp	r3, #1
 800a27e:	d109      	bne.n	800a294 <__gethex+0x320>
 800a280:	f019 0f02 	tst.w	r9, #2
 800a284:	d006      	beq.n	800a294 <__gethex+0x320>
 800a286:	f8da 3000 	ldr.w	r3, [sl]
 800a28a:	ea49 0903 	orr.w	r9, r9, r3
 800a28e:	f019 0f01 	tst.w	r9, #1
 800a292:	d10e      	bne.n	800a2b2 <__gethex+0x33e>
 800a294:	f045 0510 	orr.w	r5, r5, #16
 800a298:	e032      	b.n	800a300 <__gethex+0x38c>
 800a29a:	f04f 0901 	mov.w	r9, #1
 800a29e:	e7d1      	b.n	800a244 <__gethex+0x2d0>
 800a2a0:	2501      	movs	r5, #1
 800a2a2:	e7e2      	b.n	800a26a <__gethex+0x2f6>
 800a2a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a2a6:	f1c3 0301 	rsb	r3, r3, #1
 800a2aa:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a2ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d0f0      	beq.n	800a294 <__gethex+0x320>
 800a2b2:	f04f 0c00 	mov.w	ip, #0
 800a2b6:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a2ba:	f104 0314 	add.w	r3, r4, #20
 800a2be:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a2c2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2cc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a2d0:	d01b      	beq.n	800a30a <__gethex+0x396>
 800a2d2:	3201      	adds	r2, #1
 800a2d4:	6002      	str	r2, [r0, #0]
 800a2d6:	2d02      	cmp	r5, #2
 800a2d8:	f104 0314 	add.w	r3, r4, #20
 800a2dc:	d13c      	bne.n	800a358 <__gethex+0x3e4>
 800a2de:	f8d8 2000 	ldr.w	r2, [r8]
 800a2e2:	3a01      	subs	r2, #1
 800a2e4:	42b2      	cmp	r2, r6
 800a2e6:	d109      	bne.n	800a2fc <__gethex+0x388>
 800a2e8:	2201      	movs	r2, #1
 800a2ea:	1171      	asrs	r1, r6, #5
 800a2ec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a2f0:	f006 061f 	and.w	r6, r6, #31
 800a2f4:	fa02 f606 	lsl.w	r6, r2, r6
 800a2f8:	421e      	tst	r6, r3
 800a2fa:	d13a      	bne.n	800a372 <__gethex+0x3fe>
 800a2fc:	f045 0520 	orr.w	r5, r5, #32
 800a300:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a302:	601c      	str	r4, [r3, #0]
 800a304:	9b02      	ldr	r3, [sp, #8]
 800a306:	601f      	str	r7, [r3, #0]
 800a308:	e6b0      	b.n	800a06c <__gethex+0xf8>
 800a30a:	4299      	cmp	r1, r3
 800a30c:	f843 cc04 	str.w	ip, [r3, #-4]
 800a310:	d8d9      	bhi.n	800a2c6 <__gethex+0x352>
 800a312:	68a3      	ldr	r3, [r4, #8]
 800a314:	459b      	cmp	fp, r3
 800a316:	db17      	blt.n	800a348 <__gethex+0x3d4>
 800a318:	6861      	ldr	r1, [r4, #4]
 800a31a:	9801      	ldr	r0, [sp, #4]
 800a31c:	3101      	adds	r1, #1
 800a31e:	f7fe f829 	bl	8008374 <_Balloc>
 800a322:	4681      	mov	r9, r0
 800a324:	b918      	cbnz	r0, 800a32e <__gethex+0x3ba>
 800a326:	4602      	mov	r2, r0
 800a328:	2184      	movs	r1, #132	@ 0x84
 800a32a:	4b19      	ldr	r3, [pc, #100]	@ (800a390 <__gethex+0x41c>)
 800a32c:	e6c5      	b.n	800a0ba <__gethex+0x146>
 800a32e:	6922      	ldr	r2, [r4, #16]
 800a330:	f104 010c 	add.w	r1, r4, #12
 800a334:	3202      	adds	r2, #2
 800a336:	0092      	lsls	r2, r2, #2
 800a338:	300c      	adds	r0, #12
 800a33a:	f7fd f8ba 	bl	80074b2 <memcpy>
 800a33e:	4621      	mov	r1, r4
 800a340:	9801      	ldr	r0, [sp, #4]
 800a342:	f7fe f857 	bl	80083f4 <_Bfree>
 800a346:	464c      	mov	r4, r9
 800a348:	6923      	ldr	r3, [r4, #16]
 800a34a:	1c5a      	adds	r2, r3, #1
 800a34c:	6122      	str	r2, [r4, #16]
 800a34e:	2201      	movs	r2, #1
 800a350:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a354:	615a      	str	r2, [r3, #20]
 800a356:	e7be      	b.n	800a2d6 <__gethex+0x362>
 800a358:	6922      	ldr	r2, [r4, #16]
 800a35a:	455a      	cmp	r2, fp
 800a35c:	dd0b      	ble.n	800a376 <__gethex+0x402>
 800a35e:	2101      	movs	r1, #1
 800a360:	4620      	mov	r0, r4
 800a362:	f7ff fd9f 	bl	8009ea4 <rshift>
 800a366:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a36a:	3701      	adds	r7, #1
 800a36c:	42bb      	cmp	r3, r7
 800a36e:	f6ff aee0 	blt.w	800a132 <__gethex+0x1be>
 800a372:	2501      	movs	r5, #1
 800a374:	e7c2      	b.n	800a2fc <__gethex+0x388>
 800a376:	f016 061f 	ands.w	r6, r6, #31
 800a37a:	d0fa      	beq.n	800a372 <__gethex+0x3fe>
 800a37c:	4453      	add	r3, sl
 800a37e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a382:	f7fe f8e9 	bl	8008558 <__hi0bits>
 800a386:	f1c6 0620 	rsb	r6, r6, #32
 800a38a:	42b0      	cmp	r0, r6
 800a38c:	dbe7      	blt.n	800a35e <__gethex+0x3ea>
 800a38e:	e7f0      	b.n	800a372 <__gethex+0x3fe>
 800a390:	0800c013 	.word	0x0800c013

0800a394 <L_shift>:
 800a394:	f1c2 0208 	rsb	r2, r2, #8
 800a398:	0092      	lsls	r2, r2, #2
 800a39a:	b570      	push	{r4, r5, r6, lr}
 800a39c:	f1c2 0620 	rsb	r6, r2, #32
 800a3a0:	6843      	ldr	r3, [r0, #4]
 800a3a2:	6804      	ldr	r4, [r0, #0]
 800a3a4:	fa03 f506 	lsl.w	r5, r3, r6
 800a3a8:	432c      	orrs	r4, r5
 800a3aa:	40d3      	lsrs	r3, r2
 800a3ac:	6004      	str	r4, [r0, #0]
 800a3ae:	f840 3f04 	str.w	r3, [r0, #4]!
 800a3b2:	4288      	cmp	r0, r1
 800a3b4:	d3f4      	bcc.n	800a3a0 <L_shift+0xc>
 800a3b6:	bd70      	pop	{r4, r5, r6, pc}

0800a3b8 <__match>:
 800a3b8:	b530      	push	{r4, r5, lr}
 800a3ba:	6803      	ldr	r3, [r0, #0]
 800a3bc:	3301      	adds	r3, #1
 800a3be:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a3c2:	b914      	cbnz	r4, 800a3ca <__match+0x12>
 800a3c4:	6003      	str	r3, [r0, #0]
 800a3c6:	2001      	movs	r0, #1
 800a3c8:	bd30      	pop	{r4, r5, pc}
 800a3ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3ce:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a3d2:	2d19      	cmp	r5, #25
 800a3d4:	bf98      	it	ls
 800a3d6:	3220      	addls	r2, #32
 800a3d8:	42a2      	cmp	r2, r4
 800a3da:	d0f0      	beq.n	800a3be <__match+0x6>
 800a3dc:	2000      	movs	r0, #0
 800a3de:	e7f3      	b.n	800a3c8 <__match+0x10>

0800a3e0 <__hexnan>:
 800a3e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3e4:	2500      	movs	r5, #0
 800a3e6:	680b      	ldr	r3, [r1, #0]
 800a3e8:	4682      	mov	sl, r0
 800a3ea:	115e      	asrs	r6, r3, #5
 800a3ec:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a3f0:	f013 031f 	ands.w	r3, r3, #31
 800a3f4:	bf18      	it	ne
 800a3f6:	3604      	addne	r6, #4
 800a3f8:	1f37      	subs	r7, r6, #4
 800a3fa:	4690      	mov	r8, r2
 800a3fc:	46b9      	mov	r9, r7
 800a3fe:	463c      	mov	r4, r7
 800a400:	46ab      	mov	fp, r5
 800a402:	b087      	sub	sp, #28
 800a404:	6801      	ldr	r1, [r0, #0]
 800a406:	9301      	str	r3, [sp, #4]
 800a408:	f846 5c04 	str.w	r5, [r6, #-4]
 800a40c:	9502      	str	r5, [sp, #8]
 800a40e:	784a      	ldrb	r2, [r1, #1]
 800a410:	1c4b      	adds	r3, r1, #1
 800a412:	9303      	str	r3, [sp, #12]
 800a414:	b342      	cbz	r2, 800a468 <__hexnan+0x88>
 800a416:	4610      	mov	r0, r2
 800a418:	9105      	str	r1, [sp, #20]
 800a41a:	9204      	str	r2, [sp, #16]
 800a41c:	f7ff fd95 	bl	8009f4a <__hexdig_fun>
 800a420:	2800      	cmp	r0, #0
 800a422:	d151      	bne.n	800a4c8 <__hexnan+0xe8>
 800a424:	9a04      	ldr	r2, [sp, #16]
 800a426:	9905      	ldr	r1, [sp, #20]
 800a428:	2a20      	cmp	r2, #32
 800a42a:	d818      	bhi.n	800a45e <__hexnan+0x7e>
 800a42c:	9b02      	ldr	r3, [sp, #8]
 800a42e:	459b      	cmp	fp, r3
 800a430:	dd13      	ble.n	800a45a <__hexnan+0x7a>
 800a432:	454c      	cmp	r4, r9
 800a434:	d206      	bcs.n	800a444 <__hexnan+0x64>
 800a436:	2d07      	cmp	r5, #7
 800a438:	dc04      	bgt.n	800a444 <__hexnan+0x64>
 800a43a:	462a      	mov	r2, r5
 800a43c:	4649      	mov	r1, r9
 800a43e:	4620      	mov	r0, r4
 800a440:	f7ff ffa8 	bl	800a394 <L_shift>
 800a444:	4544      	cmp	r4, r8
 800a446:	d952      	bls.n	800a4ee <__hexnan+0x10e>
 800a448:	2300      	movs	r3, #0
 800a44a:	f1a4 0904 	sub.w	r9, r4, #4
 800a44e:	f844 3c04 	str.w	r3, [r4, #-4]
 800a452:	461d      	mov	r5, r3
 800a454:	464c      	mov	r4, r9
 800a456:	f8cd b008 	str.w	fp, [sp, #8]
 800a45a:	9903      	ldr	r1, [sp, #12]
 800a45c:	e7d7      	b.n	800a40e <__hexnan+0x2e>
 800a45e:	2a29      	cmp	r2, #41	@ 0x29
 800a460:	d157      	bne.n	800a512 <__hexnan+0x132>
 800a462:	3102      	adds	r1, #2
 800a464:	f8ca 1000 	str.w	r1, [sl]
 800a468:	f1bb 0f00 	cmp.w	fp, #0
 800a46c:	d051      	beq.n	800a512 <__hexnan+0x132>
 800a46e:	454c      	cmp	r4, r9
 800a470:	d206      	bcs.n	800a480 <__hexnan+0xa0>
 800a472:	2d07      	cmp	r5, #7
 800a474:	dc04      	bgt.n	800a480 <__hexnan+0xa0>
 800a476:	462a      	mov	r2, r5
 800a478:	4649      	mov	r1, r9
 800a47a:	4620      	mov	r0, r4
 800a47c:	f7ff ff8a 	bl	800a394 <L_shift>
 800a480:	4544      	cmp	r4, r8
 800a482:	d936      	bls.n	800a4f2 <__hexnan+0x112>
 800a484:	4623      	mov	r3, r4
 800a486:	f1a8 0204 	sub.w	r2, r8, #4
 800a48a:	f853 1b04 	ldr.w	r1, [r3], #4
 800a48e:	429f      	cmp	r7, r3
 800a490:	f842 1f04 	str.w	r1, [r2, #4]!
 800a494:	d2f9      	bcs.n	800a48a <__hexnan+0xaa>
 800a496:	1b3b      	subs	r3, r7, r4
 800a498:	f023 0303 	bic.w	r3, r3, #3
 800a49c:	3304      	adds	r3, #4
 800a49e:	3401      	adds	r4, #1
 800a4a0:	3e03      	subs	r6, #3
 800a4a2:	42b4      	cmp	r4, r6
 800a4a4:	bf88      	it	hi
 800a4a6:	2304      	movhi	r3, #4
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	4443      	add	r3, r8
 800a4ac:	f843 2b04 	str.w	r2, [r3], #4
 800a4b0:	429f      	cmp	r7, r3
 800a4b2:	d2fb      	bcs.n	800a4ac <__hexnan+0xcc>
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	b91b      	cbnz	r3, 800a4c0 <__hexnan+0xe0>
 800a4b8:	4547      	cmp	r7, r8
 800a4ba:	d128      	bne.n	800a50e <__hexnan+0x12e>
 800a4bc:	2301      	movs	r3, #1
 800a4be:	603b      	str	r3, [r7, #0]
 800a4c0:	2005      	movs	r0, #5
 800a4c2:	b007      	add	sp, #28
 800a4c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4c8:	3501      	adds	r5, #1
 800a4ca:	2d08      	cmp	r5, #8
 800a4cc:	f10b 0b01 	add.w	fp, fp, #1
 800a4d0:	dd06      	ble.n	800a4e0 <__hexnan+0x100>
 800a4d2:	4544      	cmp	r4, r8
 800a4d4:	d9c1      	bls.n	800a45a <__hexnan+0x7a>
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	2501      	movs	r5, #1
 800a4da:	f844 3c04 	str.w	r3, [r4, #-4]
 800a4de:	3c04      	subs	r4, #4
 800a4e0:	6822      	ldr	r2, [r4, #0]
 800a4e2:	f000 000f 	and.w	r0, r0, #15
 800a4e6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a4ea:	6020      	str	r0, [r4, #0]
 800a4ec:	e7b5      	b.n	800a45a <__hexnan+0x7a>
 800a4ee:	2508      	movs	r5, #8
 800a4f0:	e7b3      	b.n	800a45a <__hexnan+0x7a>
 800a4f2:	9b01      	ldr	r3, [sp, #4]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d0dd      	beq.n	800a4b4 <__hexnan+0xd4>
 800a4f8:	f04f 32ff 	mov.w	r2, #4294967295
 800a4fc:	f1c3 0320 	rsb	r3, r3, #32
 800a500:	40da      	lsrs	r2, r3
 800a502:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a506:	4013      	ands	r3, r2
 800a508:	f846 3c04 	str.w	r3, [r6, #-4]
 800a50c:	e7d2      	b.n	800a4b4 <__hexnan+0xd4>
 800a50e:	3f04      	subs	r7, #4
 800a510:	e7d0      	b.n	800a4b4 <__hexnan+0xd4>
 800a512:	2004      	movs	r0, #4
 800a514:	e7d5      	b.n	800a4c2 <__hexnan+0xe2>

0800a516 <__ascii_mbtowc>:
 800a516:	b082      	sub	sp, #8
 800a518:	b901      	cbnz	r1, 800a51c <__ascii_mbtowc+0x6>
 800a51a:	a901      	add	r1, sp, #4
 800a51c:	b142      	cbz	r2, 800a530 <__ascii_mbtowc+0x1a>
 800a51e:	b14b      	cbz	r3, 800a534 <__ascii_mbtowc+0x1e>
 800a520:	7813      	ldrb	r3, [r2, #0]
 800a522:	600b      	str	r3, [r1, #0]
 800a524:	7812      	ldrb	r2, [r2, #0]
 800a526:	1e10      	subs	r0, r2, #0
 800a528:	bf18      	it	ne
 800a52a:	2001      	movne	r0, #1
 800a52c:	b002      	add	sp, #8
 800a52e:	4770      	bx	lr
 800a530:	4610      	mov	r0, r2
 800a532:	e7fb      	b.n	800a52c <__ascii_mbtowc+0x16>
 800a534:	f06f 0001 	mvn.w	r0, #1
 800a538:	e7f8      	b.n	800a52c <__ascii_mbtowc+0x16>

0800a53a <_realloc_r>:
 800a53a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a53e:	4680      	mov	r8, r0
 800a540:	4615      	mov	r5, r2
 800a542:	460c      	mov	r4, r1
 800a544:	b921      	cbnz	r1, 800a550 <_realloc_r+0x16>
 800a546:	4611      	mov	r1, r2
 800a548:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a54c:	f7fd be86 	b.w	800825c <_malloc_r>
 800a550:	b92a      	cbnz	r2, 800a55e <_realloc_r+0x24>
 800a552:	f7fd fe11 	bl	8008178 <_free_r>
 800a556:	2400      	movs	r4, #0
 800a558:	4620      	mov	r0, r4
 800a55a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a55e:	f000 f840 	bl	800a5e2 <_malloc_usable_size_r>
 800a562:	4285      	cmp	r5, r0
 800a564:	4606      	mov	r6, r0
 800a566:	d802      	bhi.n	800a56e <_realloc_r+0x34>
 800a568:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a56c:	d8f4      	bhi.n	800a558 <_realloc_r+0x1e>
 800a56e:	4629      	mov	r1, r5
 800a570:	4640      	mov	r0, r8
 800a572:	f7fd fe73 	bl	800825c <_malloc_r>
 800a576:	4607      	mov	r7, r0
 800a578:	2800      	cmp	r0, #0
 800a57a:	d0ec      	beq.n	800a556 <_realloc_r+0x1c>
 800a57c:	42b5      	cmp	r5, r6
 800a57e:	462a      	mov	r2, r5
 800a580:	4621      	mov	r1, r4
 800a582:	bf28      	it	cs
 800a584:	4632      	movcs	r2, r6
 800a586:	f7fc ff94 	bl	80074b2 <memcpy>
 800a58a:	4621      	mov	r1, r4
 800a58c:	4640      	mov	r0, r8
 800a58e:	f7fd fdf3 	bl	8008178 <_free_r>
 800a592:	463c      	mov	r4, r7
 800a594:	e7e0      	b.n	800a558 <_realloc_r+0x1e>

0800a596 <__ascii_wctomb>:
 800a596:	4603      	mov	r3, r0
 800a598:	4608      	mov	r0, r1
 800a59a:	b141      	cbz	r1, 800a5ae <__ascii_wctomb+0x18>
 800a59c:	2aff      	cmp	r2, #255	@ 0xff
 800a59e:	d904      	bls.n	800a5aa <__ascii_wctomb+0x14>
 800a5a0:	228a      	movs	r2, #138	@ 0x8a
 800a5a2:	f04f 30ff 	mov.w	r0, #4294967295
 800a5a6:	601a      	str	r2, [r3, #0]
 800a5a8:	4770      	bx	lr
 800a5aa:	2001      	movs	r0, #1
 800a5ac:	700a      	strb	r2, [r1, #0]
 800a5ae:	4770      	bx	lr

0800a5b0 <fiprintf>:
 800a5b0:	b40e      	push	{r1, r2, r3}
 800a5b2:	b503      	push	{r0, r1, lr}
 800a5b4:	4601      	mov	r1, r0
 800a5b6:	ab03      	add	r3, sp, #12
 800a5b8:	4805      	ldr	r0, [pc, #20]	@ (800a5d0 <fiprintf+0x20>)
 800a5ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5be:	6800      	ldr	r0, [r0, #0]
 800a5c0:	9301      	str	r3, [sp, #4]
 800a5c2:	f000 f83d 	bl	800a640 <_vfiprintf_r>
 800a5c6:	b002      	add	sp, #8
 800a5c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a5cc:	b003      	add	sp, #12
 800a5ce:	4770      	bx	lr
 800a5d0:	2000001c 	.word	0x2000001c

0800a5d4 <abort>:
 800a5d4:	2006      	movs	r0, #6
 800a5d6:	b508      	push	{r3, lr}
 800a5d8:	f000 fa06 	bl	800a9e8 <raise>
 800a5dc:	2001      	movs	r0, #1
 800a5de:	f7f7 fc7c 	bl	8001eda <_exit>

0800a5e2 <_malloc_usable_size_r>:
 800a5e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a5e6:	1f18      	subs	r0, r3, #4
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	bfbc      	itt	lt
 800a5ec:	580b      	ldrlt	r3, [r1, r0]
 800a5ee:	18c0      	addlt	r0, r0, r3
 800a5f0:	4770      	bx	lr

0800a5f2 <__sfputc_r>:
 800a5f2:	6893      	ldr	r3, [r2, #8]
 800a5f4:	b410      	push	{r4}
 800a5f6:	3b01      	subs	r3, #1
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	6093      	str	r3, [r2, #8]
 800a5fc:	da07      	bge.n	800a60e <__sfputc_r+0x1c>
 800a5fe:	6994      	ldr	r4, [r2, #24]
 800a600:	42a3      	cmp	r3, r4
 800a602:	db01      	blt.n	800a608 <__sfputc_r+0x16>
 800a604:	290a      	cmp	r1, #10
 800a606:	d102      	bne.n	800a60e <__sfputc_r+0x1c>
 800a608:	bc10      	pop	{r4}
 800a60a:	f000 b931 	b.w	800a870 <__swbuf_r>
 800a60e:	6813      	ldr	r3, [r2, #0]
 800a610:	1c58      	adds	r0, r3, #1
 800a612:	6010      	str	r0, [r2, #0]
 800a614:	7019      	strb	r1, [r3, #0]
 800a616:	4608      	mov	r0, r1
 800a618:	bc10      	pop	{r4}
 800a61a:	4770      	bx	lr

0800a61c <__sfputs_r>:
 800a61c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a61e:	4606      	mov	r6, r0
 800a620:	460f      	mov	r7, r1
 800a622:	4614      	mov	r4, r2
 800a624:	18d5      	adds	r5, r2, r3
 800a626:	42ac      	cmp	r4, r5
 800a628:	d101      	bne.n	800a62e <__sfputs_r+0x12>
 800a62a:	2000      	movs	r0, #0
 800a62c:	e007      	b.n	800a63e <__sfputs_r+0x22>
 800a62e:	463a      	mov	r2, r7
 800a630:	4630      	mov	r0, r6
 800a632:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a636:	f7ff ffdc 	bl	800a5f2 <__sfputc_r>
 800a63a:	1c43      	adds	r3, r0, #1
 800a63c:	d1f3      	bne.n	800a626 <__sfputs_r+0xa>
 800a63e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a640 <_vfiprintf_r>:
 800a640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a644:	460d      	mov	r5, r1
 800a646:	4614      	mov	r4, r2
 800a648:	4698      	mov	r8, r3
 800a64a:	4606      	mov	r6, r0
 800a64c:	b09d      	sub	sp, #116	@ 0x74
 800a64e:	b118      	cbz	r0, 800a658 <_vfiprintf_r+0x18>
 800a650:	6a03      	ldr	r3, [r0, #32]
 800a652:	b90b      	cbnz	r3, 800a658 <_vfiprintf_r+0x18>
 800a654:	f7fc fdb0 	bl	80071b8 <__sinit>
 800a658:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a65a:	07d9      	lsls	r1, r3, #31
 800a65c:	d405      	bmi.n	800a66a <_vfiprintf_r+0x2a>
 800a65e:	89ab      	ldrh	r3, [r5, #12]
 800a660:	059a      	lsls	r2, r3, #22
 800a662:	d402      	bmi.n	800a66a <_vfiprintf_r+0x2a>
 800a664:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a666:	f7fc ff14 	bl	8007492 <__retarget_lock_acquire_recursive>
 800a66a:	89ab      	ldrh	r3, [r5, #12]
 800a66c:	071b      	lsls	r3, r3, #28
 800a66e:	d501      	bpl.n	800a674 <_vfiprintf_r+0x34>
 800a670:	692b      	ldr	r3, [r5, #16]
 800a672:	b99b      	cbnz	r3, 800a69c <_vfiprintf_r+0x5c>
 800a674:	4629      	mov	r1, r5
 800a676:	4630      	mov	r0, r6
 800a678:	f000 f938 	bl	800a8ec <__swsetup_r>
 800a67c:	b170      	cbz	r0, 800a69c <_vfiprintf_r+0x5c>
 800a67e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a680:	07dc      	lsls	r4, r3, #31
 800a682:	d504      	bpl.n	800a68e <_vfiprintf_r+0x4e>
 800a684:	f04f 30ff 	mov.w	r0, #4294967295
 800a688:	b01d      	add	sp, #116	@ 0x74
 800a68a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a68e:	89ab      	ldrh	r3, [r5, #12]
 800a690:	0598      	lsls	r0, r3, #22
 800a692:	d4f7      	bmi.n	800a684 <_vfiprintf_r+0x44>
 800a694:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a696:	f7fc fefd 	bl	8007494 <__retarget_lock_release_recursive>
 800a69a:	e7f3      	b.n	800a684 <_vfiprintf_r+0x44>
 800a69c:	2300      	movs	r3, #0
 800a69e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a6a0:	2320      	movs	r3, #32
 800a6a2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a6a6:	2330      	movs	r3, #48	@ 0x30
 800a6a8:	f04f 0901 	mov.w	r9, #1
 800a6ac:	f8cd 800c 	str.w	r8, [sp, #12]
 800a6b0:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800a85c <_vfiprintf_r+0x21c>
 800a6b4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a6b8:	4623      	mov	r3, r4
 800a6ba:	469a      	mov	sl, r3
 800a6bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a6c0:	b10a      	cbz	r2, 800a6c6 <_vfiprintf_r+0x86>
 800a6c2:	2a25      	cmp	r2, #37	@ 0x25
 800a6c4:	d1f9      	bne.n	800a6ba <_vfiprintf_r+0x7a>
 800a6c6:	ebba 0b04 	subs.w	fp, sl, r4
 800a6ca:	d00b      	beq.n	800a6e4 <_vfiprintf_r+0xa4>
 800a6cc:	465b      	mov	r3, fp
 800a6ce:	4622      	mov	r2, r4
 800a6d0:	4629      	mov	r1, r5
 800a6d2:	4630      	mov	r0, r6
 800a6d4:	f7ff ffa2 	bl	800a61c <__sfputs_r>
 800a6d8:	3001      	adds	r0, #1
 800a6da:	f000 80a7 	beq.w	800a82c <_vfiprintf_r+0x1ec>
 800a6de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a6e0:	445a      	add	r2, fp
 800a6e2:	9209      	str	r2, [sp, #36]	@ 0x24
 800a6e4:	f89a 3000 	ldrb.w	r3, [sl]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	f000 809f 	beq.w	800a82c <_vfiprintf_r+0x1ec>
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	f04f 32ff 	mov.w	r2, #4294967295
 800a6f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a6f8:	f10a 0a01 	add.w	sl, sl, #1
 800a6fc:	9304      	str	r3, [sp, #16]
 800a6fe:	9307      	str	r3, [sp, #28]
 800a700:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a704:	931a      	str	r3, [sp, #104]	@ 0x68
 800a706:	4654      	mov	r4, sl
 800a708:	2205      	movs	r2, #5
 800a70a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a70e:	4853      	ldr	r0, [pc, #332]	@ (800a85c <_vfiprintf_r+0x21c>)
 800a710:	f7fc fec1 	bl	8007496 <memchr>
 800a714:	9a04      	ldr	r2, [sp, #16]
 800a716:	b9d8      	cbnz	r0, 800a750 <_vfiprintf_r+0x110>
 800a718:	06d1      	lsls	r1, r2, #27
 800a71a:	bf44      	itt	mi
 800a71c:	2320      	movmi	r3, #32
 800a71e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a722:	0713      	lsls	r3, r2, #28
 800a724:	bf44      	itt	mi
 800a726:	232b      	movmi	r3, #43	@ 0x2b
 800a728:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a72c:	f89a 3000 	ldrb.w	r3, [sl]
 800a730:	2b2a      	cmp	r3, #42	@ 0x2a
 800a732:	d015      	beq.n	800a760 <_vfiprintf_r+0x120>
 800a734:	4654      	mov	r4, sl
 800a736:	2000      	movs	r0, #0
 800a738:	f04f 0c0a 	mov.w	ip, #10
 800a73c:	9a07      	ldr	r2, [sp, #28]
 800a73e:	4621      	mov	r1, r4
 800a740:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a744:	3b30      	subs	r3, #48	@ 0x30
 800a746:	2b09      	cmp	r3, #9
 800a748:	d94b      	bls.n	800a7e2 <_vfiprintf_r+0x1a2>
 800a74a:	b1b0      	cbz	r0, 800a77a <_vfiprintf_r+0x13a>
 800a74c:	9207      	str	r2, [sp, #28]
 800a74e:	e014      	b.n	800a77a <_vfiprintf_r+0x13a>
 800a750:	eba0 0308 	sub.w	r3, r0, r8
 800a754:	fa09 f303 	lsl.w	r3, r9, r3
 800a758:	4313      	orrs	r3, r2
 800a75a:	46a2      	mov	sl, r4
 800a75c:	9304      	str	r3, [sp, #16]
 800a75e:	e7d2      	b.n	800a706 <_vfiprintf_r+0xc6>
 800a760:	9b03      	ldr	r3, [sp, #12]
 800a762:	1d19      	adds	r1, r3, #4
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	9103      	str	r1, [sp, #12]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	bfbb      	ittet	lt
 800a76c:	425b      	neglt	r3, r3
 800a76e:	f042 0202 	orrlt.w	r2, r2, #2
 800a772:	9307      	strge	r3, [sp, #28]
 800a774:	9307      	strlt	r3, [sp, #28]
 800a776:	bfb8      	it	lt
 800a778:	9204      	strlt	r2, [sp, #16]
 800a77a:	7823      	ldrb	r3, [r4, #0]
 800a77c:	2b2e      	cmp	r3, #46	@ 0x2e
 800a77e:	d10a      	bne.n	800a796 <_vfiprintf_r+0x156>
 800a780:	7863      	ldrb	r3, [r4, #1]
 800a782:	2b2a      	cmp	r3, #42	@ 0x2a
 800a784:	d132      	bne.n	800a7ec <_vfiprintf_r+0x1ac>
 800a786:	9b03      	ldr	r3, [sp, #12]
 800a788:	3402      	adds	r4, #2
 800a78a:	1d1a      	adds	r2, r3, #4
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	9203      	str	r2, [sp, #12]
 800a790:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a794:	9305      	str	r3, [sp, #20]
 800a796:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800a860 <_vfiprintf_r+0x220>
 800a79a:	2203      	movs	r2, #3
 800a79c:	4650      	mov	r0, sl
 800a79e:	7821      	ldrb	r1, [r4, #0]
 800a7a0:	f7fc fe79 	bl	8007496 <memchr>
 800a7a4:	b138      	cbz	r0, 800a7b6 <_vfiprintf_r+0x176>
 800a7a6:	2240      	movs	r2, #64	@ 0x40
 800a7a8:	9b04      	ldr	r3, [sp, #16]
 800a7aa:	eba0 000a 	sub.w	r0, r0, sl
 800a7ae:	4082      	lsls	r2, r0
 800a7b0:	4313      	orrs	r3, r2
 800a7b2:	3401      	adds	r4, #1
 800a7b4:	9304      	str	r3, [sp, #16]
 800a7b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7ba:	2206      	movs	r2, #6
 800a7bc:	4829      	ldr	r0, [pc, #164]	@ (800a864 <_vfiprintf_r+0x224>)
 800a7be:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a7c2:	f7fc fe68 	bl	8007496 <memchr>
 800a7c6:	2800      	cmp	r0, #0
 800a7c8:	d03f      	beq.n	800a84a <_vfiprintf_r+0x20a>
 800a7ca:	4b27      	ldr	r3, [pc, #156]	@ (800a868 <_vfiprintf_r+0x228>)
 800a7cc:	bb1b      	cbnz	r3, 800a816 <_vfiprintf_r+0x1d6>
 800a7ce:	9b03      	ldr	r3, [sp, #12]
 800a7d0:	3307      	adds	r3, #7
 800a7d2:	f023 0307 	bic.w	r3, r3, #7
 800a7d6:	3308      	adds	r3, #8
 800a7d8:	9303      	str	r3, [sp, #12]
 800a7da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7dc:	443b      	add	r3, r7
 800a7de:	9309      	str	r3, [sp, #36]	@ 0x24
 800a7e0:	e76a      	b.n	800a6b8 <_vfiprintf_r+0x78>
 800a7e2:	460c      	mov	r4, r1
 800a7e4:	2001      	movs	r0, #1
 800a7e6:	fb0c 3202 	mla	r2, ip, r2, r3
 800a7ea:	e7a8      	b.n	800a73e <_vfiprintf_r+0xfe>
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	f04f 0c0a 	mov.w	ip, #10
 800a7f2:	4619      	mov	r1, r3
 800a7f4:	3401      	adds	r4, #1
 800a7f6:	9305      	str	r3, [sp, #20]
 800a7f8:	4620      	mov	r0, r4
 800a7fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a7fe:	3a30      	subs	r2, #48	@ 0x30
 800a800:	2a09      	cmp	r2, #9
 800a802:	d903      	bls.n	800a80c <_vfiprintf_r+0x1cc>
 800a804:	2b00      	cmp	r3, #0
 800a806:	d0c6      	beq.n	800a796 <_vfiprintf_r+0x156>
 800a808:	9105      	str	r1, [sp, #20]
 800a80a:	e7c4      	b.n	800a796 <_vfiprintf_r+0x156>
 800a80c:	4604      	mov	r4, r0
 800a80e:	2301      	movs	r3, #1
 800a810:	fb0c 2101 	mla	r1, ip, r1, r2
 800a814:	e7f0      	b.n	800a7f8 <_vfiprintf_r+0x1b8>
 800a816:	ab03      	add	r3, sp, #12
 800a818:	9300      	str	r3, [sp, #0]
 800a81a:	462a      	mov	r2, r5
 800a81c:	4630      	mov	r0, r6
 800a81e:	4b13      	ldr	r3, [pc, #76]	@ (800a86c <_vfiprintf_r+0x22c>)
 800a820:	a904      	add	r1, sp, #16
 800a822:	f7fb fe6f 	bl	8006504 <_printf_float>
 800a826:	4607      	mov	r7, r0
 800a828:	1c78      	adds	r0, r7, #1
 800a82a:	d1d6      	bne.n	800a7da <_vfiprintf_r+0x19a>
 800a82c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a82e:	07d9      	lsls	r1, r3, #31
 800a830:	d405      	bmi.n	800a83e <_vfiprintf_r+0x1fe>
 800a832:	89ab      	ldrh	r3, [r5, #12]
 800a834:	059a      	lsls	r2, r3, #22
 800a836:	d402      	bmi.n	800a83e <_vfiprintf_r+0x1fe>
 800a838:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a83a:	f7fc fe2b 	bl	8007494 <__retarget_lock_release_recursive>
 800a83e:	89ab      	ldrh	r3, [r5, #12]
 800a840:	065b      	lsls	r3, r3, #25
 800a842:	f53f af1f 	bmi.w	800a684 <_vfiprintf_r+0x44>
 800a846:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a848:	e71e      	b.n	800a688 <_vfiprintf_r+0x48>
 800a84a:	ab03      	add	r3, sp, #12
 800a84c:	9300      	str	r3, [sp, #0]
 800a84e:	462a      	mov	r2, r5
 800a850:	4630      	mov	r0, r6
 800a852:	4b06      	ldr	r3, [pc, #24]	@ (800a86c <_vfiprintf_r+0x22c>)
 800a854:	a904      	add	r1, sp, #16
 800a856:	f7fc f8f3 	bl	8006a40 <_printf_i>
 800a85a:	e7e4      	b.n	800a826 <_vfiprintf_r+0x1e6>
 800a85c:	0800c2d9 	.word	0x0800c2d9
 800a860:	0800c2df 	.word	0x0800c2df
 800a864:	0800c2e3 	.word	0x0800c2e3
 800a868:	08006505 	.word	0x08006505
 800a86c:	0800a61d 	.word	0x0800a61d

0800a870 <__swbuf_r>:
 800a870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a872:	460e      	mov	r6, r1
 800a874:	4614      	mov	r4, r2
 800a876:	4605      	mov	r5, r0
 800a878:	b118      	cbz	r0, 800a882 <__swbuf_r+0x12>
 800a87a:	6a03      	ldr	r3, [r0, #32]
 800a87c:	b90b      	cbnz	r3, 800a882 <__swbuf_r+0x12>
 800a87e:	f7fc fc9b 	bl	80071b8 <__sinit>
 800a882:	69a3      	ldr	r3, [r4, #24]
 800a884:	60a3      	str	r3, [r4, #8]
 800a886:	89a3      	ldrh	r3, [r4, #12]
 800a888:	071a      	lsls	r2, r3, #28
 800a88a:	d501      	bpl.n	800a890 <__swbuf_r+0x20>
 800a88c:	6923      	ldr	r3, [r4, #16]
 800a88e:	b943      	cbnz	r3, 800a8a2 <__swbuf_r+0x32>
 800a890:	4621      	mov	r1, r4
 800a892:	4628      	mov	r0, r5
 800a894:	f000 f82a 	bl	800a8ec <__swsetup_r>
 800a898:	b118      	cbz	r0, 800a8a2 <__swbuf_r+0x32>
 800a89a:	f04f 37ff 	mov.w	r7, #4294967295
 800a89e:	4638      	mov	r0, r7
 800a8a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8a2:	6823      	ldr	r3, [r4, #0]
 800a8a4:	6922      	ldr	r2, [r4, #16]
 800a8a6:	b2f6      	uxtb	r6, r6
 800a8a8:	1a98      	subs	r0, r3, r2
 800a8aa:	6963      	ldr	r3, [r4, #20]
 800a8ac:	4637      	mov	r7, r6
 800a8ae:	4283      	cmp	r3, r0
 800a8b0:	dc05      	bgt.n	800a8be <__swbuf_r+0x4e>
 800a8b2:	4621      	mov	r1, r4
 800a8b4:	4628      	mov	r0, r5
 800a8b6:	f7ff fa59 	bl	8009d6c <_fflush_r>
 800a8ba:	2800      	cmp	r0, #0
 800a8bc:	d1ed      	bne.n	800a89a <__swbuf_r+0x2a>
 800a8be:	68a3      	ldr	r3, [r4, #8]
 800a8c0:	3b01      	subs	r3, #1
 800a8c2:	60a3      	str	r3, [r4, #8]
 800a8c4:	6823      	ldr	r3, [r4, #0]
 800a8c6:	1c5a      	adds	r2, r3, #1
 800a8c8:	6022      	str	r2, [r4, #0]
 800a8ca:	701e      	strb	r6, [r3, #0]
 800a8cc:	6962      	ldr	r2, [r4, #20]
 800a8ce:	1c43      	adds	r3, r0, #1
 800a8d0:	429a      	cmp	r2, r3
 800a8d2:	d004      	beq.n	800a8de <__swbuf_r+0x6e>
 800a8d4:	89a3      	ldrh	r3, [r4, #12]
 800a8d6:	07db      	lsls	r3, r3, #31
 800a8d8:	d5e1      	bpl.n	800a89e <__swbuf_r+0x2e>
 800a8da:	2e0a      	cmp	r6, #10
 800a8dc:	d1df      	bne.n	800a89e <__swbuf_r+0x2e>
 800a8de:	4621      	mov	r1, r4
 800a8e0:	4628      	mov	r0, r5
 800a8e2:	f7ff fa43 	bl	8009d6c <_fflush_r>
 800a8e6:	2800      	cmp	r0, #0
 800a8e8:	d0d9      	beq.n	800a89e <__swbuf_r+0x2e>
 800a8ea:	e7d6      	b.n	800a89a <__swbuf_r+0x2a>

0800a8ec <__swsetup_r>:
 800a8ec:	b538      	push	{r3, r4, r5, lr}
 800a8ee:	4b29      	ldr	r3, [pc, #164]	@ (800a994 <__swsetup_r+0xa8>)
 800a8f0:	4605      	mov	r5, r0
 800a8f2:	6818      	ldr	r0, [r3, #0]
 800a8f4:	460c      	mov	r4, r1
 800a8f6:	b118      	cbz	r0, 800a900 <__swsetup_r+0x14>
 800a8f8:	6a03      	ldr	r3, [r0, #32]
 800a8fa:	b90b      	cbnz	r3, 800a900 <__swsetup_r+0x14>
 800a8fc:	f7fc fc5c 	bl	80071b8 <__sinit>
 800a900:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a904:	0719      	lsls	r1, r3, #28
 800a906:	d422      	bmi.n	800a94e <__swsetup_r+0x62>
 800a908:	06da      	lsls	r2, r3, #27
 800a90a:	d407      	bmi.n	800a91c <__swsetup_r+0x30>
 800a90c:	2209      	movs	r2, #9
 800a90e:	602a      	str	r2, [r5, #0]
 800a910:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a914:	f04f 30ff 	mov.w	r0, #4294967295
 800a918:	81a3      	strh	r3, [r4, #12]
 800a91a:	e033      	b.n	800a984 <__swsetup_r+0x98>
 800a91c:	0758      	lsls	r0, r3, #29
 800a91e:	d512      	bpl.n	800a946 <__swsetup_r+0x5a>
 800a920:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a922:	b141      	cbz	r1, 800a936 <__swsetup_r+0x4a>
 800a924:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a928:	4299      	cmp	r1, r3
 800a92a:	d002      	beq.n	800a932 <__swsetup_r+0x46>
 800a92c:	4628      	mov	r0, r5
 800a92e:	f7fd fc23 	bl	8008178 <_free_r>
 800a932:	2300      	movs	r3, #0
 800a934:	6363      	str	r3, [r4, #52]	@ 0x34
 800a936:	89a3      	ldrh	r3, [r4, #12]
 800a938:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a93c:	81a3      	strh	r3, [r4, #12]
 800a93e:	2300      	movs	r3, #0
 800a940:	6063      	str	r3, [r4, #4]
 800a942:	6923      	ldr	r3, [r4, #16]
 800a944:	6023      	str	r3, [r4, #0]
 800a946:	89a3      	ldrh	r3, [r4, #12]
 800a948:	f043 0308 	orr.w	r3, r3, #8
 800a94c:	81a3      	strh	r3, [r4, #12]
 800a94e:	6923      	ldr	r3, [r4, #16]
 800a950:	b94b      	cbnz	r3, 800a966 <__swsetup_r+0x7a>
 800a952:	89a3      	ldrh	r3, [r4, #12]
 800a954:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a958:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a95c:	d003      	beq.n	800a966 <__swsetup_r+0x7a>
 800a95e:	4621      	mov	r1, r4
 800a960:	4628      	mov	r0, r5
 800a962:	f000 f882 	bl	800aa6a <__smakebuf_r>
 800a966:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a96a:	f013 0201 	ands.w	r2, r3, #1
 800a96e:	d00a      	beq.n	800a986 <__swsetup_r+0x9a>
 800a970:	2200      	movs	r2, #0
 800a972:	60a2      	str	r2, [r4, #8]
 800a974:	6962      	ldr	r2, [r4, #20]
 800a976:	4252      	negs	r2, r2
 800a978:	61a2      	str	r2, [r4, #24]
 800a97a:	6922      	ldr	r2, [r4, #16]
 800a97c:	b942      	cbnz	r2, 800a990 <__swsetup_r+0xa4>
 800a97e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a982:	d1c5      	bne.n	800a910 <__swsetup_r+0x24>
 800a984:	bd38      	pop	{r3, r4, r5, pc}
 800a986:	0799      	lsls	r1, r3, #30
 800a988:	bf58      	it	pl
 800a98a:	6962      	ldrpl	r2, [r4, #20]
 800a98c:	60a2      	str	r2, [r4, #8]
 800a98e:	e7f4      	b.n	800a97a <__swsetup_r+0x8e>
 800a990:	2000      	movs	r0, #0
 800a992:	e7f7      	b.n	800a984 <__swsetup_r+0x98>
 800a994:	2000001c 	.word	0x2000001c

0800a998 <_raise_r>:
 800a998:	291f      	cmp	r1, #31
 800a99a:	b538      	push	{r3, r4, r5, lr}
 800a99c:	4605      	mov	r5, r0
 800a99e:	460c      	mov	r4, r1
 800a9a0:	d904      	bls.n	800a9ac <_raise_r+0x14>
 800a9a2:	2316      	movs	r3, #22
 800a9a4:	6003      	str	r3, [r0, #0]
 800a9a6:	f04f 30ff 	mov.w	r0, #4294967295
 800a9aa:	bd38      	pop	{r3, r4, r5, pc}
 800a9ac:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a9ae:	b112      	cbz	r2, 800a9b6 <_raise_r+0x1e>
 800a9b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a9b4:	b94b      	cbnz	r3, 800a9ca <_raise_r+0x32>
 800a9b6:	4628      	mov	r0, r5
 800a9b8:	f000 f830 	bl	800aa1c <_getpid_r>
 800a9bc:	4622      	mov	r2, r4
 800a9be:	4601      	mov	r1, r0
 800a9c0:	4628      	mov	r0, r5
 800a9c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a9c6:	f000 b817 	b.w	800a9f8 <_kill_r>
 800a9ca:	2b01      	cmp	r3, #1
 800a9cc:	d00a      	beq.n	800a9e4 <_raise_r+0x4c>
 800a9ce:	1c59      	adds	r1, r3, #1
 800a9d0:	d103      	bne.n	800a9da <_raise_r+0x42>
 800a9d2:	2316      	movs	r3, #22
 800a9d4:	6003      	str	r3, [r0, #0]
 800a9d6:	2001      	movs	r0, #1
 800a9d8:	e7e7      	b.n	800a9aa <_raise_r+0x12>
 800a9da:	2100      	movs	r1, #0
 800a9dc:	4620      	mov	r0, r4
 800a9de:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a9e2:	4798      	blx	r3
 800a9e4:	2000      	movs	r0, #0
 800a9e6:	e7e0      	b.n	800a9aa <_raise_r+0x12>

0800a9e8 <raise>:
 800a9e8:	4b02      	ldr	r3, [pc, #8]	@ (800a9f4 <raise+0xc>)
 800a9ea:	4601      	mov	r1, r0
 800a9ec:	6818      	ldr	r0, [r3, #0]
 800a9ee:	f7ff bfd3 	b.w	800a998 <_raise_r>
 800a9f2:	bf00      	nop
 800a9f4:	2000001c 	.word	0x2000001c

0800a9f8 <_kill_r>:
 800a9f8:	b538      	push	{r3, r4, r5, lr}
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	4d06      	ldr	r5, [pc, #24]	@ (800aa18 <_kill_r+0x20>)
 800a9fe:	4604      	mov	r4, r0
 800aa00:	4608      	mov	r0, r1
 800aa02:	4611      	mov	r1, r2
 800aa04:	602b      	str	r3, [r5, #0]
 800aa06:	f7f7 fa58 	bl	8001eba <_kill>
 800aa0a:	1c43      	adds	r3, r0, #1
 800aa0c:	d102      	bne.n	800aa14 <_kill_r+0x1c>
 800aa0e:	682b      	ldr	r3, [r5, #0]
 800aa10:	b103      	cbz	r3, 800aa14 <_kill_r+0x1c>
 800aa12:	6023      	str	r3, [r4, #0]
 800aa14:	bd38      	pop	{r3, r4, r5, pc}
 800aa16:	bf00      	nop
 800aa18:	20001684 	.word	0x20001684

0800aa1c <_getpid_r>:
 800aa1c:	f7f7 ba46 	b.w	8001eac <_getpid>

0800aa20 <__swhatbuf_r>:
 800aa20:	b570      	push	{r4, r5, r6, lr}
 800aa22:	460c      	mov	r4, r1
 800aa24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa28:	4615      	mov	r5, r2
 800aa2a:	2900      	cmp	r1, #0
 800aa2c:	461e      	mov	r6, r3
 800aa2e:	b096      	sub	sp, #88	@ 0x58
 800aa30:	da0c      	bge.n	800aa4c <__swhatbuf_r+0x2c>
 800aa32:	89a3      	ldrh	r3, [r4, #12]
 800aa34:	2100      	movs	r1, #0
 800aa36:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800aa3a:	bf14      	ite	ne
 800aa3c:	2340      	movne	r3, #64	@ 0x40
 800aa3e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800aa42:	2000      	movs	r0, #0
 800aa44:	6031      	str	r1, [r6, #0]
 800aa46:	602b      	str	r3, [r5, #0]
 800aa48:	b016      	add	sp, #88	@ 0x58
 800aa4a:	bd70      	pop	{r4, r5, r6, pc}
 800aa4c:	466a      	mov	r2, sp
 800aa4e:	f000 f849 	bl	800aae4 <_fstat_r>
 800aa52:	2800      	cmp	r0, #0
 800aa54:	dbed      	blt.n	800aa32 <__swhatbuf_r+0x12>
 800aa56:	9901      	ldr	r1, [sp, #4]
 800aa58:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800aa5c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800aa60:	4259      	negs	r1, r3
 800aa62:	4159      	adcs	r1, r3
 800aa64:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aa68:	e7eb      	b.n	800aa42 <__swhatbuf_r+0x22>

0800aa6a <__smakebuf_r>:
 800aa6a:	898b      	ldrh	r3, [r1, #12]
 800aa6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aa6e:	079d      	lsls	r5, r3, #30
 800aa70:	4606      	mov	r6, r0
 800aa72:	460c      	mov	r4, r1
 800aa74:	d507      	bpl.n	800aa86 <__smakebuf_r+0x1c>
 800aa76:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800aa7a:	6023      	str	r3, [r4, #0]
 800aa7c:	6123      	str	r3, [r4, #16]
 800aa7e:	2301      	movs	r3, #1
 800aa80:	6163      	str	r3, [r4, #20]
 800aa82:	b003      	add	sp, #12
 800aa84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa86:	466a      	mov	r2, sp
 800aa88:	ab01      	add	r3, sp, #4
 800aa8a:	f7ff ffc9 	bl	800aa20 <__swhatbuf_r>
 800aa8e:	9f00      	ldr	r7, [sp, #0]
 800aa90:	4605      	mov	r5, r0
 800aa92:	4639      	mov	r1, r7
 800aa94:	4630      	mov	r0, r6
 800aa96:	f7fd fbe1 	bl	800825c <_malloc_r>
 800aa9a:	b948      	cbnz	r0, 800aab0 <__smakebuf_r+0x46>
 800aa9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aaa0:	059a      	lsls	r2, r3, #22
 800aaa2:	d4ee      	bmi.n	800aa82 <__smakebuf_r+0x18>
 800aaa4:	f023 0303 	bic.w	r3, r3, #3
 800aaa8:	f043 0302 	orr.w	r3, r3, #2
 800aaac:	81a3      	strh	r3, [r4, #12]
 800aaae:	e7e2      	b.n	800aa76 <__smakebuf_r+0xc>
 800aab0:	89a3      	ldrh	r3, [r4, #12]
 800aab2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800aab6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aaba:	81a3      	strh	r3, [r4, #12]
 800aabc:	9b01      	ldr	r3, [sp, #4]
 800aabe:	6020      	str	r0, [r4, #0]
 800aac0:	b15b      	cbz	r3, 800aada <__smakebuf_r+0x70>
 800aac2:	4630      	mov	r0, r6
 800aac4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aac8:	f000 f81e 	bl	800ab08 <_isatty_r>
 800aacc:	b128      	cbz	r0, 800aada <__smakebuf_r+0x70>
 800aace:	89a3      	ldrh	r3, [r4, #12]
 800aad0:	f023 0303 	bic.w	r3, r3, #3
 800aad4:	f043 0301 	orr.w	r3, r3, #1
 800aad8:	81a3      	strh	r3, [r4, #12]
 800aada:	89a3      	ldrh	r3, [r4, #12]
 800aadc:	431d      	orrs	r5, r3
 800aade:	81a5      	strh	r5, [r4, #12]
 800aae0:	e7cf      	b.n	800aa82 <__smakebuf_r+0x18>
	...

0800aae4 <_fstat_r>:
 800aae4:	b538      	push	{r3, r4, r5, lr}
 800aae6:	2300      	movs	r3, #0
 800aae8:	4d06      	ldr	r5, [pc, #24]	@ (800ab04 <_fstat_r+0x20>)
 800aaea:	4604      	mov	r4, r0
 800aaec:	4608      	mov	r0, r1
 800aaee:	4611      	mov	r1, r2
 800aaf0:	602b      	str	r3, [r5, #0]
 800aaf2:	f7f7 fa41 	bl	8001f78 <_fstat>
 800aaf6:	1c43      	adds	r3, r0, #1
 800aaf8:	d102      	bne.n	800ab00 <_fstat_r+0x1c>
 800aafa:	682b      	ldr	r3, [r5, #0]
 800aafc:	b103      	cbz	r3, 800ab00 <_fstat_r+0x1c>
 800aafe:	6023      	str	r3, [r4, #0]
 800ab00:	bd38      	pop	{r3, r4, r5, pc}
 800ab02:	bf00      	nop
 800ab04:	20001684 	.word	0x20001684

0800ab08 <_isatty_r>:
 800ab08:	b538      	push	{r3, r4, r5, lr}
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	4d05      	ldr	r5, [pc, #20]	@ (800ab24 <_isatty_r+0x1c>)
 800ab0e:	4604      	mov	r4, r0
 800ab10:	4608      	mov	r0, r1
 800ab12:	602b      	str	r3, [r5, #0]
 800ab14:	f7f7 fa3f 	bl	8001f96 <_isatty>
 800ab18:	1c43      	adds	r3, r0, #1
 800ab1a:	d102      	bne.n	800ab22 <_isatty_r+0x1a>
 800ab1c:	682b      	ldr	r3, [r5, #0]
 800ab1e:	b103      	cbz	r3, 800ab22 <_isatty_r+0x1a>
 800ab20:	6023      	str	r3, [r4, #0]
 800ab22:	bd38      	pop	{r3, r4, r5, pc}
 800ab24:	20001684 	.word	0x20001684

0800ab28 <atan2>:
 800ab28:	f000 b96a 	b.w	800ae00 <__ieee754_atan2>

0800ab2c <pow>:
 800ab2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab30:	4614      	mov	r4, r2
 800ab32:	461d      	mov	r5, r3
 800ab34:	4680      	mov	r8, r0
 800ab36:	4689      	mov	r9, r1
 800ab38:	f000 fa36 	bl	800afa8 <__ieee754_pow>
 800ab3c:	4622      	mov	r2, r4
 800ab3e:	4606      	mov	r6, r0
 800ab40:	460f      	mov	r7, r1
 800ab42:	462b      	mov	r3, r5
 800ab44:	4620      	mov	r0, r4
 800ab46:	4629      	mov	r1, r5
 800ab48:	f7f5 ff60 	bl	8000a0c <__aeabi_dcmpun>
 800ab4c:	bbc8      	cbnz	r0, 800abc2 <pow+0x96>
 800ab4e:	2200      	movs	r2, #0
 800ab50:	2300      	movs	r3, #0
 800ab52:	4640      	mov	r0, r8
 800ab54:	4649      	mov	r1, r9
 800ab56:	f7f5 ff27 	bl	80009a8 <__aeabi_dcmpeq>
 800ab5a:	b1b8      	cbz	r0, 800ab8c <pow+0x60>
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	2300      	movs	r3, #0
 800ab60:	4620      	mov	r0, r4
 800ab62:	4629      	mov	r1, r5
 800ab64:	f7f5 ff20 	bl	80009a8 <__aeabi_dcmpeq>
 800ab68:	2800      	cmp	r0, #0
 800ab6a:	d141      	bne.n	800abf0 <pow+0xc4>
 800ab6c:	4620      	mov	r0, r4
 800ab6e:	4629      	mov	r1, r5
 800ab70:	f000 f868 	bl	800ac44 <finite>
 800ab74:	b328      	cbz	r0, 800abc2 <pow+0x96>
 800ab76:	2200      	movs	r2, #0
 800ab78:	2300      	movs	r3, #0
 800ab7a:	4620      	mov	r0, r4
 800ab7c:	4629      	mov	r1, r5
 800ab7e:	f7f5 ff1d 	bl	80009bc <__aeabi_dcmplt>
 800ab82:	b1f0      	cbz	r0, 800abc2 <pow+0x96>
 800ab84:	f7fc fc5a 	bl	800743c <__errno>
 800ab88:	2322      	movs	r3, #34	@ 0x22
 800ab8a:	e019      	b.n	800abc0 <pow+0x94>
 800ab8c:	4630      	mov	r0, r6
 800ab8e:	4639      	mov	r1, r7
 800ab90:	f000 f858 	bl	800ac44 <finite>
 800ab94:	b9c8      	cbnz	r0, 800abca <pow+0x9e>
 800ab96:	4640      	mov	r0, r8
 800ab98:	4649      	mov	r1, r9
 800ab9a:	f000 f853 	bl	800ac44 <finite>
 800ab9e:	b1a0      	cbz	r0, 800abca <pow+0x9e>
 800aba0:	4620      	mov	r0, r4
 800aba2:	4629      	mov	r1, r5
 800aba4:	f000 f84e 	bl	800ac44 <finite>
 800aba8:	b178      	cbz	r0, 800abca <pow+0x9e>
 800abaa:	4632      	mov	r2, r6
 800abac:	463b      	mov	r3, r7
 800abae:	4630      	mov	r0, r6
 800abb0:	4639      	mov	r1, r7
 800abb2:	f7f5 ff2b 	bl	8000a0c <__aeabi_dcmpun>
 800abb6:	2800      	cmp	r0, #0
 800abb8:	d0e4      	beq.n	800ab84 <pow+0x58>
 800abba:	f7fc fc3f 	bl	800743c <__errno>
 800abbe:	2321      	movs	r3, #33	@ 0x21
 800abc0:	6003      	str	r3, [r0, #0]
 800abc2:	4630      	mov	r0, r6
 800abc4:	4639      	mov	r1, r7
 800abc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abca:	2200      	movs	r2, #0
 800abcc:	2300      	movs	r3, #0
 800abce:	4630      	mov	r0, r6
 800abd0:	4639      	mov	r1, r7
 800abd2:	f7f5 fee9 	bl	80009a8 <__aeabi_dcmpeq>
 800abd6:	2800      	cmp	r0, #0
 800abd8:	d0f3      	beq.n	800abc2 <pow+0x96>
 800abda:	4640      	mov	r0, r8
 800abdc:	4649      	mov	r1, r9
 800abde:	f000 f831 	bl	800ac44 <finite>
 800abe2:	2800      	cmp	r0, #0
 800abe4:	d0ed      	beq.n	800abc2 <pow+0x96>
 800abe6:	4620      	mov	r0, r4
 800abe8:	4629      	mov	r1, r5
 800abea:	f000 f82b 	bl	800ac44 <finite>
 800abee:	e7c8      	b.n	800ab82 <pow+0x56>
 800abf0:	2600      	movs	r6, #0
 800abf2:	4f01      	ldr	r7, [pc, #4]	@ (800abf8 <pow+0xcc>)
 800abf4:	e7e5      	b.n	800abc2 <pow+0x96>
 800abf6:	bf00      	nop
 800abf8:	3ff00000 	.word	0x3ff00000

0800abfc <sqrt>:
 800abfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abfe:	4606      	mov	r6, r0
 800ac00:	460f      	mov	r7, r1
 800ac02:	f000 f825 	bl	800ac50 <__ieee754_sqrt>
 800ac06:	4632      	mov	r2, r6
 800ac08:	4604      	mov	r4, r0
 800ac0a:	460d      	mov	r5, r1
 800ac0c:	463b      	mov	r3, r7
 800ac0e:	4630      	mov	r0, r6
 800ac10:	4639      	mov	r1, r7
 800ac12:	f7f5 fefb 	bl	8000a0c <__aeabi_dcmpun>
 800ac16:	b990      	cbnz	r0, 800ac3e <sqrt+0x42>
 800ac18:	2200      	movs	r2, #0
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	4630      	mov	r0, r6
 800ac1e:	4639      	mov	r1, r7
 800ac20:	f7f5 fecc 	bl	80009bc <__aeabi_dcmplt>
 800ac24:	b158      	cbz	r0, 800ac3e <sqrt+0x42>
 800ac26:	f7fc fc09 	bl	800743c <__errno>
 800ac2a:	2321      	movs	r3, #33	@ 0x21
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	6003      	str	r3, [r0, #0]
 800ac30:	2300      	movs	r3, #0
 800ac32:	4610      	mov	r0, r2
 800ac34:	4619      	mov	r1, r3
 800ac36:	f7f5 fd79 	bl	800072c <__aeabi_ddiv>
 800ac3a:	4604      	mov	r4, r0
 800ac3c:	460d      	mov	r5, r1
 800ac3e:	4620      	mov	r0, r4
 800ac40:	4629      	mov	r1, r5
 800ac42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ac44 <finite>:
 800ac44:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 800ac48:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800ac4c:	0fc0      	lsrs	r0, r0, #31
 800ac4e:	4770      	bx	lr

0800ac50 <__ieee754_sqrt>:
 800ac50:	4a67      	ldr	r2, [pc, #412]	@ (800adf0 <__ieee754_sqrt+0x1a0>)
 800ac52:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac56:	438a      	bics	r2, r1
 800ac58:	4606      	mov	r6, r0
 800ac5a:	460f      	mov	r7, r1
 800ac5c:	460b      	mov	r3, r1
 800ac5e:	4604      	mov	r4, r0
 800ac60:	d10e      	bne.n	800ac80 <__ieee754_sqrt+0x30>
 800ac62:	4602      	mov	r2, r0
 800ac64:	f7f5 fc38 	bl	80004d8 <__aeabi_dmul>
 800ac68:	4602      	mov	r2, r0
 800ac6a:	460b      	mov	r3, r1
 800ac6c:	4630      	mov	r0, r6
 800ac6e:	4639      	mov	r1, r7
 800ac70:	f7f5 fa7c 	bl	800016c <__adddf3>
 800ac74:	4606      	mov	r6, r0
 800ac76:	460f      	mov	r7, r1
 800ac78:	4630      	mov	r0, r6
 800ac7a:	4639      	mov	r1, r7
 800ac7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac80:	2900      	cmp	r1, #0
 800ac82:	dc0c      	bgt.n	800ac9e <__ieee754_sqrt+0x4e>
 800ac84:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800ac88:	4302      	orrs	r2, r0
 800ac8a:	d0f5      	beq.n	800ac78 <__ieee754_sqrt+0x28>
 800ac8c:	b189      	cbz	r1, 800acb2 <__ieee754_sqrt+0x62>
 800ac8e:	4602      	mov	r2, r0
 800ac90:	f7f5 fa6a 	bl	8000168 <__aeabi_dsub>
 800ac94:	4602      	mov	r2, r0
 800ac96:	460b      	mov	r3, r1
 800ac98:	f7f5 fd48 	bl	800072c <__aeabi_ddiv>
 800ac9c:	e7ea      	b.n	800ac74 <__ieee754_sqrt+0x24>
 800ac9e:	150a      	asrs	r2, r1, #20
 800aca0:	d115      	bne.n	800acce <__ieee754_sqrt+0x7e>
 800aca2:	2100      	movs	r1, #0
 800aca4:	e009      	b.n	800acba <__ieee754_sqrt+0x6a>
 800aca6:	0ae3      	lsrs	r3, r4, #11
 800aca8:	3a15      	subs	r2, #21
 800acaa:	0564      	lsls	r4, r4, #21
 800acac:	2b00      	cmp	r3, #0
 800acae:	d0fa      	beq.n	800aca6 <__ieee754_sqrt+0x56>
 800acb0:	e7f7      	b.n	800aca2 <__ieee754_sqrt+0x52>
 800acb2:	460a      	mov	r2, r1
 800acb4:	e7fa      	b.n	800acac <__ieee754_sqrt+0x5c>
 800acb6:	005b      	lsls	r3, r3, #1
 800acb8:	3101      	adds	r1, #1
 800acba:	02d8      	lsls	r0, r3, #11
 800acbc:	d5fb      	bpl.n	800acb6 <__ieee754_sqrt+0x66>
 800acbe:	1e48      	subs	r0, r1, #1
 800acc0:	1a12      	subs	r2, r2, r0
 800acc2:	f1c1 0020 	rsb	r0, r1, #32
 800acc6:	fa24 f000 	lsr.w	r0, r4, r0
 800acca:	4303      	orrs	r3, r0
 800accc:	408c      	lsls	r4, r1
 800acce:	2600      	movs	r6, #0
 800acd0:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800acd4:	2116      	movs	r1, #22
 800acd6:	07d2      	lsls	r2, r2, #31
 800acd8:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800acdc:	4632      	mov	r2, r6
 800acde:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ace2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ace6:	bf5c      	itt	pl
 800ace8:	005b      	lslpl	r3, r3, #1
 800acea:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800acee:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800acf2:	bf58      	it	pl
 800acf4:	0064      	lslpl	r4, r4, #1
 800acf6:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800acfa:	107f      	asrs	r7, r7, #1
 800acfc:	0064      	lsls	r4, r4, #1
 800acfe:	1815      	adds	r5, r2, r0
 800ad00:	429d      	cmp	r5, r3
 800ad02:	bfde      	ittt	le
 800ad04:	182a      	addle	r2, r5, r0
 800ad06:	1b5b      	suble	r3, r3, r5
 800ad08:	1836      	addle	r6, r6, r0
 800ad0a:	0fe5      	lsrs	r5, r4, #31
 800ad0c:	3901      	subs	r1, #1
 800ad0e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800ad12:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800ad16:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800ad1a:	d1f0      	bne.n	800acfe <__ieee754_sqrt+0xae>
 800ad1c:	460d      	mov	r5, r1
 800ad1e:	f04f 0a20 	mov.w	sl, #32
 800ad22:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800ad26:	429a      	cmp	r2, r3
 800ad28:	eb01 0c00 	add.w	ip, r1, r0
 800ad2c:	db02      	blt.n	800ad34 <__ieee754_sqrt+0xe4>
 800ad2e:	d113      	bne.n	800ad58 <__ieee754_sqrt+0x108>
 800ad30:	45a4      	cmp	ip, r4
 800ad32:	d811      	bhi.n	800ad58 <__ieee754_sqrt+0x108>
 800ad34:	f1bc 0f00 	cmp.w	ip, #0
 800ad38:	eb0c 0100 	add.w	r1, ip, r0
 800ad3c:	da42      	bge.n	800adc4 <__ieee754_sqrt+0x174>
 800ad3e:	2900      	cmp	r1, #0
 800ad40:	db40      	blt.n	800adc4 <__ieee754_sqrt+0x174>
 800ad42:	f102 0e01 	add.w	lr, r2, #1
 800ad46:	1a9b      	subs	r3, r3, r2
 800ad48:	4672      	mov	r2, lr
 800ad4a:	45a4      	cmp	ip, r4
 800ad4c:	bf88      	it	hi
 800ad4e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800ad52:	eba4 040c 	sub.w	r4, r4, ip
 800ad56:	4405      	add	r5, r0
 800ad58:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 800ad5c:	f1ba 0a01 	subs.w	sl, sl, #1
 800ad60:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 800ad64:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800ad68:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800ad6c:	d1db      	bne.n	800ad26 <__ieee754_sqrt+0xd6>
 800ad6e:	431c      	orrs	r4, r3
 800ad70:	d01a      	beq.n	800ada8 <__ieee754_sqrt+0x158>
 800ad72:	4c20      	ldr	r4, [pc, #128]	@ (800adf4 <__ieee754_sqrt+0x1a4>)
 800ad74:	f8df b080 	ldr.w	fp, [pc, #128]	@ 800adf8 <__ieee754_sqrt+0x1a8>
 800ad78:	e9d4 0100 	ldrd	r0, r1, [r4]
 800ad7c:	e9db 2300 	ldrd	r2, r3, [fp]
 800ad80:	f7f5 f9f2 	bl	8000168 <__aeabi_dsub>
 800ad84:	e9d4 8900 	ldrd	r8, r9, [r4]
 800ad88:	4602      	mov	r2, r0
 800ad8a:	460b      	mov	r3, r1
 800ad8c:	4640      	mov	r0, r8
 800ad8e:	4649      	mov	r1, r9
 800ad90:	f7f5 fe1e 	bl	80009d0 <__aeabi_dcmple>
 800ad94:	b140      	cbz	r0, 800ada8 <__ieee754_sqrt+0x158>
 800ad96:	e9d4 0100 	ldrd	r0, r1, [r4]
 800ad9a:	e9db 2300 	ldrd	r2, r3, [fp]
 800ad9e:	f1b5 3fff 	cmp.w	r5, #4294967295
 800ada2:	d111      	bne.n	800adc8 <__ieee754_sqrt+0x178>
 800ada4:	4655      	mov	r5, sl
 800ada6:	3601      	adds	r6, #1
 800ada8:	1072      	asrs	r2, r6, #1
 800adaa:	086b      	lsrs	r3, r5, #1
 800adac:	07f1      	lsls	r1, r6, #31
 800adae:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800adb2:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800adb6:	bf48      	it	mi
 800adb8:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800adbc:	4618      	mov	r0, r3
 800adbe:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 800adc2:	e757      	b.n	800ac74 <__ieee754_sqrt+0x24>
 800adc4:	4696      	mov	lr, r2
 800adc6:	e7be      	b.n	800ad46 <__ieee754_sqrt+0xf6>
 800adc8:	f7f5 f9d0 	bl	800016c <__adddf3>
 800adcc:	e9d4 8900 	ldrd	r8, r9, [r4]
 800add0:	4602      	mov	r2, r0
 800add2:	460b      	mov	r3, r1
 800add4:	4640      	mov	r0, r8
 800add6:	4649      	mov	r1, r9
 800add8:	f7f5 fdf0 	bl	80009bc <__aeabi_dcmplt>
 800addc:	b120      	cbz	r0, 800ade8 <__ieee754_sqrt+0x198>
 800adde:	1ca8      	adds	r0, r5, #2
 800ade0:	bf08      	it	eq
 800ade2:	3601      	addeq	r6, #1
 800ade4:	3502      	adds	r5, #2
 800ade6:	e7df      	b.n	800ada8 <__ieee754_sqrt+0x158>
 800ade8:	1c6b      	adds	r3, r5, #1
 800adea:	f023 0501 	bic.w	r5, r3, #1
 800adee:	e7db      	b.n	800ada8 <__ieee754_sqrt+0x158>
 800adf0:	7ff00000 	.word	0x7ff00000
 800adf4:	200001e0 	.word	0x200001e0
 800adf8:	200001d8 	.word	0x200001d8
 800adfc:	00000000 	.word	0x00000000

0800ae00 <__ieee754_atan2>:
 800ae00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae04:	4617      	mov	r7, r2
 800ae06:	4690      	mov	r8, r2
 800ae08:	4699      	mov	r9, r3
 800ae0a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800ae0e:	427b      	negs	r3, r7
 800ae10:	f8df a184 	ldr.w	sl, [pc, #388]	@ 800af98 <__ieee754_atan2+0x198>
 800ae14:	433b      	orrs	r3, r7
 800ae16:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800ae1a:	4553      	cmp	r3, sl
 800ae1c:	4604      	mov	r4, r0
 800ae1e:	460d      	mov	r5, r1
 800ae20:	d809      	bhi.n	800ae36 <__ieee754_atan2+0x36>
 800ae22:	4246      	negs	r6, r0
 800ae24:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ae28:	4306      	orrs	r6, r0
 800ae2a:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 800ae2e:	4556      	cmp	r6, sl
 800ae30:	468e      	mov	lr, r1
 800ae32:	4683      	mov	fp, r0
 800ae34:	d908      	bls.n	800ae48 <__ieee754_atan2+0x48>
 800ae36:	4642      	mov	r2, r8
 800ae38:	464b      	mov	r3, r9
 800ae3a:	4620      	mov	r0, r4
 800ae3c:	4629      	mov	r1, r5
 800ae3e:	f7f5 f995 	bl	800016c <__adddf3>
 800ae42:	4604      	mov	r4, r0
 800ae44:	460d      	mov	r5, r1
 800ae46:	e016      	b.n	800ae76 <__ieee754_atan2+0x76>
 800ae48:	f109 4640 	add.w	r6, r9, #3221225472	@ 0xc0000000
 800ae4c:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 800ae50:	433e      	orrs	r6, r7
 800ae52:	d103      	bne.n	800ae5c <__ieee754_atan2+0x5c>
 800ae54:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae58:	f000 bdce 	b.w	800b9f8 <atan>
 800ae5c:	ea4f 76a9 	mov.w	r6, r9, asr #30
 800ae60:	f006 0602 	and.w	r6, r6, #2
 800ae64:	ea53 0b0b 	orrs.w	fp, r3, fp
 800ae68:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800ae6c:	d107      	bne.n	800ae7e <__ieee754_atan2+0x7e>
 800ae6e:	2e02      	cmp	r6, #2
 800ae70:	d064      	beq.n	800af3c <__ieee754_atan2+0x13c>
 800ae72:	2e03      	cmp	r6, #3
 800ae74:	d066      	beq.n	800af44 <__ieee754_atan2+0x144>
 800ae76:	4620      	mov	r0, r4
 800ae78:	4629      	mov	r1, r5
 800ae7a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae7e:	4317      	orrs	r7, r2
 800ae80:	d106      	bne.n	800ae90 <__ieee754_atan2+0x90>
 800ae82:	f1be 0f00 	cmp.w	lr, #0
 800ae86:	da68      	bge.n	800af5a <__ieee754_atan2+0x15a>
 800ae88:	a537      	add	r5, pc, #220	@ (adr r5, 800af68 <__ieee754_atan2+0x168>)
 800ae8a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ae8e:	e7f2      	b.n	800ae76 <__ieee754_atan2+0x76>
 800ae90:	4552      	cmp	r2, sl
 800ae92:	d10f      	bne.n	800aeb4 <__ieee754_atan2+0xb4>
 800ae94:	4293      	cmp	r3, r2
 800ae96:	f106 36ff 	add.w	r6, r6, #4294967295
 800ae9a:	d107      	bne.n	800aeac <__ieee754_atan2+0xac>
 800ae9c:	2e02      	cmp	r6, #2
 800ae9e:	d855      	bhi.n	800af4c <__ieee754_atan2+0x14c>
 800aea0:	4b3e      	ldr	r3, [pc, #248]	@ (800af9c <__ieee754_atan2+0x19c>)
 800aea2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800aea6:	e9d3 4500 	ldrd	r4, r5, [r3]
 800aeaa:	e7e4      	b.n	800ae76 <__ieee754_atan2+0x76>
 800aeac:	2e02      	cmp	r6, #2
 800aeae:	d851      	bhi.n	800af54 <__ieee754_atan2+0x154>
 800aeb0:	4b3b      	ldr	r3, [pc, #236]	@ (800afa0 <__ieee754_atan2+0x1a0>)
 800aeb2:	e7f6      	b.n	800aea2 <__ieee754_atan2+0xa2>
 800aeb4:	4553      	cmp	r3, sl
 800aeb6:	d0e4      	beq.n	800ae82 <__ieee754_atan2+0x82>
 800aeb8:	1a9b      	subs	r3, r3, r2
 800aeba:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800aebe:	ea4f 5223 	mov.w	r2, r3, asr #20
 800aec2:	da21      	bge.n	800af08 <__ieee754_atan2+0x108>
 800aec4:	f1b9 0f00 	cmp.w	r9, #0
 800aec8:	da01      	bge.n	800aece <__ieee754_atan2+0xce>
 800aeca:	323c      	adds	r2, #60	@ 0x3c
 800aecc:	db20      	blt.n	800af10 <__ieee754_atan2+0x110>
 800aece:	4642      	mov	r2, r8
 800aed0:	464b      	mov	r3, r9
 800aed2:	4620      	mov	r0, r4
 800aed4:	4629      	mov	r1, r5
 800aed6:	f7f5 fc29 	bl	800072c <__aeabi_ddiv>
 800aeda:	f000 ff1d 	bl	800bd18 <fabs>
 800aede:	f000 fd8b 	bl	800b9f8 <atan>
 800aee2:	4604      	mov	r4, r0
 800aee4:	460d      	mov	r5, r1
 800aee6:	2e01      	cmp	r6, #1
 800aee8:	d015      	beq.n	800af16 <__ieee754_atan2+0x116>
 800aeea:	2e02      	cmp	r6, #2
 800aeec:	d017      	beq.n	800af1e <__ieee754_atan2+0x11e>
 800aeee:	2e00      	cmp	r6, #0
 800aef0:	d0c1      	beq.n	800ae76 <__ieee754_atan2+0x76>
 800aef2:	a31f      	add	r3, pc, #124	@ (adr r3, 800af70 <__ieee754_atan2+0x170>)
 800aef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aef8:	4620      	mov	r0, r4
 800aefa:	4629      	mov	r1, r5
 800aefc:	f7f5 f934 	bl	8000168 <__aeabi_dsub>
 800af00:	a31d      	add	r3, pc, #116	@ (adr r3, 800af78 <__ieee754_atan2+0x178>)
 800af02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af06:	e016      	b.n	800af36 <__ieee754_atan2+0x136>
 800af08:	a51d      	add	r5, pc, #116	@ (adr r5, 800af80 <__ieee754_atan2+0x180>)
 800af0a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800af0e:	e7ea      	b.n	800aee6 <__ieee754_atan2+0xe6>
 800af10:	2400      	movs	r4, #0
 800af12:	2500      	movs	r5, #0
 800af14:	e7e7      	b.n	800aee6 <__ieee754_atan2+0xe6>
 800af16:	f105 4300 	add.w	r3, r5, #2147483648	@ 0x80000000
 800af1a:	461d      	mov	r5, r3
 800af1c:	e7ab      	b.n	800ae76 <__ieee754_atan2+0x76>
 800af1e:	a314      	add	r3, pc, #80	@ (adr r3, 800af70 <__ieee754_atan2+0x170>)
 800af20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af24:	4620      	mov	r0, r4
 800af26:	4629      	mov	r1, r5
 800af28:	f7f5 f91e 	bl	8000168 <__aeabi_dsub>
 800af2c:	4602      	mov	r2, r0
 800af2e:	460b      	mov	r3, r1
 800af30:	a111      	add	r1, pc, #68	@ (adr r1, 800af78 <__ieee754_atan2+0x178>)
 800af32:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af36:	f7f5 f917 	bl	8000168 <__aeabi_dsub>
 800af3a:	e782      	b.n	800ae42 <__ieee754_atan2+0x42>
 800af3c:	a50e      	add	r5, pc, #56	@ (adr r5, 800af78 <__ieee754_atan2+0x178>)
 800af3e:	e9d5 4500 	ldrd	r4, r5, [r5]
 800af42:	e798      	b.n	800ae76 <__ieee754_atan2+0x76>
 800af44:	a510      	add	r5, pc, #64	@ (adr r5, 800af88 <__ieee754_atan2+0x188>)
 800af46:	e9d5 4500 	ldrd	r4, r5, [r5]
 800af4a:	e794      	b.n	800ae76 <__ieee754_atan2+0x76>
 800af4c:	a510      	add	r5, pc, #64	@ (adr r5, 800af90 <__ieee754_atan2+0x190>)
 800af4e:	e9d5 4500 	ldrd	r4, r5, [r5]
 800af52:	e790      	b.n	800ae76 <__ieee754_atan2+0x76>
 800af54:	2400      	movs	r4, #0
 800af56:	2500      	movs	r5, #0
 800af58:	e78d      	b.n	800ae76 <__ieee754_atan2+0x76>
 800af5a:	a509      	add	r5, pc, #36	@ (adr r5, 800af80 <__ieee754_atan2+0x180>)
 800af5c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800af60:	e789      	b.n	800ae76 <__ieee754_atan2+0x76>
 800af62:	bf00      	nop
 800af64:	f3af 8000 	nop.w
 800af68:	54442d18 	.word	0x54442d18
 800af6c:	bff921fb 	.word	0xbff921fb
 800af70:	33145c07 	.word	0x33145c07
 800af74:	3ca1a626 	.word	0x3ca1a626
 800af78:	54442d18 	.word	0x54442d18
 800af7c:	400921fb 	.word	0x400921fb
 800af80:	54442d18 	.word	0x54442d18
 800af84:	3ff921fb 	.word	0x3ff921fb
 800af88:	54442d18 	.word	0x54442d18
 800af8c:	c00921fb 	.word	0xc00921fb
 800af90:	54442d18 	.word	0x54442d18
 800af94:	3fe921fb 	.word	0x3fe921fb
 800af98:	7ff00000 	.word	0x7ff00000
 800af9c:	0800c3a8 	.word	0x0800c3a8
 800afa0:	0800c390 	.word	0x0800c390
 800afa4:	00000000 	.word	0x00000000

0800afa8 <__ieee754_pow>:
 800afa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afac:	b091      	sub	sp, #68	@ 0x44
 800afae:	e9cd 2300 	strd	r2, r3, [sp]
 800afb2:	468b      	mov	fp, r1
 800afb4:	e9dd 1800 	ldrd	r1, r8, [sp]
 800afb8:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 800afbc:	4682      	mov	sl, r0
 800afbe:	ea57 0001 	orrs.w	r0, r7, r1
 800afc2:	d112      	bne.n	800afea <__ieee754_pow+0x42>
 800afc4:	4653      	mov	r3, sl
 800afc6:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 800afca:	18db      	adds	r3, r3, r3
 800afcc:	4152      	adcs	r2, r2
 800afce:	4298      	cmp	r0, r3
 800afd0:	4b91      	ldr	r3, [pc, #580]	@ (800b218 <__ieee754_pow+0x270>)
 800afd2:	4193      	sbcs	r3, r2
 800afd4:	f080 84ce 	bcs.w	800b974 <__ieee754_pow+0x9cc>
 800afd8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800afdc:	4650      	mov	r0, sl
 800afde:	4659      	mov	r1, fp
 800afe0:	f7f5 f8c4 	bl	800016c <__adddf3>
 800afe4:	b011      	add	sp, #68	@ 0x44
 800afe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afea:	4b8c      	ldr	r3, [pc, #560]	@ (800b21c <__ieee754_pow+0x274>)
 800afec:	f02b 4600 	bic.w	r6, fp, #2147483648	@ 0x80000000
 800aff0:	429e      	cmp	r6, r3
 800aff2:	465d      	mov	r5, fp
 800aff4:	46d1      	mov	r9, sl
 800aff6:	d807      	bhi.n	800b008 <__ieee754_pow+0x60>
 800aff8:	d102      	bne.n	800b000 <__ieee754_pow+0x58>
 800affa:	f1ba 0f00 	cmp.w	sl, #0
 800affe:	d1eb      	bne.n	800afd8 <__ieee754_pow+0x30>
 800b000:	429f      	cmp	r7, r3
 800b002:	d801      	bhi.n	800b008 <__ieee754_pow+0x60>
 800b004:	d10f      	bne.n	800b026 <__ieee754_pow+0x7e>
 800b006:	b171      	cbz	r1, 800b026 <__ieee754_pow+0x7e>
 800b008:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800b00c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800b010:	ea55 0509 	orrs.w	r5, r5, r9
 800b014:	d1e0      	bne.n	800afd8 <__ieee754_pow+0x30>
 800b016:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b01a:	18db      	adds	r3, r3, r3
 800b01c:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800b020:	4152      	adcs	r2, r2
 800b022:	429d      	cmp	r5, r3
 800b024:	e7d4      	b.n	800afd0 <__ieee754_pow+0x28>
 800b026:	2d00      	cmp	r5, #0
 800b028:	4633      	mov	r3, r6
 800b02a:	da39      	bge.n	800b0a0 <__ieee754_pow+0xf8>
 800b02c:	4a7c      	ldr	r2, [pc, #496]	@ (800b220 <__ieee754_pow+0x278>)
 800b02e:	4297      	cmp	r7, r2
 800b030:	d84e      	bhi.n	800b0d0 <__ieee754_pow+0x128>
 800b032:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800b036:	4297      	cmp	r7, r2
 800b038:	f240 84ab 	bls.w	800b992 <__ieee754_pow+0x9ea>
 800b03c:	153a      	asrs	r2, r7, #20
 800b03e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800b042:	2a14      	cmp	r2, #20
 800b044:	dd0f      	ble.n	800b066 <__ieee754_pow+0xbe>
 800b046:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800b04a:	fa21 f402 	lsr.w	r4, r1, r2
 800b04e:	fa04 f202 	lsl.w	r2, r4, r2
 800b052:	428a      	cmp	r2, r1
 800b054:	f040 849d 	bne.w	800b992 <__ieee754_pow+0x9ea>
 800b058:	f004 0401 	and.w	r4, r4, #1
 800b05c:	f1c4 0402 	rsb	r4, r4, #2
 800b060:	2900      	cmp	r1, #0
 800b062:	d15a      	bne.n	800b11a <__ieee754_pow+0x172>
 800b064:	e00e      	b.n	800b084 <__ieee754_pow+0xdc>
 800b066:	2900      	cmp	r1, #0
 800b068:	d156      	bne.n	800b118 <__ieee754_pow+0x170>
 800b06a:	f1c2 0214 	rsb	r2, r2, #20
 800b06e:	fa47 f402 	asr.w	r4, r7, r2
 800b072:	fa04 f202 	lsl.w	r2, r4, r2
 800b076:	42ba      	cmp	r2, r7
 800b078:	f040 8488 	bne.w	800b98c <__ieee754_pow+0x9e4>
 800b07c:	f004 0401 	and.w	r4, r4, #1
 800b080:	f1c4 0402 	rsb	r4, r4, #2
 800b084:	4a67      	ldr	r2, [pc, #412]	@ (800b224 <__ieee754_pow+0x27c>)
 800b086:	4297      	cmp	r7, r2
 800b088:	d130      	bne.n	800b0ec <__ieee754_pow+0x144>
 800b08a:	f1b8 0f00 	cmp.w	r8, #0
 800b08e:	f280 8479 	bge.w	800b984 <__ieee754_pow+0x9dc>
 800b092:	4652      	mov	r2, sl
 800b094:	465b      	mov	r3, fp
 800b096:	2000      	movs	r0, #0
 800b098:	4962      	ldr	r1, [pc, #392]	@ (800b224 <__ieee754_pow+0x27c>)
 800b09a:	f7f5 fb47 	bl	800072c <__aeabi_ddiv>
 800b09e:	e7a1      	b.n	800afe4 <__ieee754_pow+0x3c>
 800b0a0:	2400      	movs	r4, #0
 800b0a2:	2900      	cmp	r1, #0
 800b0a4:	d139      	bne.n	800b11a <__ieee754_pow+0x172>
 800b0a6:	4a5d      	ldr	r2, [pc, #372]	@ (800b21c <__ieee754_pow+0x274>)
 800b0a8:	4297      	cmp	r7, r2
 800b0aa:	d1eb      	bne.n	800b084 <__ieee754_pow+0xdc>
 800b0ac:	f106 4340 	add.w	r3, r6, #3221225472	@ 0xc0000000
 800b0b0:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 800b0b4:	ea53 0309 	orrs.w	r3, r3, r9
 800b0b8:	f000 845c 	beq.w	800b974 <__ieee754_pow+0x9cc>
 800b0bc:	4b5a      	ldr	r3, [pc, #360]	@ (800b228 <__ieee754_pow+0x280>)
 800b0be:	429e      	cmp	r6, r3
 800b0c0:	d908      	bls.n	800b0d4 <__ieee754_pow+0x12c>
 800b0c2:	f1b8 0f00 	cmp.w	r8, #0
 800b0c6:	f2c0 8459 	blt.w	800b97c <__ieee754_pow+0x9d4>
 800b0ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b0ce:	e789      	b.n	800afe4 <__ieee754_pow+0x3c>
 800b0d0:	2402      	movs	r4, #2
 800b0d2:	e7e6      	b.n	800b0a2 <__ieee754_pow+0xfa>
 800b0d4:	f1b8 0f00 	cmp.w	r8, #0
 800b0d8:	f04f 0000 	mov.w	r0, #0
 800b0dc:	f04f 0100 	mov.w	r1, #0
 800b0e0:	da80      	bge.n	800afe4 <__ieee754_pow+0x3c>
 800b0e2:	e9dd 0300 	ldrd	r0, r3, [sp]
 800b0e6:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800b0ea:	e77b      	b.n	800afe4 <__ieee754_pow+0x3c>
 800b0ec:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 800b0f0:	d106      	bne.n	800b100 <__ieee754_pow+0x158>
 800b0f2:	4652      	mov	r2, sl
 800b0f4:	465b      	mov	r3, fp
 800b0f6:	4650      	mov	r0, sl
 800b0f8:	4659      	mov	r1, fp
 800b0fa:	f7f5 f9ed 	bl	80004d8 <__aeabi_dmul>
 800b0fe:	e771      	b.n	800afe4 <__ieee754_pow+0x3c>
 800b100:	4a4a      	ldr	r2, [pc, #296]	@ (800b22c <__ieee754_pow+0x284>)
 800b102:	4590      	cmp	r8, r2
 800b104:	d109      	bne.n	800b11a <__ieee754_pow+0x172>
 800b106:	2d00      	cmp	r5, #0
 800b108:	db07      	blt.n	800b11a <__ieee754_pow+0x172>
 800b10a:	4650      	mov	r0, sl
 800b10c:	4659      	mov	r1, fp
 800b10e:	b011      	add	sp, #68	@ 0x44
 800b110:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b114:	f7ff bd9c 	b.w	800ac50 <__ieee754_sqrt>
 800b118:	2400      	movs	r4, #0
 800b11a:	4650      	mov	r0, sl
 800b11c:	4659      	mov	r1, fp
 800b11e:	9302      	str	r3, [sp, #8]
 800b120:	f000 fdfa 	bl	800bd18 <fabs>
 800b124:	9b02      	ldr	r3, [sp, #8]
 800b126:	f1b9 0f00 	cmp.w	r9, #0
 800b12a:	d127      	bne.n	800b17c <__ieee754_pow+0x1d4>
 800b12c:	4a3d      	ldr	r2, [pc, #244]	@ (800b224 <__ieee754_pow+0x27c>)
 800b12e:	f025 4c40 	bic.w	ip, r5, #3221225472	@ 0xc0000000
 800b132:	4594      	cmp	ip, r2
 800b134:	d000      	beq.n	800b138 <__ieee754_pow+0x190>
 800b136:	bb0e      	cbnz	r6, 800b17c <__ieee754_pow+0x1d4>
 800b138:	f1b8 0f00 	cmp.w	r8, #0
 800b13c:	da05      	bge.n	800b14a <__ieee754_pow+0x1a2>
 800b13e:	4602      	mov	r2, r0
 800b140:	460b      	mov	r3, r1
 800b142:	2000      	movs	r0, #0
 800b144:	4937      	ldr	r1, [pc, #220]	@ (800b224 <__ieee754_pow+0x27c>)
 800b146:	f7f5 faf1 	bl	800072c <__aeabi_ddiv>
 800b14a:	2d00      	cmp	r5, #0
 800b14c:	f6bf af4a 	bge.w	800afe4 <__ieee754_pow+0x3c>
 800b150:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 800b154:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 800b158:	4326      	orrs	r6, r4
 800b15a:	d108      	bne.n	800b16e <__ieee754_pow+0x1c6>
 800b15c:	4602      	mov	r2, r0
 800b15e:	460b      	mov	r3, r1
 800b160:	4610      	mov	r0, r2
 800b162:	4619      	mov	r1, r3
 800b164:	f7f5 f800 	bl	8000168 <__aeabi_dsub>
 800b168:	4602      	mov	r2, r0
 800b16a:	460b      	mov	r3, r1
 800b16c:	e795      	b.n	800b09a <__ieee754_pow+0xf2>
 800b16e:	2c01      	cmp	r4, #1
 800b170:	f47f af38 	bne.w	800afe4 <__ieee754_pow+0x3c>
 800b174:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b178:	4619      	mov	r1, r3
 800b17a:	e733      	b.n	800afe4 <__ieee754_pow+0x3c>
 800b17c:	0fea      	lsrs	r2, r5, #31
 800b17e:	3a01      	subs	r2, #1
 800b180:	ea52 0c04 	orrs.w	ip, r2, r4
 800b184:	d102      	bne.n	800b18c <__ieee754_pow+0x1e4>
 800b186:	4652      	mov	r2, sl
 800b188:	465b      	mov	r3, fp
 800b18a:	e7e9      	b.n	800b160 <__ieee754_pow+0x1b8>
 800b18c:	f04f 0900 	mov.w	r9, #0
 800b190:	3c01      	subs	r4, #1
 800b192:	4314      	orrs	r4, r2
 800b194:	bf14      	ite	ne
 800b196:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 800b224 <__ieee754_pow+0x27c>
 800b19a:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 800b230 <__ieee754_pow+0x288>
 800b19e:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 800b1a2:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 800b1a6:	f240 8107 	bls.w	800b3b8 <__ieee754_pow+0x410>
 800b1aa:	4b22      	ldr	r3, [pc, #136]	@ (800b234 <__ieee754_pow+0x28c>)
 800b1ac:	429f      	cmp	r7, r3
 800b1ae:	4b1e      	ldr	r3, [pc, #120]	@ (800b228 <__ieee754_pow+0x280>)
 800b1b0:	d913      	bls.n	800b1da <__ieee754_pow+0x232>
 800b1b2:	429e      	cmp	r6, r3
 800b1b4:	d808      	bhi.n	800b1c8 <__ieee754_pow+0x220>
 800b1b6:	f1b8 0f00 	cmp.w	r8, #0
 800b1ba:	da08      	bge.n	800b1ce <__ieee754_pow+0x226>
 800b1bc:	2000      	movs	r0, #0
 800b1be:	b011      	add	sp, #68	@ 0x44
 800b1c0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1c4:	f000 be44 	b.w	800be50 <__math_oflow>
 800b1c8:	f1b8 0f00 	cmp.w	r8, #0
 800b1cc:	dcf6      	bgt.n	800b1bc <__ieee754_pow+0x214>
 800b1ce:	2000      	movs	r0, #0
 800b1d0:	b011      	add	sp, #68	@ 0x44
 800b1d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1d6:	f000 be36 	b.w	800be46 <__math_uflow>
 800b1da:	429e      	cmp	r6, r3
 800b1dc:	d20c      	bcs.n	800b1f8 <__ieee754_pow+0x250>
 800b1de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	f7f5 fbe9 	bl	80009bc <__aeabi_dcmplt>
 800b1ea:	3800      	subs	r0, #0
 800b1ec:	bf18      	it	ne
 800b1ee:	2001      	movne	r0, #1
 800b1f0:	f1b8 0f00 	cmp.w	r8, #0
 800b1f4:	daec      	bge.n	800b1d0 <__ieee754_pow+0x228>
 800b1f6:	e7e2      	b.n	800b1be <__ieee754_pow+0x216>
 800b1f8:	4b0a      	ldr	r3, [pc, #40]	@ (800b224 <__ieee754_pow+0x27c>)
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	429e      	cmp	r6, r3
 800b1fe:	d91b      	bls.n	800b238 <__ieee754_pow+0x290>
 800b200:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b204:	2300      	movs	r3, #0
 800b206:	f7f5 fbd9 	bl	80009bc <__aeabi_dcmplt>
 800b20a:	3800      	subs	r0, #0
 800b20c:	bf18      	it	ne
 800b20e:	2001      	movne	r0, #1
 800b210:	f1b8 0f00 	cmp.w	r8, #0
 800b214:	dcd3      	bgt.n	800b1be <__ieee754_pow+0x216>
 800b216:	e7db      	b.n	800b1d0 <__ieee754_pow+0x228>
 800b218:	fff00000 	.word	0xfff00000
 800b21c:	7ff00000 	.word	0x7ff00000
 800b220:	433fffff 	.word	0x433fffff
 800b224:	3ff00000 	.word	0x3ff00000
 800b228:	3fefffff 	.word	0x3fefffff
 800b22c:	3fe00000 	.word	0x3fe00000
 800b230:	bff00000 	.word	0xbff00000
 800b234:	43f00000 	.word	0x43f00000
 800b238:	4b5b      	ldr	r3, [pc, #364]	@ (800b3a8 <__ieee754_pow+0x400>)
 800b23a:	f7f4 ff95 	bl	8000168 <__aeabi_dsub>
 800b23e:	a352      	add	r3, pc, #328	@ (adr r3, 800b388 <__ieee754_pow+0x3e0>)
 800b240:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b244:	4604      	mov	r4, r0
 800b246:	460d      	mov	r5, r1
 800b248:	f7f5 f946 	bl	80004d8 <__aeabi_dmul>
 800b24c:	a350      	add	r3, pc, #320	@ (adr r3, 800b390 <__ieee754_pow+0x3e8>)
 800b24e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b252:	4606      	mov	r6, r0
 800b254:	460f      	mov	r7, r1
 800b256:	4620      	mov	r0, r4
 800b258:	4629      	mov	r1, r5
 800b25a:	f7f5 f93d 	bl	80004d8 <__aeabi_dmul>
 800b25e:	2200      	movs	r2, #0
 800b260:	4682      	mov	sl, r0
 800b262:	468b      	mov	fp, r1
 800b264:	4620      	mov	r0, r4
 800b266:	4629      	mov	r1, r5
 800b268:	4b50      	ldr	r3, [pc, #320]	@ (800b3ac <__ieee754_pow+0x404>)
 800b26a:	f7f5 f935 	bl	80004d8 <__aeabi_dmul>
 800b26e:	4602      	mov	r2, r0
 800b270:	460b      	mov	r3, r1
 800b272:	a149      	add	r1, pc, #292	@ (adr r1, 800b398 <__ieee754_pow+0x3f0>)
 800b274:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b278:	f7f4 ff76 	bl	8000168 <__aeabi_dsub>
 800b27c:	4622      	mov	r2, r4
 800b27e:	462b      	mov	r3, r5
 800b280:	f7f5 f92a 	bl	80004d8 <__aeabi_dmul>
 800b284:	4602      	mov	r2, r0
 800b286:	460b      	mov	r3, r1
 800b288:	2000      	movs	r0, #0
 800b28a:	4949      	ldr	r1, [pc, #292]	@ (800b3b0 <__ieee754_pow+0x408>)
 800b28c:	f7f4 ff6c 	bl	8000168 <__aeabi_dsub>
 800b290:	4622      	mov	r2, r4
 800b292:	4680      	mov	r8, r0
 800b294:	4689      	mov	r9, r1
 800b296:	462b      	mov	r3, r5
 800b298:	4620      	mov	r0, r4
 800b29a:	4629      	mov	r1, r5
 800b29c:	f7f5 f91c 	bl	80004d8 <__aeabi_dmul>
 800b2a0:	4602      	mov	r2, r0
 800b2a2:	460b      	mov	r3, r1
 800b2a4:	4640      	mov	r0, r8
 800b2a6:	4649      	mov	r1, r9
 800b2a8:	f7f5 f916 	bl	80004d8 <__aeabi_dmul>
 800b2ac:	a33c      	add	r3, pc, #240	@ (adr r3, 800b3a0 <__ieee754_pow+0x3f8>)
 800b2ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2b2:	f7f5 f911 	bl	80004d8 <__aeabi_dmul>
 800b2b6:	4602      	mov	r2, r0
 800b2b8:	460b      	mov	r3, r1
 800b2ba:	4650      	mov	r0, sl
 800b2bc:	4659      	mov	r1, fp
 800b2be:	f7f4 ff53 	bl	8000168 <__aeabi_dsub>
 800b2c2:	2400      	movs	r4, #0
 800b2c4:	4602      	mov	r2, r0
 800b2c6:	460b      	mov	r3, r1
 800b2c8:	4680      	mov	r8, r0
 800b2ca:	4689      	mov	r9, r1
 800b2cc:	4630      	mov	r0, r6
 800b2ce:	4639      	mov	r1, r7
 800b2d0:	f7f4 ff4c 	bl	800016c <__adddf3>
 800b2d4:	4632      	mov	r2, r6
 800b2d6:	463b      	mov	r3, r7
 800b2d8:	4620      	mov	r0, r4
 800b2da:	460d      	mov	r5, r1
 800b2dc:	f7f4 ff44 	bl	8000168 <__aeabi_dsub>
 800b2e0:	4602      	mov	r2, r0
 800b2e2:	460b      	mov	r3, r1
 800b2e4:	4640      	mov	r0, r8
 800b2e6:	4649      	mov	r1, r9
 800b2e8:	f7f4 ff3e 	bl	8000168 <__aeabi_dsub>
 800b2ec:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b2f0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	9304      	str	r3, [sp, #16]
 800b2f8:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800b2fc:	4606      	mov	r6, r0
 800b2fe:	460f      	mov	r7, r1
 800b300:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b304:	4652      	mov	r2, sl
 800b306:	465b      	mov	r3, fp
 800b308:	f7f4 ff2e 	bl	8000168 <__aeabi_dsub>
 800b30c:	4622      	mov	r2, r4
 800b30e:	462b      	mov	r3, r5
 800b310:	f7f5 f8e2 	bl	80004d8 <__aeabi_dmul>
 800b314:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b318:	4680      	mov	r8, r0
 800b31a:	4689      	mov	r9, r1
 800b31c:	4630      	mov	r0, r6
 800b31e:	4639      	mov	r1, r7
 800b320:	f7f5 f8da 	bl	80004d8 <__aeabi_dmul>
 800b324:	4602      	mov	r2, r0
 800b326:	460b      	mov	r3, r1
 800b328:	4640      	mov	r0, r8
 800b32a:	4649      	mov	r1, r9
 800b32c:	f7f4 ff1e 	bl	800016c <__adddf3>
 800b330:	4652      	mov	r2, sl
 800b332:	465b      	mov	r3, fp
 800b334:	4606      	mov	r6, r0
 800b336:	460f      	mov	r7, r1
 800b338:	4620      	mov	r0, r4
 800b33a:	4629      	mov	r1, r5
 800b33c:	f7f5 f8cc 	bl	80004d8 <__aeabi_dmul>
 800b340:	460b      	mov	r3, r1
 800b342:	4602      	mov	r2, r0
 800b344:	4680      	mov	r8, r0
 800b346:	4689      	mov	r9, r1
 800b348:	4630      	mov	r0, r6
 800b34a:	4639      	mov	r1, r7
 800b34c:	f7f4 ff0e 	bl	800016c <__adddf3>
 800b350:	4b18      	ldr	r3, [pc, #96]	@ (800b3b4 <__ieee754_pow+0x40c>)
 800b352:	4604      	mov	r4, r0
 800b354:	4299      	cmp	r1, r3
 800b356:	460d      	mov	r5, r1
 800b358:	468a      	mov	sl, r1
 800b35a:	468b      	mov	fp, r1
 800b35c:	f340 82e0 	ble.w	800b920 <__ieee754_pow+0x978>
 800b360:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800b364:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800b368:	4303      	orrs	r3, r0
 800b36a:	f000 81df 	beq.w	800b72c <__ieee754_pow+0x784>
 800b36e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b372:	2200      	movs	r2, #0
 800b374:	2300      	movs	r3, #0
 800b376:	f7f5 fb21 	bl	80009bc <__aeabi_dcmplt>
 800b37a:	3800      	subs	r0, #0
 800b37c:	bf18      	it	ne
 800b37e:	2001      	movne	r0, #1
 800b380:	e71d      	b.n	800b1be <__ieee754_pow+0x216>
 800b382:	bf00      	nop
 800b384:	f3af 8000 	nop.w
 800b388:	60000000 	.word	0x60000000
 800b38c:	3ff71547 	.word	0x3ff71547
 800b390:	f85ddf44 	.word	0xf85ddf44
 800b394:	3e54ae0b 	.word	0x3e54ae0b
 800b398:	55555555 	.word	0x55555555
 800b39c:	3fd55555 	.word	0x3fd55555
 800b3a0:	652b82fe 	.word	0x652b82fe
 800b3a4:	3ff71547 	.word	0x3ff71547
 800b3a8:	3ff00000 	.word	0x3ff00000
 800b3ac:	3fd00000 	.word	0x3fd00000
 800b3b0:	3fe00000 	.word	0x3fe00000
 800b3b4:	408fffff 	.word	0x408fffff
 800b3b8:	4ad3      	ldr	r2, [pc, #844]	@ (800b708 <__ieee754_pow+0x760>)
 800b3ba:	402a      	ands	r2, r5
 800b3bc:	2a00      	cmp	r2, #0
 800b3be:	f040 817a 	bne.w	800b6b6 <__ieee754_pow+0x70e>
 800b3c2:	4bd2      	ldr	r3, [pc, #840]	@ (800b70c <__ieee754_pow+0x764>)
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	f7f5 f887 	bl	80004d8 <__aeabi_dmul>
 800b3ca:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 800b3ce:	460b      	mov	r3, r1
 800b3d0:	151a      	asrs	r2, r3, #20
 800b3d2:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800b3d6:	4422      	add	r2, r4
 800b3d8:	920a      	str	r2, [sp, #40]	@ 0x28
 800b3da:	4acd      	ldr	r2, [pc, #820]	@ (800b710 <__ieee754_pow+0x768>)
 800b3dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b3e0:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 800b3e4:	4293      	cmp	r3, r2
 800b3e6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b3ea:	dd08      	ble.n	800b3fe <__ieee754_pow+0x456>
 800b3ec:	4ac9      	ldr	r2, [pc, #804]	@ (800b714 <__ieee754_pow+0x76c>)
 800b3ee:	4293      	cmp	r3, r2
 800b3f0:	f340 8163 	ble.w	800b6ba <__ieee754_pow+0x712>
 800b3f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b3f6:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800b3fa:	3301      	adds	r3, #1
 800b3fc:	930a      	str	r3, [sp, #40]	@ 0x28
 800b3fe:	2600      	movs	r6, #0
 800b400:	00f3      	lsls	r3, r6, #3
 800b402:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b404:	4bc4      	ldr	r3, [pc, #784]	@ (800b718 <__ieee754_pow+0x770>)
 800b406:	4629      	mov	r1, r5
 800b408:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b40c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b410:	461a      	mov	r2, r3
 800b412:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800b416:	4623      	mov	r3, r4
 800b418:	4682      	mov	sl, r0
 800b41a:	f7f4 fea5 	bl	8000168 <__aeabi_dsub>
 800b41e:	4652      	mov	r2, sl
 800b420:	462b      	mov	r3, r5
 800b422:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800b426:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b42a:	f7f4 fe9f 	bl	800016c <__adddf3>
 800b42e:	4602      	mov	r2, r0
 800b430:	460b      	mov	r3, r1
 800b432:	2000      	movs	r0, #0
 800b434:	49b9      	ldr	r1, [pc, #740]	@ (800b71c <__ieee754_pow+0x774>)
 800b436:	f7f5 f979 	bl	800072c <__aeabi_ddiv>
 800b43a:	4602      	mov	r2, r0
 800b43c:	460b      	mov	r3, r1
 800b43e:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b442:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b446:	f7f5 f847 	bl	80004d8 <__aeabi_dmul>
 800b44a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b44e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800b452:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b456:	2300      	movs	r3, #0
 800b458:	2200      	movs	r2, #0
 800b45a:	46ab      	mov	fp, r5
 800b45c:	106d      	asrs	r5, r5, #1
 800b45e:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800b462:	9304      	str	r3, [sp, #16]
 800b464:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800b468:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800b46c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800b470:	4640      	mov	r0, r8
 800b472:	4649      	mov	r1, r9
 800b474:	4614      	mov	r4, r2
 800b476:	461d      	mov	r5, r3
 800b478:	f7f5 f82e 	bl	80004d8 <__aeabi_dmul>
 800b47c:	4602      	mov	r2, r0
 800b47e:	460b      	mov	r3, r1
 800b480:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b484:	f7f4 fe70 	bl	8000168 <__aeabi_dsub>
 800b488:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b48c:	4606      	mov	r6, r0
 800b48e:	460f      	mov	r7, r1
 800b490:	4620      	mov	r0, r4
 800b492:	4629      	mov	r1, r5
 800b494:	f7f4 fe68 	bl	8000168 <__aeabi_dsub>
 800b498:	4602      	mov	r2, r0
 800b49a:	460b      	mov	r3, r1
 800b49c:	4650      	mov	r0, sl
 800b49e:	4659      	mov	r1, fp
 800b4a0:	f7f4 fe62 	bl	8000168 <__aeabi_dsub>
 800b4a4:	4642      	mov	r2, r8
 800b4a6:	464b      	mov	r3, r9
 800b4a8:	f7f5 f816 	bl	80004d8 <__aeabi_dmul>
 800b4ac:	4602      	mov	r2, r0
 800b4ae:	460b      	mov	r3, r1
 800b4b0:	4630      	mov	r0, r6
 800b4b2:	4639      	mov	r1, r7
 800b4b4:	f7f4 fe58 	bl	8000168 <__aeabi_dsub>
 800b4b8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b4bc:	f7f5 f80c 	bl	80004d8 <__aeabi_dmul>
 800b4c0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b4c4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b4c8:	4610      	mov	r0, r2
 800b4ca:	4619      	mov	r1, r3
 800b4cc:	f7f5 f804 	bl	80004d8 <__aeabi_dmul>
 800b4d0:	a37b      	add	r3, pc, #492	@ (adr r3, 800b6c0 <__ieee754_pow+0x718>)
 800b4d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4d6:	4604      	mov	r4, r0
 800b4d8:	460d      	mov	r5, r1
 800b4da:	f7f4 fffd 	bl	80004d8 <__aeabi_dmul>
 800b4de:	a37a      	add	r3, pc, #488	@ (adr r3, 800b6c8 <__ieee754_pow+0x720>)
 800b4e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4e4:	f7f4 fe42 	bl	800016c <__adddf3>
 800b4e8:	4622      	mov	r2, r4
 800b4ea:	462b      	mov	r3, r5
 800b4ec:	f7f4 fff4 	bl	80004d8 <__aeabi_dmul>
 800b4f0:	a377      	add	r3, pc, #476	@ (adr r3, 800b6d0 <__ieee754_pow+0x728>)
 800b4f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4f6:	f7f4 fe39 	bl	800016c <__adddf3>
 800b4fa:	4622      	mov	r2, r4
 800b4fc:	462b      	mov	r3, r5
 800b4fe:	f7f4 ffeb 	bl	80004d8 <__aeabi_dmul>
 800b502:	a375      	add	r3, pc, #468	@ (adr r3, 800b6d8 <__ieee754_pow+0x730>)
 800b504:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b508:	f7f4 fe30 	bl	800016c <__adddf3>
 800b50c:	4622      	mov	r2, r4
 800b50e:	462b      	mov	r3, r5
 800b510:	f7f4 ffe2 	bl	80004d8 <__aeabi_dmul>
 800b514:	a372      	add	r3, pc, #456	@ (adr r3, 800b6e0 <__ieee754_pow+0x738>)
 800b516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b51a:	f7f4 fe27 	bl	800016c <__adddf3>
 800b51e:	4622      	mov	r2, r4
 800b520:	462b      	mov	r3, r5
 800b522:	f7f4 ffd9 	bl	80004d8 <__aeabi_dmul>
 800b526:	a370      	add	r3, pc, #448	@ (adr r3, 800b6e8 <__ieee754_pow+0x740>)
 800b528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b52c:	f7f4 fe1e 	bl	800016c <__adddf3>
 800b530:	4622      	mov	r2, r4
 800b532:	4606      	mov	r6, r0
 800b534:	460f      	mov	r7, r1
 800b536:	462b      	mov	r3, r5
 800b538:	4620      	mov	r0, r4
 800b53a:	4629      	mov	r1, r5
 800b53c:	f7f4 ffcc 	bl	80004d8 <__aeabi_dmul>
 800b540:	4602      	mov	r2, r0
 800b542:	460b      	mov	r3, r1
 800b544:	4630      	mov	r0, r6
 800b546:	4639      	mov	r1, r7
 800b548:	f7f4 ffc6 	bl	80004d8 <__aeabi_dmul>
 800b54c:	4604      	mov	r4, r0
 800b54e:	460d      	mov	r5, r1
 800b550:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b554:	4642      	mov	r2, r8
 800b556:	464b      	mov	r3, r9
 800b558:	f7f4 fe08 	bl	800016c <__adddf3>
 800b55c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b560:	f7f4 ffba 	bl	80004d8 <__aeabi_dmul>
 800b564:	4622      	mov	r2, r4
 800b566:	462b      	mov	r3, r5
 800b568:	f7f4 fe00 	bl	800016c <__adddf3>
 800b56c:	4642      	mov	r2, r8
 800b56e:	4682      	mov	sl, r0
 800b570:	468b      	mov	fp, r1
 800b572:	464b      	mov	r3, r9
 800b574:	4640      	mov	r0, r8
 800b576:	4649      	mov	r1, r9
 800b578:	f7f4 ffae 	bl	80004d8 <__aeabi_dmul>
 800b57c:	2200      	movs	r2, #0
 800b57e:	4b68      	ldr	r3, [pc, #416]	@ (800b720 <__ieee754_pow+0x778>)
 800b580:	4606      	mov	r6, r0
 800b582:	460f      	mov	r7, r1
 800b584:	f7f4 fdf2 	bl	800016c <__adddf3>
 800b588:	4652      	mov	r2, sl
 800b58a:	465b      	mov	r3, fp
 800b58c:	f7f4 fdee 	bl	800016c <__adddf3>
 800b590:	2400      	movs	r4, #0
 800b592:	460d      	mov	r5, r1
 800b594:	4622      	mov	r2, r4
 800b596:	460b      	mov	r3, r1
 800b598:	4640      	mov	r0, r8
 800b59a:	4649      	mov	r1, r9
 800b59c:	f7f4 ff9c 	bl	80004d8 <__aeabi_dmul>
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	4680      	mov	r8, r0
 800b5a4:	4689      	mov	r9, r1
 800b5a6:	4620      	mov	r0, r4
 800b5a8:	4629      	mov	r1, r5
 800b5aa:	4b5d      	ldr	r3, [pc, #372]	@ (800b720 <__ieee754_pow+0x778>)
 800b5ac:	f7f4 fddc 	bl	8000168 <__aeabi_dsub>
 800b5b0:	4632      	mov	r2, r6
 800b5b2:	463b      	mov	r3, r7
 800b5b4:	f7f4 fdd8 	bl	8000168 <__aeabi_dsub>
 800b5b8:	4602      	mov	r2, r0
 800b5ba:	460b      	mov	r3, r1
 800b5bc:	4650      	mov	r0, sl
 800b5be:	4659      	mov	r1, fp
 800b5c0:	f7f4 fdd2 	bl	8000168 <__aeabi_dsub>
 800b5c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b5c8:	f7f4 ff86 	bl	80004d8 <__aeabi_dmul>
 800b5cc:	4622      	mov	r2, r4
 800b5ce:	4606      	mov	r6, r0
 800b5d0:	460f      	mov	r7, r1
 800b5d2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b5d6:	462b      	mov	r3, r5
 800b5d8:	f7f4 ff7e 	bl	80004d8 <__aeabi_dmul>
 800b5dc:	4602      	mov	r2, r0
 800b5de:	460b      	mov	r3, r1
 800b5e0:	4630      	mov	r0, r6
 800b5e2:	4639      	mov	r1, r7
 800b5e4:	f7f4 fdc2 	bl	800016c <__adddf3>
 800b5e8:	2400      	movs	r4, #0
 800b5ea:	4606      	mov	r6, r0
 800b5ec:	460f      	mov	r7, r1
 800b5ee:	4602      	mov	r2, r0
 800b5f0:	460b      	mov	r3, r1
 800b5f2:	4640      	mov	r0, r8
 800b5f4:	4649      	mov	r1, r9
 800b5f6:	f7f4 fdb9 	bl	800016c <__adddf3>
 800b5fa:	a33d      	add	r3, pc, #244	@ (adr r3, 800b6f0 <__ieee754_pow+0x748>)
 800b5fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b600:	4620      	mov	r0, r4
 800b602:	460d      	mov	r5, r1
 800b604:	f7f4 ff68 	bl	80004d8 <__aeabi_dmul>
 800b608:	4642      	mov	r2, r8
 800b60a:	464b      	mov	r3, r9
 800b60c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b610:	4620      	mov	r0, r4
 800b612:	4629      	mov	r1, r5
 800b614:	f7f4 fda8 	bl	8000168 <__aeabi_dsub>
 800b618:	4602      	mov	r2, r0
 800b61a:	460b      	mov	r3, r1
 800b61c:	4630      	mov	r0, r6
 800b61e:	4639      	mov	r1, r7
 800b620:	f7f4 fda2 	bl	8000168 <__aeabi_dsub>
 800b624:	a334      	add	r3, pc, #208	@ (adr r3, 800b6f8 <__ieee754_pow+0x750>)
 800b626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b62a:	f7f4 ff55 	bl	80004d8 <__aeabi_dmul>
 800b62e:	a334      	add	r3, pc, #208	@ (adr r3, 800b700 <__ieee754_pow+0x758>)
 800b630:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b634:	4606      	mov	r6, r0
 800b636:	460f      	mov	r7, r1
 800b638:	4620      	mov	r0, r4
 800b63a:	4629      	mov	r1, r5
 800b63c:	f7f4 ff4c 	bl	80004d8 <__aeabi_dmul>
 800b640:	4602      	mov	r2, r0
 800b642:	460b      	mov	r3, r1
 800b644:	4630      	mov	r0, r6
 800b646:	4639      	mov	r1, r7
 800b648:	f7f4 fd90 	bl	800016c <__adddf3>
 800b64c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b64e:	4b35      	ldr	r3, [pc, #212]	@ (800b724 <__ieee754_pow+0x77c>)
 800b650:	2400      	movs	r4, #0
 800b652:	4413      	add	r3, r2
 800b654:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b658:	f7f4 fd88 	bl	800016c <__adddf3>
 800b65c:	4682      	mov	sl, r0
 800b65e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b660:	468b      	mov	fp, r1
 800b662:	f7f4 fecf 	bl	8000404 <__aeabi_i2d>
 800b666:	4606      	mov	r6, r0
 800b668:	460f      	mov	r7, r1
 800b66a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b66c:	4b2e      	ldr	r3, [pc, #184]	@ (800b728 <__ieee754_pow+0x780>)
 800b66e:	4413      	add	r3, r2
 800b670:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b674:	4652      	mov	r2, sl
 800b676:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b67a:	465b      	mov	r3, fp
 800b67c:	f7f4 fd76 	bl	800016c <__adddf3>
 800b680:	4642      	mov	r2, r8
 800b682:	464b      	mov	r3, r9
 800b684:	f7f4 fd72 	bl	800016c <__adddf3>
 800b688:	4632      	mov	r2, r6
 800b68a:	463b      	mov	r3, r7
 800b68c:	f7f4 fd6e 	bl	800016c <__adddf3>
 800b690:	4632      	mov	r2, r6
 800b692:	463b      	mov	r3, r7
 800b694:	4620      	mov	r0, r4
 800b696:	460d      	mov	r5, r1
 800b698:	f7f4 fd66 	bl	8000168 <__aeabi_dsub>
 800b69c:	4642      	mov	r2, r8
 800b69e:	464b      	mov	r3, r9
 800b6a0:	f7f4 fd62 	bl	8000168 <__aeabi_dsub>
 800b6a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b6a8:	f7f4 fd5e 	bl	8000168 <__aeabi_dsub>
 800b6ac:	4602      	mov	r2, r0
 800b6ae:	460b      	mov	r3, r1
 800b6b0:	4650      	mov	r0, sl
 800b6b2:	4659      	mov	r1, fp
 800b6b4:	e618      	b.n	800b2e8 <__ieee754_pow+0x340>
 800b6b6:	2400      	movs	r4, #0
 800b6b8:	e68a      	b.n	800b3d0 <__ieee754_pow+0x428>
 800b6ba:	2601      	movs	r6, #1
 800b6bc:	e6a0      	b.n	800b400 <__ieee754_pow+0x458>
 800b6be:	bf00      	nop
 800b6c0:	4a454eef 	.word	0x4a454eef
 800b6c4:	3fca7e28 	.word	0x3fca7e28
 800b6c8:	93c9db65 	.word	0x93c9db65
 800b6cc:	3fcd864a 	.word	0x3fcd864a
 800b6d0:	a91d4101 	.word	0xa91d4101
 800b6d4:	3fd17460 	.word	0x3fd17460
 800b6d8:	518f264d 	.word	0x518f264d
 800b6dc:	3fd55555 	.word	0x3fd55555
 800b6e0:	db6fabff 	.word	0xdb6fabff
 800b6e4:	3fdb6db6 	.word	0x3fdb6db6
 800b6e8:	33333303 	.word	0x33333303
 800b6ec:	3fe33333 	.word	0x3fe33333
 800b6f0:	e0000000 	.word	0xe0000000
 800b6f4:	3feec709 	.word	0x3feec709
 800b6f8:	dc3a03fd 	.word	0xdc3a03fd
 800b6fc:	3feec709 	.word	0x3feec709
 800b700:	145b01f5 	.word	0x145b01f5
 800b704:	be3e2fe0 	.word	0xbe3e2fe0
 800b708:	7ff00000 	.word	0x7ff00000
 800b70c:	43400000 	.word	0x43400000
 800b710:	0003988e 	.word	0x0003988e
 800b714:	000bb679 	.word	0x000bb679
 800b718:	0800c3e0 	.word	0x0800c3e0
 800b71c:	3ff00000 	.word	0x3ff00000
 800b720:	40080000 	.word	0x40080000
 800b724:	0800c3c0 	.word	0x0800c3c0
 800b728:	0800c3d0 	.word	0x0800c3d0
 800b72c:	a39a      	add	r3, pc, #616	@ (adr r3, 800b998 <__ieee754_pow+0x9f0>)
 800b72e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b732:	4630      	mov	r0, r6
 800b734:	4639      	mov	r1, r7
 800b736:	f7f4 fd19 	bl	800016c <__adddf3>
 800b73a:	4642      	mov	r2, r8
 800b73c:	e9cd 0100 	strd	r0, r1, [sp]
 800b740:	464b      	mov	r3, r9
 800b742:	4620      	mov	r0, r4
 800b744:	4629      	mov	r1, r5
 800b746:	f7f4 fd0f 	bl	8000168 <__aeabi_dsub>
 800b74a:	4602      	mov	r2, r0
 800b74c:	460b      	mov	r3, r1
 800b74e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b752:	f7f5 f951 	bl	80009f8 <__aeabi_dcmpgt>
 800b756:	2800      	cmp	r0, #0
 800b758:	f47f ae09 	bne.w	800b36e <__ieee754_pow+0x3c6>
 800b75c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800b760:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800b764:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800b768:	fa43 fa0a 	asr.w	sl, r3, sl
 800b76c:	44da      	add	sl, fp
 800b76e:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800b772:	489b      	ldr	r0, [pc, #620]	@ (800b9e0 <__ieee754_pow+0xa38>)
 800b774:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800b778:	4108      	asrs	r0, r1
 800b77a:	ea00 030a 	and.w	r3, r0, sl
 800b77e:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800b782:	f1c1 0114 	rsb	r1, r1, #20
 800b786:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800b78a:	4640      	mov	r0, r8
 800b78c:	fa4a fa01 	asr.w	sl, sl, r1
 800b790:	f1bb 0f00 	cmp.w	fp, #0
 800b794:	4649      	mov	r1, r9
 800b796:	f04f 0200 	mov.w	r2, #0
 800b79a:	bfb8      	it	lt
 800b79c:	f1ca 0a00 	rsblt	sl, sl, #0
 800b7a0:	f7f4 fce2 	bl	8000168 <__aeabi_dsub>
 800b7a4:	4680      	mov	r8, r0
 800b7a6:	4689      	mov	r9, r1
 800b7a8:	2400      	movs	r4, #0
 800b7aa:	4632      	mov	r2, r6
 800b7ac:	463b      	mov	r3, r7
 800b7ae:	4640      	mov	r0, r8
 800b7b0:	4649      	mov	r1, r9
 800b7b2:	f7f4 fcdb 	bl	800016c <__adddf3>
 800b7b6:	a37a      	add	r3, pc, #488	@ (adr r3, 800b9a0 <__ieee754_pow+0x9f8>)
 800b7b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7bc:	4620      	mov	r0, r4
 800b7be:	460d      	mov	r5, r1
 800b7c0:	f7f4 fe8a 	bl	80004d8 <__aeabi_dmul>
 800b7c4:	4642      	mov	r2, r8
 800b7c6:	464b      	mov	r3, r9
 800b7c8:	e9cd 0100 	strd	r0, r1, [sp]
 800b7cc:	4620      	mov	r0, r4
 800b7ce:	4629      	mov	r1, r5
 800b7d0:	f7f4 fcca 	bl	8000168 <__aeabi_dsub>
 800b7d4:	4602      	mov	r2, r0
 800b7d6:	460b      	mov	r3, r1
 800b7d8:	4630      	mov	r0, r6
 800b7da:	4639      	mov	r1, r7
 800b7dc:	f7f4 fcc4 	bl	8000168 <__aeabi_dsub>
 800b7e0:	a371      	add	r3, pc, #452	@ (adr r3, 800b9a8 <__ieee754_pow+0xa00>)
 800b7e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7e6:	f7f4 fe77 	bl	80004d8 <__aeabi_dmul>
 800b7ea:	a371      	add	r3, pc, #452	@ (adr r3, 800b9b0 <__ieee754_pow+0xa08>)
 800b7ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7f0:	4680      	mov	r8, r0
 800b7f2:	4689      	mov	r9, r1
 800b7f4:	4620      	mov	r0, r4
 800b7f6:	4629      	mov	r1, r5
 800b7f8:	f7f4 fe6e 	bl	80004d8 <__aeabi_dmul>
 800b7fc:	4602      	mov	r2, r0
 800b7fe:	460b      	mov	r3, r1
 800b800:	4640      	mov	r0, r8
 800b802:	4649      	mov	r1, r9
 800b804:	f7f4 fcb2 	bl	800016c <__adddf3>
 800b808:	4604      	mov	r4, r0
 800b80a:	460d      	mov	r5, r1
 800b80c:	4602      	mov	r2, r0
 800b80e:	460b      	mov	r3, r1
 800b810:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b814:	f7f4 fcaa 	bl	800016c <__adddf3>
 800b818:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b81c:	4680      	mov	r8, r0
 800b81e:	4689      	mov	r9, r1
 800b820:	f7f4 fca2 	bl	8000168 <__aeabi_dsub>
 800b824:	4602      	mov	r2, r0
 800b826:	460b      	mov	r3, r1
 800b828:	4620      	mov	r0, r4
 800b82a:	4629      	mov	r1, r5
 800b82c:	f7f4 fc9c 	bl	8000168 <__aeabi_dsub>
 800b830:	4642      	mov	r2, r8
 800b832:	4606      	mov	r6, r0
 800b834:	460f      	mov	r7, r1
 800b836:	464b      	mov	r3, r9
 800b838:	4640      	mov	r0, r8
 800b83a:	4649      	mov	r1, r9
 800b83c:	f7f4 fe4c 	bl	80004d8 <__aeabi_dmul>
 800b840:	a35d      	add	r3, pc, #372	@ (adr r3, 800b9b8 <__ieee754_pow+0xa10>)
 800b842:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b846:	4604      	mov	r4, r0
 800b848:	460d      	mov	r5, r1
 800b84a:	f7f4 fe45 	bl	80004d8 <__aeabi_dmul>
 800b84e:	a35c      	add	r3, pc, #368	@ (adr r3, 800b9c0 <__ieee754_pow+0xa18>)
 800b850:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b854:	f7f4 fc88 	bl	8000168 <__aeabi_dsub>
 800b858:	4622      	mov	r2, r4
 800b85a:	462b      	mov	r3, r5
 800b85c:	f7f4 fe3c 	bl	80004d8 <__aeabi_dmul>
 800b860:	a359      	add	r3, pc, #356	@ (adr r3, 800b9c8 <__ieee754_pow+0xa20>)
 800b862:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b866:	f7f4 fc81 	bl	800016c <__adddf3>
 800b86a:	4622      	mov	r2, r4
 800b86c:	462b      	mov	r3, r5
 800b86e:	f7f4 fe33 	bl	80004d8 <__aeabi_dmul>
 800b872:	a357      	add	r3, pc, #348	@ (adr r3, 800b9d0 <__ieee754_pow+0xa28>)
 800b874:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b878:	f7f4 fc76 	bl	8000168 <__aeabi_dsub>
 800b87c:	4622      	mov	r2, r4
 800b87e:	462b      	mov	r3, r5
 800b880:	f7f4 fe2a 	bl	80004d8 <__aeabi_dmul>
 800b884:	a354      	add	r3, pc, #336	@ (adr r3, 800b9d8 <__ieee754_pow+0xa30>)
 800b886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b88a:	f7f4 fc6f 	bl	800016c <__adddf3>
 800b88e:	4622      	mov	r2, r4
 800b890:	462b      	mov	r3, r5
 800b892:	f7f4 fe21 	bl	80004d8 <__aeabi_dmul>
 800b896:	4602      	mov	r2, r0
 800b898:	460b      	mov	r3, r1
 800b89a:	4640      	mov	r0, r8
 800b89c:	4649      	mov	r1, r9
 800b89e:	f7f4 fc63 	bl	8000168 <__aeabi_dsub>
 800b8a2:	4604      	mov	r4, r0
 800b8a4:	460d      	mov	r5, r1
 800b8a6:	4602      	mov	r2, r0
 800b8a8:	460b      	mov	r3, r1
 800b8aa:	4640      	mov	r0, r8
 800b8ac:	4649      	mov	r1, r9
 800b8ae:	f7f4 fe13 	bl	80004d8 <__aeabi_dmul>
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	e9cd 0100 	strd	r0, r1, [sp]
 800b8b8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b8bc:	4620      	mov	r0, r4
 800b8be:	4629      	mov	r1, r5
 800b8c0:	f7f4 fc52 	bl	8000168 <__aeabi_dsub>
 800b8c4:	4602      	mov	r2, r0
 800b8c6:	460b      	mov	r3, r1
 800b8c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b8cc:	f7f4 ff2e 	bl	800072c <__aeabi_ddiv>
 800b8d0:	4632      	mov	r2, r6
 800b8d2:	4604      	mov	r4, r0
 800b8d4:	460d      	mov	r5, r1
 800b8d6:	463b      	mov	r3, r7
 800b8d8:	4640      	mov	r0, r8
 800b8da:	4649      	mov	r1, r9
 800b8dc:	f7f4 fdfc 	bl	80004d8 <__aeabi_dmul>
 800b8e0:	4632      	mov	r2, r6
 800b8e2:	463b      	mov	r3, r7
 800b8e4:	f7f4 fc42 	bl	800016c <__adddf3>
 800b8e8:	4602      	mov	r2, r0
 800b8ea:	460b      	mov	r3, r1
 800b8ec:	4620      	mov	r0, r4
 800b8ee:	4629      	mov	r1, r5
 800b8f0:	f7f4 fc3a 	bl	8000168 <__aeabi_dsub>
 800b8f4:	4642      	mov	r2, r8
 800b8f6:	464b      	mov	r3, r9
 800b8f8:	f7f4 fc36 	bl	8000168 <__aeabi_dsub>
 800b8fc:	4602      	mov	r2, r0
 800b8fe:	460b      	mov	r3, r1
 800b900:	2000      	movs	r0, #0
 800b902:	4938      	ldr	r1, [pc, #224]	@ (800b9e4 <__ieee754_pow+0xa3c>)
 800b904:	f7f4 fc30 	bl	8000168 <__aeabi_dsub>
 800b908:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800b90c:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 800b910:	da2e      	bge.n	800b970 <__ieee754_pow+0x9c8>
 800b912:	4652      	mov	r2, sl
 800b914:	f000 fa04 	bl	800bd20 <scalbn>
 800b918:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b91c:	f7ff bbed 	b.w	800b0fa <__ieee754_pow+0x152>
 800b920:	4c31      	ldr	r4, [pc, #196]	@ (800b9e8 <__ieee754_pow+0xa40>)
 800b922:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b926:	42a3      	cmp	r3, r4
 800b928:	d91a      	bls.n	800b960 <__ieee754_pow+0x9b8>
 800b92a:	4b30      	ldr	r3, [pc, #192]	@ (800b9ec <__ieee754_pow+0xa44>)
 800b92c:	440b      	add	r3, r1
 800b92e:	4303      	orrs	r3, r0
 800b930:	d009      	beq.n	800b946 <__ieee754_pow+0x99e>
 800b932:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b936:	2200      	movs	r2, #0
 800b938:	2300      	movs	r3, #0
 800b93a:	f7f5 f83f 	bl	80009bc <__aeabi_dcmplt>
 800b93e:	3800      	subs	r0, #0
 800b940:	bf18      	it	ne
 800b942:	2001      	movne	r0, #1
 800b944:	e444      	b.n	800b1d0 <__ieee754_pow+0x228>
 800b946:	4642      	mov	r2, r8
 800b948:	464b      	mov	r3, r9
 800b94a:	f7f4 fc0d 	bl	8000168 <__aeabi_dsub>
 800b94e:	4632      	mov	r2, r6
 800b950:	463b      	mov	r3, r7
 800b952:	f7f5 f847 	bl	80009e4 <__aeabi_dcmpge>
 800b956:	2800      	cmp	r0, #0
 800b958:	d1eb      	bne.n	800b932 <__ieee754_pow+0x98a>
 800b95a:	f8df a094 	ldr.w	sl, [pc, #148]	@ 800b9f0 <__ieee754_pow+0xa48>
 800b95e:	e6fd      	b.n	800b75c <__ieee754_pow+0x7b4>
 800b960:	469a      	mov	sl, r3
 800b962:	4b24      	ldr	r3, [pc, #144]	@ (800b9f4 <__ieee754_pow+0xa4c>)
 800b964:	459a      	cmp	sl, r3
 800b966:	f63f aef9 	bhi.w	800b75c <__ieee754_pow+0x7b4>
 800b96a:	f8dd a010 	ldr.w	sl, [sp, #16]
 800b96e:	e71b      	b.n	800b7a8 <__ieee754_pow+0x800>
 800b970:	4621      	mov	r1, r4
 800b972:	e7d1      	b.n	800b918 <__ieee754_pow+0x970>
 800b974:	2000      	movs	r0, #0
 800b976:	491b      	ldr	r1, [pc, #108]	@ (800b9e4 <__ieee754_pow+0xa3c>)
 800b978:	f7ff bb34 	b.w	800afe4 <__ieee754_pow+0x3c>
 800b97c:	2000      	movs	r0, #0
 800b97e:	2100      	movs	r1, #0
 800b980:	f7ff bb30 	b.w	800afe4 <__ieee754_pow+0x3c>
 800b984:	4650      	mov	r0, sl
 800b986:	4659      	mov	r1, fp
 800b988:	f7ff bb2c 	b.w	800afe4 <__ieee754_pow+0x3c>
 800b98c:	460c      	mov	r4, r1
 800b98e:	f7ff bb79 	b.w	800b084 <__ieee754_pow+0xdc>
 800b992:	2400      	movs	r4, #0
 800b994:	f7ff bb64 	b.w	800b060 <__ieee754_pow+0xb8>
 800b998:	652b82fe 	.word	0x652b82fe
 800b99c:	3c971547 	.word	0x3c971547
 800b9a0:	00000000 	.word	0x00000000
 800b9a4:	3fe62e43 	.word	0x3fe62e43
 800b9a8:	fefa39ef 	.word	0xfefa39ef
 800b9ac:	3fe62e42 	.word	0x3fe62e42
 800b9b0:	0ca86c39 	.word	0x0ca86c39
 800b9b4:	be205c61 	.word	0xbe205c61
 800b9b8:	72bea4d0 	.word	0x72bea4d0
 800b9bc:	3e663769 	.word	0x3e663769
 800b9c0:	c5d26bf1 	.word	0xc5d26bf1
 800b9c4:	3ebbbd41 	.word	0x3ebbbd41
 800b9c8:	af25de2c 	.word	0xaf25de2c
 800b9cc:	3f11566a 	.word	0x3f11566a
 800b9d0:	16bebd93 	.word	0x16bebd93
 800b9d4:	3f66c16c 	.word	0x3f66c16c
 800b9d8:	5555553e 	.word	0x5555553e
 800b9dc:	3fc55555 	.word	0x3fc55555
 800b9e0:	fff00000 	.word	0xfff00000
 800b9e4:	3ff00000 	.word	0x3ff00000
 800b9e8:	4090cbff 	.word	0x4090cbff
 800b9ec:	3f6f3400 	.word	0x3f6f3400
 800b9f0:	4090cc00 	.word	0x4090cc00
 800b9f4:	3fe00000 	.word	0x3fe00000

0800b9f8 <atan>:
 800b9f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9fc:	4bbc      	ldr	r3, [pc, #752]	@ (800bcf0 <atan+0x2f8>)
 800b9fe:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 800ba02:	429e      	cmp	r6, r3
 800ba04:	4604      	mov	r4, r0
 800ba06:	460d      	mov	r5, r1
 800ba08:	468b      	mov	fp, r1
 800ba0a:	d918      	bls.n	800ba3e <atan+0x46>
 800ba0c:	4bb9      	ldr	r3, [pc, #740]	@ (800bcf4 <atan+0x2fc>)
 800ba0e:	429e      	cmp	r6, r3
 800ba10:	d801      	bhi.n	800ba16 <atan+0x1e>
 800ba12:	d109      	bne.n	800ba28 <atan+0x30>
 800ba14:	b140      	cbz	r0, 800ba28 <atan+0x30>
 800ba16:	4622      	mov	r2, r4
 800ba18:	462b      	mov	r3, r5
 800ba1a:	4620      	mov	r0, r4
 800ba1c:	4629      	mov	r1, r5
 800ba1e:	f7f4 fba5 	bl	800016c <__adddf3>
 800ba22:	4604      	mov	r4, r0
 800ba24:	460d      	mov	r5, r1
 800ba26:	e006      	b.n	800ba36 <atan+0x3e>
 800ba28:	f1bb 0f00 	cmp.w	fp, #0
 800ba2c:	f340 8123 	ble.w	800bc76 <atan+0x27e>
 800ba30:	a593      	add	r5, pc, #588	@ (adr r5, 800bc80 <atan+0x288>)
 800ba32:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ba36:	4620      	mov	r0, r4
 800ba38:	4629      	mov	r1, r5
 800ba3a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba3e:	4bae      	ldr	r3, [pc, #696]	@ (800bcf8 <atan+0x300>)
 800ba40:	429e      	cmp	r6, r3
 800ba42:	d811      	bhi.n	800ba68 <atan+0x70>
 800ba44:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800ba48:	429e      	cmp	r6, r3
 800ba4a:	d80a      	bhi.n	800ba62 <atan+0x6a>
 800ba4c:	a38e      	add	r3, pc, #568	@ (adr r3, 800bc88 <atan+0x290>)
 800ba4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba52:	f7f4 fb8b 	bl	800016c <__adddf3>
 800ba56:	2200      	movs	r2, #0
 800ba58:	4ba8      	ldr	r3, [pc, #672]	@ (800bcfc <atan+0x304>)
 800ba5a:	f7f4 ffcd 	bl	80009f8 <__aeabi_dcmpgt>
 800ba5e:	2800      	cmp	r0, #0
 800ba60:	d1e9      	bne.n	800ba36 <atan+0x3e>
 800ba62:	f04f 3aff 	mov.w	sl, #4294967295
 800ba66:	e027      	b.n	800bab8 <atan+0xc0>
 800ba68:	f000 f956 	bl	800bd18 <fabs>
 800ba6c:	4ba4      	ldr	r3, [pc, #656]	@ (800bd00 <atan+0x308>)
 800ba6e:	4604      	mov	r4, r0
 800ba70:	429e      	cmp	r6, r3
 800ba72:	460d      	mov	r5, r1
 800ba74:	f200 80b8 	bhi.w	800bbe8 <atan+0x1f0>
 800ba78:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800ba7c:	429e      	cmp	r6, r3
 800ba7e:	f200 809c 	bhi.w	800bbba <atan+0x1c2>
 800ba82:	4602      	mov	r2, r0
 800ba84:	460b      	mov	r3, r1
 800ba86:	f7f4 fb71 	bl	800016c <__adddf3>
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	4b9b      	ldr	r3, [pc, #620]	@ (800bcfc <atan+0x304>)
 800ba8e:	f7f4 fb6b 	bl	8000168 <__aeabi_dsub>
 800ba92:	2200      	movs	r2, #0
 800ba94:	4606      	mov	r6, r0
 800ba96:	460f      	mov	r7, r1
 800ba98:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ba9c:	4620      	mov	r0, r4
 800ba9e:	4629      	mov	r1, r5
 800baa0:	f7f4 fb64 	bl	800016c <__adddf3>
 800baa4:	4602      	mov	r2, r0
 800baa6:	460b      	mov	r3, r1
 800baa8:	4630      	mov	r0, r6
 800baaa:	4639      	mov	r1, r7
 800baac:	f7f4 fe3e 	bl	800072c <__aeabi_ddiv>
 800bab0:	f04f 0a00 	mov.w	sl, #0
 800bab4:	4604      	mov	r4, r0
 800bab6:	460d      	mov	r5, r1
 800bab8:	4622      	mov	r2, r4
 800baba:	462b      	mov	r3, r5
 800babc:	4620      	mov	r0, r4
 800babe:	4629      	mov	r1, r5
 800bac0:	f7f4 fd0a 	bl	80004d8 <__aeabi_dmul>
 800bac4:	4602      	mov	r2, r0
 800bac6:	460b      	mov	r3, r1
 800bac8:	4680      	mov	r8, r0
 800baca:	4689      	mov	r9, r1
 800bacc:	f7f4 fd04 	bl	80004d8 <__aeabi_dmul>
 800bad0:	a36f      	add	r3, pc, #444	@ (adr r3, 800bc90 <atan+0x298>)
 800bad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bad6:	4606      	mov	r6, r0
 800bad8:	460f      	mov	r7, r1
 800bada:	f7f4 fcfd 	bl	80004d8 <__aeabi_dmul>
 800bade:	a36e      	add	r3, pc, #440	@ (adr r3, 800bc98 <atan+0x2a0>)
 800bae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bae4:	f7f4 fb42 	bl	800016c <__adddf3>
 800bae8:	4632      	mov	r2, r6
 800baea:	463b      	mov	r3, r7
 800baec:	f7f4 fcf4 	bl	80004d8 <__aeabi_dmul>
 800baf0:	a36b      	add	r3, pc, #428	@ (adr r3, 800bca0 <atan+0x2a8>)
 800baf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baf6:	f7f4 fb39 	bl	800016c <__adddf3>
 800bafa:	4632      	mov	r2, r6
 800bafc:	463b      	mov	r3, r7
 800bafe:	f7f4 fceb 	bl	80004d8 <__aeabi_dmul>
 800bb02:	a369      	add	r3, pc, #420	@ (adr r3, 800bca8 <atan+0x2b0>)
 800bb04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb08:	f7f4 fb30 	bl	800016c <__adddf3>
 800bb0c:	4632      	mov	r2, r6
 800bb0e:	463b      	mov	r3, r7
 800bb10:	f7f4 fce2 	bl	80004d8 <__aeabi_dmul>
 800bb14:	a366      	add	r3, pc, #408	@ (adr r3, 800bcb0 <atan+0x2b8>)
 800bb16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb1a:	f7f4 fb27 	bl	800016c <__adddf3>
 800bb1e:	4632      	mov	r2, r6
 800bb20:	463b      	mov	r3, r7
 800bb22:	f7f4 fcd9 	bl	80004d8 <__aeabi_dmul>
 800bb26:	a364      	add	r3, pc, #400	@ (adr r3, 800bcb8 <atan+0x2c0>)
 800bb28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb2c:	f7f4 fb1e 	bl	800016c <__adddf3>
 800bb30:	4642      	mov	r2, r8
 800bb32:	464b      	mov	r3, r9
 800bb34:	f7f4 fcd0 	bl	80004d8 <__aeabi_dmul>
 800bb38:	a361      	add	r3, pc, #388	@ (adr r3, 800bcc0 <atan+0x2c8>)
 800bb3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb3e:	4680      	mov	r8, r0
 800bb40:	4689      	mov	r9, r1
 800bb42:	4630      	mov	r0, r6
 800bb44:	4639      	mov	r1, r7
 800bb46:	f7f4 fcc7 	bl	80004d8 <__aeabi_dmul>
 800bb4a:	a35f      	add	r3, pc, #380	@ (adr r3, 800bcc8 <atan+0x2d0>)
 800bb4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb50:	f7f4 fb0a 	bl	8000168 <__aeabi_dsub>
 800bb54:	4632      	mov	r2, r6
 800bb56:	463b      	mov	r3, r7
 800bb58:	f7f4 fcbe 	bl	80004d8 <__aeabi_dmul>
 800bb5c:	a35c      	add	r3, pc, #368	@ (adr r3, 800bcd0 <atan+0x2d8>)
 800bb5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb62:	f7f4 fb01 	bl	8000168 <__aeabi_dsub>
 800bb66:	4632      	mov	r2, r6
 800bb68:	463b      	mov	r3, r7
 800bb6a:	f7f4 fcb5 	bl	80004d8 <__aeabi_dmul>
 800bb6e:	a35a      	add	r3, pc, #360	@ (adr r3, 800bcd8 <atan+0x2e0>)
 800bb70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb74:	f7f4 faf8 	bl	8000168 <__aeabi_dsub>
 800bb78:	4632      	mov	r2, r6
 800bb7a:	463b      	mov	r3, r7
 800bb7c:	f7f4 fcac 	bl	80004d8 <__aeabi_dmul>
 800bb80:	a357      	add	r3, pc, #348	@ (adr r3, 800bce0 <atan+0x2e8>)
 800bb82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb86:	f7f4 faef 	bl	8000168 <__aeabi_dsub>
 800bb8a:	4632      	mov	r2, r6
 800bb8c:	463b      	mov	r3, r7
 800bb8e:	f7f4 fca3 	bl	80004d8 <__aeabi_dmul>
 800bb92:	4602      	mov	r2, r0
 800bb94:	460b      	mov	r3, r1
 800bb96:	4640      	mov	r0, r8
 800bb98:	4649      	mov	r1, r9
 800bb9a:	f7f4 fae7 	bl	800016c <__adddf3>
 800bb9e:	4622      	mov	r2, r4
 800bba0:	462b      	mov	r3, r5
 800bba2:	f7f4 fc99 	bl	80004d8 <__aeabi_dmul>
 800bba6:	f1ba 3fff 	cmp.w	sl, #4294967295
 800bbaa:	4602      	mov	r2, r0
 800bbac:	460b      	mov	r3, r1
 800bbae:	d144      	bne.n	800bc3a <atan+0x242>
 800bbb0:	4620      	mov	r0, r4
 800bbb2:	4629      	mov	r1, r5
 800bbb4:	f7f4 fad8 	bl	8000168 <__aeabi_dsub>
 800bbb8:	e733      	b.n	800ba22 <atan+0x2a>
 800bbba:	2200      	movs	r2, #0
 800bbbc:	4b4f      	ldr	r3, [pc, #316]	@ (800bcfc <atan+0x304>)
 800bbbe:	f7f4 fad3 	bl	8000168 <__aeabi_dsub>
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	4606      	mov	r6, r0
 800bbc6:	460f      	mov	r7, r1
 800bbc8:	4620      	mov	r0, r4
 800bbca:	4629      	mov	r1, r5
 800bbcc:	4b4b      	ldr	r3, [pc, #300]	@ (800bcfc <atan+0x304>)
 800bbce:	f7f4 facd 	bl	800016c <__adddf3>
 800bbd2:	4602      	mov	r2, r0
 800bbd4:	460b      	mov	r3, r1
 800bbd6:	4630      	mov	r0, r6
 800bbd8:	4639      	mov	r1, r7
 800bbda:	f7f4 fda7 	bl	800072c <__aeabi_ddiv>
 800bbde:	f04f 0a01 	mov.w	sl, #1
 800bbe2:	4604      	mov	r4, r0
 800bbe4:	460d      	mov	r5, r1
 800bbe6:	e767      	b.n	800bab8 <atan+0xc0>
 800bbe8:	4b46      	ldr	r3, [pc, #280]	@ (800bd04 <atan+0x30c>)
 800bbea:	429e      	cmp	r6, r3
 800bbec:	d21a      	bcs.n	800bc24 <atan+0x22c>
 800bbee:	2200      	movs	r2, #0
 800bbf0:	4b45      	ldr	r3, [pc, #276]	@ (800bd08 <atan+0x310>)
 800bbf2:	f7f4 fab9 	bl	8000168 <__aeabi_dsub>
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	4606      	mov	r6, r0
 800bbfa:	460f      	mov	r7, r1
 800bbfc:	4620      	mov	r0, r4
 800bbfe:	4629      	mov	r1, r5
 800bc00:	4b41      	ldr	r3, [pc, #260]	@ (800bd08 <atan+0x310>)
 800bc02:	f7f4 fc69 	bl	80004d8 <__aeabi_dmul>
 800bc06:	2200      	movs	r2, #0
 800bc08:	4b3c      	ldr	r3, [pc, #240]	@ (800bcfc <atan+0x304>)
 800bc0a:	f7f4 faaf 	bl	800016c <__adddf3>
 800bc0e:	4602      	mov	r2, r0
 800bc10:	460b      	mov	r3, r1
 800bc12:	4630      	mov	r0, r6
 800bc14:	4639      	mov	r1, r7
 800bc16:	f7f4 fd89 	bl	800072c <__aeabi_ddiv>
 800bc1a:	f04f 0a02 	mov.w	sl, #2
 800bc1e:	4604      	mov	r4, r0
 800bc20:	460d      	mov	r5, r1
 800bc22:	e749      	b.n	800bab8 <atan+0xc0>
 800bc24:	4602      	mov	r2, r0
 800bc26:	460b      	mov	r3, r1
 800bc28:	2000      	movs	r0, #0
 800bc2a:	4938      	ldr	r1, [pc, #224]	@ (800bd0c <atan+0x314>)
 800bc2c:	f7f4 fd7e 	bl	800072c <__aeabi_ddiv>
 800bc30:	f04f 0a03 	mov.w	sl, #3
 800bc34:	4604      	mov	r4, r0
 800bc36:	460d      	mov	r5, r1
 800bc38:	e73e      	b.n	800bab8 <atan+0xc0>
 800bc3a:	4b35      	ldr	r3, [pc, #212]	@ (800bd10 <atan+0x318>)
 800bc3c:	4e35      	ldr	r6, [pc, #212]	@ (800bd14 <atan+0x31c>)
 800bc3e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800bc42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc46:	f7f4 fa8f 	bl	8000168 <__aeabi_dsub>
 800bc4a:	4622      	mov	r2, r4
 800bc4c:	462b      	mov	r3, r5
 800bc4e:	f7f4 fa8b 	bl	8000168 <__aeabi_dsub>
 800bc52:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800bc56:	4602      	mov	r2, r0
 800bc58:	460b      	mov	r3, r1
 800bc5a:	e9d6 0100 	ldrd	r0, r1, [r6]
 800bc5e:	f7f4 fa83 	bl	8000168 <__aeabi_dsub>
 800bc62:	f1bb 0f00 	cmp.w	fp, #0
 800bc66:	4604      	mov	r4, r0
 800bc68:	460d      	mov	r5, r1
 800bc6a:	f6bf aee4 	bge.w	800ba36 <atan+0x3e>
 800bc6e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bc72:	461d      	mov	r5, r3
 800bc74:	e6df      	b.n	800ba36 <atan+0x3e>
 800bc76:	a51c      	add	r5, pc, #112	@ (adr r5, 800bce8 <atan+0x2f0>)
 800bc78:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bc7c:	e6db      	b.n	800ba36 <atan+0x3e>
 800bc7e:	bf00      	nop
 800bc80:	54442d18 	.word	0x54442d18
 800bc84:	3ff921fb 	.word	0x3ff921fb
 800bc88:	8800759c 	.word	0x8800759c
 800bc8c:	7e37e43c 	.word	0x7e37e43c
 800bc90:	e322da11 	.word	0xe322da11
 800bc94:	3f90ad3a 	.word	0x3f90ad3a
 800bc98:	24760deb 	.word	0x24760deb
 800bc9c:	3fa97b4b 	.word	0x3fa97b4b
 800bca0:	a0d03d51 	.word	0xa0d03d51
 800bca4:	3fb10d66 	.word	0x3fb10d66
 800bca8:	c54c206e 	.word	0xc54c206e
 800bcac:	3fb745cd 	.word	0x3fb745cd
 800bcb0:	920083ff 	.word	0x920083ff
 800bcb4:	3fc24924 	.word	0x3fc24924
 800bcb8:	5555550d 	.word	0x5555550d
 800bcbc:	3fd55555 	.word	0x3fd55555
 800bcc0:	2c6a6c2f 	.word	0x2c6a6c2f
 800bcc4:	bfa2b444 	.word	0xbfa2b444
 800bcc8:	52defd9a 	.word	0x52defd9a
 800bccc:	3fadde2d 	.word	0x3fadde2d
 800bcd0:	af749a6d 	.word	0xaf749a6d
 800bcd4:	3fb3b0f2 	.word	0x3fb3b0f2
 800bcd8:	fe231671 	.word	0xfe231671
 800bcdc:	3fbc71c6 	.word	0x3fbc71c6
 800bce0:	9998ebc4 	.word	0x9998ebc4
 800bce4:	3fc99999 	.word	0x3fc99999
 800bce8:	54442d18 	.word	0x54442d18
 800bcec:	bff921fb 	.word	0xbff921fb
 800bcf0:	440fffff 	.word	0x440fffff
 800bcf4:	7ff00000 	.word	0x7ff00000
 800bcf8:	3fdbffff 	.word	0x3fdbffff
 800bcfc:	3ff00000 	.word	0x3ff00000
 800bd00:	3ff2ffff 	.word	0x3ff2ffff
 800bd04:	40038000 	.word	0x40038000
 800bd08:	3ff80000 	.word	0x3ff80000
 800bd0c:	bff00000 	.word	0xbff00000
 800bd10:	0800c3f0 	.word	0x0800c3f0
 800bd14:	0800c410 	.word	0x0800c410

0800bd18 <fabs>:
 800bd18:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800bd1c:	4619      	mov	r1, r3
 800bd1e:	4770      	bx	lr

0800bd20 <scalbn>:
 800bd20:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800bd24:	4616      	mov	r6, r2
 800bd26:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800bd2a:	4683      	mov	fp, r0
 800bd2c:	468c      	mov	ip, r1
 800bd2e:	460b      	mov	r3, r1
 800bd30:	b982      	cbnz	r2, 800bd54 <scalbn+0x34>
 800bd32:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800bd36:	4303      	orrs	r3, r0
 800bd38:	d039      	beq.n	800bdae <scalbn+0x8e>
 800bd3a:	4b2f      	ldr	r3, [pc, #188]	@ (800bdf8 <scalbn+0xd8>)
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	f7f4 fbcb 	bl	80004d8 <__aeabi_dmul>
 800bd42:	4b2e      	ldr	r3, [pc, #184]	@ (800bdfc <scalbn+0xdc>)
 800bd44:	4683      	mov	fp, r0
 800bd46:	429e      	cmp	r6, r3
 800bd48:	468c      	mov	ip, r1
 800bd4a:	da0d      	bge.n	800bd68 <scalbn+0x48>
 800bd4c:	a326      	add	r3, pc, #152	@ (adr r3, 800bde8 <scalbn+0xc8>)
 800bd4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd52:	e01b      	b.n	800bd8c <scalbn+0x6c>
 800bd54:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 800bd58:	42ba      	cmp	r2, r7
 800bd5a:	d109      	bne.n	800bd70 <scalbn+0x50>
 800bd5c:	4602      	mov	r2, r0
 800bd5e:	f7f4 fa05 	bl	800016c <__adddf3>
 800bd62:	4683      	mov	fp, r0
 800bd64:	468c      	mov	ip, r1
 800bd66:	e022      	b.n	800bdae <scalbn+0x8e>
 800bd68:	460b      	mov	r3, r1
 800bd6a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800bd6e:	3a36      	subs	r2, #54	@ 0x36
 800bd70:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800bd74:	428e      	cmp	r6, r1
 800bd76:	dd0c      	ble.n	800bd92 <scalbn+0x72>
 800bd78:	a31d      	add	r3, pc, #116	@ (adr r3, 800bdf0 <scalbn+0xd0>)
 800bd7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd7e:	461c      	mov	r4, r3
 800bd80:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 800bd84:	f361 74df 	bfi	r4, r1, #31, #1
 800bd88:	4621      	mov	r1, r4
 800bd8a:	481d      	ldr	r0, [pc, #116]	@ (800be00 <scalbn+0xe0>)
 800bd8c:	f7f4 fba4 	bl	80004d8 <__aeabi_dmul>
 800bd90:	e7e7      	b.n	800bd62 <scalbn+0x42>
 800bd92:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800bd96:	4432      	add	r2, r6
 800bd98:	428a      	cmp	r2, r1
 800bd9a:	dced      	bgt.n	800bd78 <scalbn+0x58>
 800bd9c:	2a00      	cmp	r2, #0
 800bd9e:	dd0a      	ble.n	800bdb6 <scalbn+0x96>
 800bda0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800bda4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800bda8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bdac:	46ac      	mov	ip, r5
 800bdae:	4658      	mov	r0, fp
 800bdb0:	4661      	mov	r1, ip
 800bdb2:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800bdb6:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800bdba:	da09      	bge.n	800bdd0 <scalbn+0xb0>
 800bdbc:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 800bdc0:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 800bdc4:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 800bdc8:	480e      	ldr	r0, [pc, #56]	@ (800be04 <scalbn+0xe4>)
 800bdca:	f041 011f 	orr.w	r1, r1, #31
 800bdce:	e7bd      	b.n	800bd4c <scalbn+0x2c>
 800bdd0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800bdd4:	3236      	adds	r2, #54	@ 0x36
 800bdd6:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800bdda:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bdde:	4658      	mov	r0, fp
 800bde0:	4629      	mov	r1, r5
 800bde2:	2200      	movs	r2, #0
 800bde4:	4b08      	ldr	r3, [pc, #32]	@ (800be08 <scalbn+0xe8>)
 800bde6:	e7d1      	b.n	800bd8c <scalbn+0x6c>
 800bde8:	c2f8f359 	.word	0xc2f8f359
 800bdec:	01a56e1f 	.word	0x01a56e1f
 800bdf0:	8800759c 	.word	0x8800759c
 800bdf4:	7e37e43c 	.word	0x7e37e43c
 800bdf8:	43500000 	.word	0x43500000
 800bdfc:	ffff3cb0 	.word	0xffff3cb0
 800be00:	8800759c 	.word	0x8800759c
 800be04:	c2f8f359 	.word	0xc2f8f359
 800be08:	3c900000 	.word	0x3c900000

0800be0c <with_errno>:
 800be0c:	b570      	push	{r4, r5, r6, lr}
 800be0e:	4604      	mov	r4, r0
 800be10:	460d      	mov	r5, r1
 800be12:	4616      	mov	r6, r2
 800be14:	f7fb fb12 	bl	800743c <__errno>
 800be18:	4629      	mov	r1, r5
 800be1a:	6006      	str	r6, [r0, #0]
 800be1c:	4620      	mov	r0, r4
 800be1e:	bd70      	pop	{r4, r5, r6, pc}

0800be20 <xflow>:
 800be20:	b513      	push	{r0, r1, r4, lr}
 800be22:	4604      	mov	r4, r0
 800be24:	4619      	mov	r1, r3
 800be26:	4610      	mov	r0, r2
 800be28:	b10c      	cbz	r4, 800be2e <xflow+0xe>
 800be2a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800be2e:	e9cd 2300 	strd	r2, r3, [sp]
 800be32:	e9dd 2300 	ldrd	r2, r3, [sp]
 800be36:	f7f4 fb4f 	bl	80004d8 <__aeabi_dmul>
 800be3a:	2222      	movs	r2, #34	@ 0x22
 800be3c:	b002      	add	sp, #8
 800be3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be42:	f7ff bfe3 	b.w	800be0c <with_errno>

0800be46 <__math_uflow>:
 800be46:	2200      	movs	r2, #0
 800be48:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800be4c:	f7ff bfe8 	b.w	800be20 <xflow>

0800be50 <__math_oflow>:
 800be50:	2200      	movs	r2, #0
 800be52:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 800be56:	f7ff bfe3 	b.w	800be20 <xflow>
	...

0800be5c <_init>:
 800be5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be5e:	bf00      	nop
 800be60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be62:	bc08      	pop	{r3}
 800be64:	469e      	mov	lr, r3
 800be66:	4770      	bx	lr

0800be68 <_fini>:
 800be68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be6a:	bf00      	nop
 800be6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be6e:	bc08      	pop	{r3}
 800be70:	469e      	mov	lr, r3
 800be72:	4770      	bx	lr
